Index: views/panelTecnicos.ejs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Menú</title>\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"resources/css/style_menu_usuario.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdn.datatables.net/2.0.2/css/dataTables.bootstrap5.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\">\r\n\r\n</head>\r\n<body>\r\n    <div class=\"logo-contenedor\">\r\n        <a href=\"https://www.uacam.mx/\">\r\n            <img src=\"resources/images/uac_logo.png\" alt=\"Logo Izquierdo\" class=\"logo-izquierdo\">\r\n        </a>\r\n        <h1 class=\"titulo-sitio\" data-id=\"Estatus\" onclick=\"mostrarContenido(this)\">CIC Assistance</h1>\r\n        <a href=\"https://fi.uacam.mx/\">\r\n            <img src=\"resources/images/facu_logo.png\" alt=\"Logo Derecho\" class=\"logo-derecho\">\r\n        </a>\r\n    </div>\r\n<% if (typeof login !== 'undefined' && login) { %>\r\n    <div class=\"d-flex flex-row-reverse bd-highlight\">\r\n        <div class=\"btn-group  p-2 bd-highlight justify-content-end\">\r\n            <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                Usuario: <%= name %>\r\n            </button>\r\n            <div class=\"dropdown-menu\">\r\n                <a class=\"dropdown-item\" href=\"logout\">Logout <i class=\"bi bi-box-arrow-right\"></i></a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n<% } %>\r\n\r\n<nav class=\"menu\">\r\n    <div class=\"opcion-menu\" data-id=\"asignaciones\" onclick=\"mostrarContenido('asignaciones')\">Asignaciones</div>\r\n    <div class=\"opcion-menu\" data-id=\"diagnosticos\" onclick=\"mostrarContenido('diagnosticos')\">Generar Diagnósticos</div>\r\n</nav>\r\n\r\n\r\n\r\n<main class=\"contenido\">\r\n\t\r\n    <div id=\"asignaciones\" class=\"contenido-individual\">\r\n        <!-- Contenido de historial -->\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Asignaciones</title>\r\n            <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n            <link rel=\"stylesheet\" href=\"resources/css/asignaciones.css\">\r\n            <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n        </head>\r\n        <body class=\"bodyHistorial\">\r\n            <div class=\"historialSolicitudes\">\r\n                <h2 id=\"tituloHistorialSoli\">Historial de Asignaciones</h2>\r\n                <!--     <div class=\"contenedorFiltro\">\r\n                        <div class=\"btnFiltrar\">    @@@@@@ ESTE ES EL BOTON DE ARRIBA LA CUAL FUE DESABILITADO POR CUESTIONES DE DISENO @@@@@@@\r\n                        <button type=\"button\" class=\"btn btn-outline-dark\" id=\"guardarCambios\">Guardar cambios</button>\r\n                        </div>\r\n                    </div>\r\n                    -->\r\n\r\n                <div class=\"table-responsive\">\r\n                        <table  class=\"table table-hover table-striped\" id=\"TablaHistorialAsignaciones\">\r\n                            <thead>\r\n                                <th>Folio</th>\r\n                                <th>Nombre</th>\r\n                                <th>Fecha solicitud</th>\r\n                                <th>Equipo</th>\r\n                                <th>Descripcion</th>\r\n                                <th>Modelo</th>\r\n                                <th>Serie</th>\r\n                                <th>Marca</th>\r\n                                <th>Estado</th>\r\n                                <th>Generar diagnóstico</th>\r\n                                <th>Encuesta de satisfacción</th>\r\n                            </thead>\r\n                            <% asignaciones.forEach((asignacion) => { %>\r\n                                <tr>\r\n                                    <td><%= asignacion.FolioSolicitud %></td>\r\n                                    <td><%= asignacion.NombreSolicitante %></td>\r\n                                    <td><%= asignacion.Fecha %></td>\r\n                                    <td><%= asignacion.Equipo %></td>\r\n                                    <td><%= asignacion.Descripcion %></td>\r\n                                    <td><%= asignacion.ModeloEquipo %></td>\r\n                                    <td><%= asignacion.NoSerieEquipo %></td>\r\n                                    <td><%= asignacion.MarcaEquipo %></td>\r\n\r\n                                    <td>\r\n                                        <select class=\"form-select\" id=\"estadoSelect\" data-folio=\"<%= asignacion.FolioSolicitud %>\">\r\n                                            <option value=\"Asignada\" selected>Asignada</option>\r\n                                            <option value=\"Proceso\">En proceso</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><button class=\"btn btn-primary\" data-redireccion data-folio=\"<%= asignacion.FolioSolicitud %>\">Redireccionar</button></td>\r\n                                    <td class=\"estado-td\" data-estado=\"<%= asignacion.Encuesta %>\">\r\n                                        <%= asignacion.Encuesta %>\r\n                                    </td>\r\n                                </tr>\r\n                                <% }); %>\r\n                        </table>\r\n                </div>\r\n                <div class=\"btnFiltrar\">\r\n                    <button type=\"button\" class=\"btn btn-outline-dark\" id=\"guardarCambios\">Guardar cambios</button>\r\n                </div>\r\n                <!-- Modal -->\r\n                <div class=\"modal fade\" id=\"exampleModalLong4\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle4\" aria-hidden=\"true\">\r\n                    <div class=\"modal-dialog\" role=\"document\">\r\n                        <div class=\"modal-content\">\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\" id=\"exampleModalLongTitle4\">Encuesta de satisfacción</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\">&times;</span>\r\n                                </button>\r\n                            </div>\r\n                            <div class=\"modal-body\">\r\n                                <div class=\"table-responsive\">\r\n                                    <table class=\"table\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th scope=\"col\">Diagnóstico</th>\r\n                                                <th scope=\"col\">Solución aplicada</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody id=\"diagnosticosSoluciones\">\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cerrar</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <script src=\"resources/scripts/cambiarEstadoAsignacion.js\"></script>\r\n            <script src=\"resources/scripts/semaforoEncuesta.js\"></script>\r\n            <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\r\n            <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>  <!-- Obtenido de sweetAlert2  -->\r\n        </body>\r\n    </div>\r\n\r\n    <div id=\"diagnosticos\" class=\"contenido-individual\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Diagnóstico Técnico</title>\r\n            <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n            <link rel=\"stylesheet\" href=\"resources/css/diagnostico.css\">\r\n            <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n        </head>\r\n        <body class=\"bodyHistorial\">\r\n            <div class=\"contenedor-principal\">\r\n                \r\n                <div class=\"historialSolicitudes\" id=\"contenedorDiagnostico\">\r\n                    <h2 >Generación de diagnósticos técnicos</h2>\r\n                    <br>\r\n                    <form id=\"formDiagnostico\" method=\"post\">\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"folios\" class=\"col-sm-2 col-form-label labelMayor\">Solicitudes asignadas</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <select name=\"folios\" id=\"folios\" class=\"form-select form-select-sm\">\r\n                                    <% asignaciones.forEach(asignacion => { %>\r\n                                        <option value=\"<%= asignacion.FolioSolicitud %>\"><%= asignacion.FolioSolicitud %></option>\r\n                                    <% }); %>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <!-- Agregar campo oculto para el folio seleccionado -->\r\n                        <input type=\"hidden\" name=\"folioSeleccionado\" id=\"folioSeleccionado\">\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"comentarioT\" class=\"col-sm-2 col-form-label labelMayor\">Comentario del Técnico:</label>\r\n                            <textarea class=\"form-control\" placeholder=\"(Opcional) Ej: En espera de piezas\" name=\"comentarioT\" id=\"comentarioT\" rows=\"8\"></textarea>\r\n                        </div>\r\n                        <div class=\"enviarComentario\">\r\n                            <button type=\"submit\" class=\"btn btn-outline-dark\" id=\"enviarComentario\" value=\"Submit\" onclick=\"setAction('crearComentario')\">Enviar comentario</button>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"diagnosticoT\" class=\"col-sm-2 col-form-label labelMayor\">Diagnóstico Técnico:</label>\r\n                            <textarea class=\"form-control\" name=\"diagnosticoT\" id=\"diagnosticoT\" rows=\"8\"></textarea>\r\n                            <label for=\"solucion\" class=\"col-sm-2 col-form-label labelMayor\">Solución aplicada:</label>\r\n                            <textarea class=\"form-control\" name=\"solucion\" id=\"solucion\" rows=\"8\" required></textarea>\r\n                        </div>\r\n                        <div class=\"enviarDiagnostico\">\r\n                            <button type=\"submit\" class=\"btn btn-outline-dark\" id=\"enviarDiagnostico\" value=\"Submit\" onclick=\"setAction('crearDiagnostico')\">Cerrar diagnóstico</button>\r\n                        </div>\r\n                    </form>     \r\n            </div>\r\n            <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>  <!-- Obtenido de sweetAlert2  -->\r\n        <!--Tenemos que llamar la estructura para usar el mensaje AlertSweet en EJS llamando los parametros establecidos en APPJS-->\r\n        <% if(typeof alert != \"undefined\"){ %>\r\n            <script>\r\n                Swal.fire({\r\n                    title: '<%= alert.alertTitle %>',\r\n                    text: '<%= alert.alertMessage %>',\r\n                    icon: '<%= alert.alertIcon %>',\r\n                    showConfirmButton: <%= alert.showConfirmButton %>,\r\n                    timer: <%= alert.timer %>\r\n                }).then((result) =>{\r\n                    if (result.dismiss === Swal.DismissReason.timer) {\r\n                        window.location ='/<%= alert.ruta %>'; // redirige solo si se cierra automáticamente\r\n                    }\r\n                });\r\n            </script>\r\n            <% } %>\r\n            \r\n        </body>\r\n    </div>  \r\n\r\n</main>\r\n\r\n<script src=\"resources/scripts/panelTecnico.js\"></script>\r\n\r\n<!-- SCRIPTS PARA GENERAR LOS FILTROS FUNCIONALES ------------------------------------------------------------------------->\r\n<script src=\"resources/scripts/panelTecnico.js\"></script>\r\n\r\n<script src=\"https://code.jquery.com/jquery-3.7.1.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/js/bootstrap.bundle.min.js\"></script>\r\n<script src=\"https://cdn.datatables.net/2.0.2/js/dataTables.js\"></script>\r\n<script src=\"https://cdn.datatables.net/2.0.2/js/dataTables.bootstrap5.js\"></script>\r\n<script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\r\n\r\n<script>\r\n\r\nnew DataTable('#TablaHistorialAsignaciones', {\r\n    language: {\r\n        info: 'Mostrando _PAGE_ de _PAGES_ paginas',\r\n        infoEmpty: 'No records available',\r\n        lengthMenu: '_MENU_ Entradas por pagina',\r\n        zeroRecords: 'No se encontro - Lo siento',\r\n        search: \"Buscar:\"\r\n    }\r\n    });\r\n</script>\r\n\r\n<!--Script para mostrar el div logout-->\r\n<script>\r\n    const contenedorMostrarSesion = document.querySelector('.contenedorMostrarSesion');\r\n    const logoutMenu = document.querySelector('#logoutMenu');\r\n\r\n    contenedorMostrarSesion.addEventListener('click', function(event) {\r\n        logoutMenu.style.display = (logoutMenu.style.display === 'block') ? 'none' : 'block';\r\n        event.stopPropagation();\r\n    });\r\n\r\n    document.addEventListener('click', function(event) {\r\n        if (!logoutMenu.contains(event.target) && event.target !== logoutMenu) {\r\n            logoutMenu.style.display = 'none';\r\n        }\r\n    });\r\n\r\n</script>\r\n\r\n</body>\r\n</html>\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/panelTecnicos.ejs b/views/panelTecnicos.ejs
--- a/views/panelTecnicos.ejs	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ b/views/panelTecnicos.ejs	(date 1715806207021)
@@ -95,8 +95,12 @@
                                             <option value="Proceso">En proceso</option>
                                         </select>
                                     </td>
-                                    <td><button class="btn btn-primary" data-redireccion data-folio="<%= asignacion.FolioSolicitud %>">Redireccionar</button></td>
-                                    <td class="estado-td" data-estado="<%= asignacion.Encuesta %>">
+                                    <td>
+                                        <i class="bi bi-pencil-square h3" data-redireccion data-folio="<%= asignacion.FolioSolicitud %>">
+
+                                        </i>
+                                    </td>
+                                    <td class="estado-encuesta" data-estado="<%= asignacion.Encuesta %>">
                                         <%= asignacion.Encuesta %>
                                     </td>
                                 </tr>
@@ -105,42 +109,14 @@
                 </div>
                 <div class="btnFiltrar">
                     <button type="button" class="btn btn-outline-dark" id="guardarCambios">Guardar cambios</button>
-                </div>
-                <!-- Modal -->
-                <div class="modal fade" id="exampleModalLong4" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle4" aria-hidden="true">
-                    <div class="modal-dialog" role="document">
-                        <div class="modal-content">
-                            <div class="modal-header">
-                                <h5 class="modal-title" id="exampleModalLongTitle4">Encuesta de satisfacción</h5>
-                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
-                                    <span aria-hidden="true">&times;</span>
-                                </button>
-                            </div>
-                            <div class="modal-body">
-                                <div class="table-responsive">
-                                    <table class="table">
-                                        <thead>
-                                            <tr>
-                                                <th scope="col">Diagnóstico</th>
-                                                <th scope="col">Solución aplicada</th>
-                                            </tr>
-                                        </thead>
-                                        <tbody id="diagnosticosSoluciones">
-                                        </tbody>
-                                    </table>
-                                </div>
-                            </div>
-                            <div class="modal-footer">
-                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
-                            </div>
-                        </div>
-                    </div>
                 </div>
             </div>
             <script src="resources/scripts/cambiarEstadoAsignacion.js"></script>
             <script src="resources/scripts/semaforoEncuesta.js"></script>
+
             <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
             <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>  <!-- Obtenido de sweetAlert2  -->
+
         </body>
     </div>
 
Index: views/panelAdmin.ejs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Menú</title>\r\n    <!-- Estilos CSS -->\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"resources/css/style_menu_administrador.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdn.datatables.net/2.0.2/css/dataTables.bootstrap5.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\">\r\n</head>\r\n<body>\r\n    <div class=\"logo-contenedor\">\r\n        <a href=\"https://www.uacam.mx/\">\r\n            <img src=\"resources/images/uac_logo.png\" alt=\"Logo Izquierdo\" class=\"logo-izquierdo\">\r\n        </a>\r\n        <h1 class=\"titulo-sitio\" data-id=\"Estatus\" onclick=\"mostrarContenido(this)\">CIC Assistance</h1>\r\n        <a href=\"https://fi.uacam.mx/\">\r\n            <img src=\"resources/images/facu_logo.png\" alt=\"Logo Derecho\" class=\"logo-derecho\">\r\n        </a>\r\n    </div>\r\n\r\n<!-- Sección de sesión -->\r\n<% if (typeof login !== 'undefined' && login) { %>\r\n\r\n<div class=\"d-flex flex-row-reverse bd-highlight\" >\r\n    <div class=\"btn-group  p-2 bd-highlight justify-content-end\">\r\n        <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            Usuario: <%= name %>\r\n        </button>\r\n        <div class=\"dropdown-menu animated--fade-in\">\r\n            <a class=\"dropdown-item\" href=\"resources/manuales/manual_Admin.pdf\" target=\"_blank\">Manual de uso</a>\r\n            <a class=\"dropdown-item\" href=\"logout\">Logout <i class=\"bi bi-box-arrow-right\"></i></a>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<% } %>\r\n\r\n<!-- Menú de opciones -->\r\n<nav class=\"menu\">\r\n    <div class=\"opcion-menu\" data-id=\"Dashboard\" onclick=\"mostrarContenido(this)\">Dashboard</div>\r\n    <div class=\"opcion-menu\" data-id=\"Estatus\" onclick=\"mostrarContenido(this)\">Estatus</div>\r\n    <div class=\"opcion-menu\" data-id=\"solicitud-de-reportes\" onclick=\"mostrarContenido(this)\">Solicitud de Reportes</div>\r\n    <div class=\"opcion-menu\" data-id=\"Vales\" onclick=\"mostrarContenido(this)\">Vales</div>\r\n    <div class=\"opcion-menu\" data-id=\"Dictamen\" onclick=\"mostrarContenido(this)\">Dictamen</div>\r\n    <div class=\"opcion-menu\" data-id=\"Historial\" onclick=\"mostrarContenido(this)\">Historial de Solicitudes</div>\r\n    <div class=\"opcion-menu\" data-id=\"Historial2\" onclick=\"mostrarContenido(this)\">Historial General</div>\r\n    <div class=\"opcion-menu\" data-id=\"Registro\" onclick=\"mostrarContenido(this)\">Registro</div>\r\n    <div class=\"opcion-menu\" data-id=\"RegistroT\" onclick=\"mostrarContenido(this)\">Tecnicos</div>\r\n    <div class=\"opcion-menu\" data-id=\"Estadisticas\" onclick=\"mostrarContenido(this)\">Estadisticas</div>\r\n</nav>\r\n\r\n\r\n<main class=\"contenido\">\r\n<!-- DASHBOARD----------------------------------------------------------------------------------------------------- -->\r\n    <div id=\"Dashboard\" class=\"contenido-individual\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Dashboard</title>\r\n            <link rel=\"stylesheet\" href=\"resources/css/dashboard.css\">\r\n        </head>\r\n        <body>\r\n          <% const totalTecnicos = tecnicos.length; %>\r\n          <% const totalAsignadas = cantidadAsignadas[0].totalSolicitudes; %>\r\n          <% const totalSolicitudes = cantidadSolicitudes[0].totalSolicitudes; %>\r\n          <% const totalVales = cantidadVales[0].totalSolicitudes; %>\r\n          <% const totalSemanal = cantidadSemanal[0].totalSolicitudes; %>\r\n          <% const datos = conteo.map(contado => contado.total); %>\r\n          <% const totalDictamenes = cantidadDictamenes[0].totalDictamenes; %>\r\n            <div class=\"dashboardContenedor\">\r\n            <h2>Dashboard</h2>\r\n            <div class=\"container-xxl flex-grow-1 container-p-y\">\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-8 mb-4 order-0\">\r\n                  <div class=\"card\">\r\n                    <div class=\"d-flex align-items-end row\">\r\n                      <div class=\"col-sm-7\">\r\n                        <div class=\"card-body\">\r\n                          <h5 class=\"card-title text-primary\">¡Bienvenido <%= name %>\uD83C\uDF89!</h5>\r\n                          <p class=\"mb-4\">\r\n                            En este panel podrá consultar información general sobre el sistema <span class=\"fw-bold\">CIC Assistance</span>\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-5 text-center text-sm-left\">\r\n                        <div class=\"card-body pb-0 px-0 px-md-4\">\r\n                          <img\r\n                            src=\"resources/images/man-with-laptop-light.png\"\r\n                            height=\"140\"\r\n                            alt=\"View Badge User\"\r\n                            data-app-dark-img=\"illustrations/man-with-laptop-dark.png\"\r\n                            data-app-light-img=\"illustrations/man-with-laptop-light.png\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-4 order-1\">\r\n                  <div class=\"row\">\r\n                    <div class=\"col-lg-6 col-md-12 col-6 mb-4\">\r\n                      <div class=\"card border-primary text-white bg-primary\">\r\n                        <div class=\"card-body \">\r\n                          <div class=\"card-title d-flex align-items-start justify-content-between\">\r\n                            <div class=\"avatar flex-shrink-0\">\r\n                              <i class=\"bi bi-envelope-open h2\"></i>\r\n                            </div>\r\n                          </div>\r\n                          <span class=\"fw-semibold d-block mb-1\">Total de solicitudes</span>\r\n                          <h3 class=\"card-title mb-2\"><%= totalSolicitudes %></h3>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-lg-6 col-md-12 col-6 mb-4\">\r\n                      <div class=\"card border-success text-white bg-success\">\r\n                        <div class=\"card-body\">\r\n                          <div class=\"card-title d-flex align-items-start justify-content-between\">\r\n                            <div class=\"avatar flex-shrink-0\">\r\n                              <i class=\"bi bi-person-check h4\"></i>\r\n                            </div>\r\n                          </div>\r\n                          <span class=\"fw-semibold d-block mb-1\">Solicitudes asignadas</span>\r\n                          <h3 class=\"card-title text-nowrap mb-1\"><%= totalAsignadas %></h3>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <!-- Total Revenue -->\r\n                <div class=\"col-12 col-lg-8 order-2 order-md-3 order-lg-2 mb-4\">\r\n                  <div class=\"card\">\r\n                    <div class=\"row row-bordered g-0\">\r\n                        <h5 class=\"card-header m-0 me-2 pb-3\">Estado de las solicitudes</h5>\r\n                        <div id=\"totalRevenueChart\" class=\"px-2\">\r\n                          <canvas id=\"myChart\" width=\"200\" height=\"80\"></canvas>\r\n                        </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <!--/ Total Revenue -->\r\n                <div class=\"col-12 col-md-8 col-lg-4 order-3 order-md-2\">\r\n                  <div class=\"row\">\r\n                    <div class=\"col-6 mb-4\">\r\n                      <div class=\"card border-warning text-white bg-warning\">\r\n                        <div class=\"card-body\">\r\n                          <div class=\"card-title d-flex align-items-start justify-content-between\">\r\n                            <div class=\"avatar flex-shrink-0\">\r\n                              <i class=\"bi bi-person-fill-gear h4\"></i>\r\n                            </div>\r\n                          </div>\r\n                          <span class=\"fw-semibold d-block mb-1\">Total de técnicos</span>\r\n                          <h3 class=\"card-title text-nowrap mb-2\"><%= totalTecnicos %></h3>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-6 mb-4\">\r\n                      <div class=\"card border-secondary text-white bg-secondary\">\r\n                        <div class=\"card-body\">\r\n                          <div class=\"card-title d-flex align-items-start justify-content-between\">\r\n                            <div class=\"avatar flex-shrink-0\">\r\n                              <i class=\"bi bi-calendar-week h4\"></i>\r\n                            </div>\r\n                          </div>\r\n                          <span class=\"fw-semibold d-block mb-1\">Solicitudes recibidas ultimos 7 días</span>\r\n                          <h3 class=\"card-title mb-2\"><%= totalSemanal %></h3>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <!-- </div>\r\n    <div class=\"row\"> -->\r\n                    <div class=\"col-12 mb-4\">\r\n                      <div class=\"card border-info text-white bg-info\">\r\n                        <div class=\"card-body\">\r\n                          <div class=\"d-flex justify-content-between flex-sm-row flex-column gap-3\">\r\n                            <div class=\"d-flex flex-sm-column flex-row align-items-start justify-content-between\">\r\n                              <div class=\"card-title\">\r\n                                <h5 class=\"fw-semibold d-block mb-1\">Vales generados</h5>                              </div>\r\n                              <div class=\"mt-sm-auto\">\r\n                                <h3 class=\"mb-0\"><%= totalVales %></h3>\r\n                              </div>\r\n                            </div>\r\n                            <div id=\"profileReportChart\"></div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <!-- Order Statistics -->\r\n                <div class=\"col-md-6 col-lg-4 col-xl-4 order-0 mb-4\">\r\n                  <div class=\"card h-100\">\r\n                    <div class=\"card-header d-flex align-items-center justify-content-between pb-0\">\r\n                      <div class=\"card-title mb-0\">\r\n                        <h5 class=\"m-0 me-2\">Solicitudes por técnico</h5>\r\n                        <small class=\"text-white\">Cantidad de solicitudes asignadas a cada técnico</small>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"card-body overflow-auto\" style=\"max-height: 25em;\">\r\n                      <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n                        <div class=\"d-flex flex-column align-items-center gap-1\">\r\n                          <h2 class=\"mb-2\"><%= totalAsignadas %></h2>\r\n                          <span>Total</span>\r\n                        </div>\r\n                        <div id=\"orderStatisticsChart\"></div>\r\n                      </div>\r\n                      <ul class=\"p-0 m-0\">\r\n                        <% asignaTecnico.forEach((tecnico) => { %>\r\n                        <li class=\"d-flex mb-4 pb-1\">\r\n                          <div class=\"avatar flex-shrink-0 me-3\">\r\n                            <span class=\"avatar-initial rounded bg-label-primary\">\r\n                              <i class=\"bx bx-mobile-alt\"></i>\r\n                            </span>\r\n                          </div>\r\n                          <div class=\"d-flex w-100 flex-wrap align-items-center justify-content-between gap-2\">\r\n                            <div class=\"me-2\">\r\n                              <h6 class=\"mb-0\"><%= tecnico.NombreTecnico %></h6>\r\n                              <small class=\"text-muted\"><%= tecnico.CorreoTecnico %></small>\r\n                            </div>\r\n                            <div class=\"user-progress\">\r\n                              <small class=\"fw-semibold\"><%= tecnico.CantidadAsignaciones %></small>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                        <% }); %>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <!--/ Order Statistics -->\r\n\r\n                <!-- Expense Overview -->\r\n                <div class=\"col-md-6 col-lg-4 order-1 mb-4\">\r\n                  <div class=\"card h-100\">\r\n                    <div class=\"card-header\">\r\n                      <h5 class=\"card-title m-0 me-2\">Solicitudes-Vales-Dictámenes</h5>\r\n                    </div>\r\n                    <div class=\"card-body px-0\">\r\n                      <div class=\"tab-content p-0\">\r\n                        <div class=\"tab-pane fade show active\" id=\"navs-tabs-line-card-income\" role=\"tabpanel\">\r\n                          <canvas id=\"myChart2\" width=\"50\" height=\"50\"></canvas>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <!--/ Expense Overview -->\r\n\r\n                <!-- Transactions -->\r\n                <div class=\"col-md-6 col-lg-4 order-2 mb-4\">\r\n                  <div class=\"card h-100\">\r\n                    <div class=\"card-header d-flex align-items-center justify-content-between\">\r\n                      <h5 class=\"card-title m-0 me-2\">Solicitudes sin empezar a trabajar</h5>\r\n                    </div>\r\n                    <div class=\"card-body overflow-auto\" style=\"max-height: 25em;\">\r\n                      <ul class=\"p-0 m-0\">\r\n                        <% abierto.forEach((abiertas) => { %>\r\n                          <li class=\"d-flex mb-4 pb-1\">\r\n                            <div class=\"d-flex w-100 flex-wrap align-items-center justify-content-between gap-2\">\r\n                              <div class=\"me-2\">\r\n                                <small class=\"text-muted d-block mb-1\"><%= abiertas.Nombre %></small>\r\n                                <h6 class=\"mb-0\"><%= abiertas.Equipo %></h6>\r\n                              </div>\r\n                              <div class=\"user-progress d-flex align-items-center gap-1\">\r\n                                <h6 class=\"mb-0\"><%= abiertas.Fecha %></h6>\r\n                              </div>\r\n                            </div>\r\n                          </li>\r\n                        <% }); %>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <!--/ Transactions -->\r\n              </div>\r\n            </div>\r\n            </div>\r\n            <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n\r\n<script>\r\n  const ctx = document.getElementById('myChart');\r\n  const ctx2 = document.getElementById('myChart2');\r\n\r\n  const data = {\r\n    labels: [<% conteo.forEach(conteo => { %> '<%= conteo.estado %>', <% }); %>],\r\n    datasets: [{\r\n      label: 'Total',\r\n      data: [<%= datos %>], // Aquí deberías agregar tus datos para la segunda gráfica\r\n      backgroundColor: [\r\n      'rgba(255, 99, 132, 0.8)',\r\n      'rgba(255, 206, 86, 0.8)',\r\n      'rgba(75, 192, 192, 0.8)',\r\n      'rgba(54, 162, 235, 0.8)',\r\n      'rgba(0, 204, 102, 0.8)'\r\n      ],\r\n      borderColor: [\r\n        'rgba(255, 99, 132, 1)',\r\n        'rgba(255, 206, 86, 1)',\r\n        'rgba(75, 192, 192, 1)',\r\n        'rgba(54, 162, 235, 1)',\r\n        'rgba(0, 204, 102, 1)'\r\n      ],\r\n      borderWidth: 1\r\n      }]\r\n      };\r\n\r\n  // Configura la instancia de la segunda gráfica\r\n  const myChart = new Chart(ctx, {\r\n    type: 'bar',\r\n    data: data,\r\n    options: {\r\n      maintainAspectRatio: false,\r\n      aspectRatio: 2,\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const data2 = {\r\n    labels: ['Solicitudes', 'Vales', 'Dictamenes'],\r\n    datasets: [{\r\n      label: 'Cantidad por tipo',\r\n      data: [<%= totalSolicitudes %>, <%= totalVales %>, <%= totalDictamenes %>],\r\n      backgroundColor: [\r\n      'rgba(255, 99, 132, 0.8)',\r\n      'rgba(255, 206, 86, 0.8)',\r\n      'rgba(0, 204, 102, 0.8)'\r\n      ],\r\n      borderColor: [\r\n        'rgba(255, 99, 132, 1)',\r\n        'rgba(255, 206, 86, 1)',\r\n        'rgba(0, 204, 102, 1)'\r\n      ],\r\n      borderWidth: 1\r\n      }]\r\n      };\r\n\r\n  const myChart2 = new Chart(ctx2, {\r\n    type: 'doughnut',\r\n    data: data2,\r\n    options: {\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n</script>\r\n        </body>\r\n    </div>\r\n<!-- FIN DE DASHBOARD----------------------------------------------------------------------------------------------------- -->\r\n<!-----ESTATUSSSSSSSS--------------------------------------------------------------------------------------------->\r\n<div id=\"Estatus\" class=\"contenido-individual\">\r\n<!-- Contenido de historial -->\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n<link rel=\"stylesheet\" href=\"resources/css/solicitud_estatus.css\">\r\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n<title>Estatus</title>\r\n</head>\r\n<body>\r\n<div class=\"container\" style=\"max-width: 100%;\">\r\n    <h2 id=\"estadoSolicitudes\">Estado de solicitudes</h2>\r\n    <div class=\"guardarCambios\">\r\n        <button type=\"button\" class=\"btn btn-outline-dark\" id=\"guardarCambios\">Guardar cambios</button>\r\n    </div>\r\n    <div class=\"table-responsive overflow-auto\" style=\"max-height: 30em;\">\r\n        <table  class=\"table\" id=\"estatusTabla\">\r\n            <tr class=\"tableEstatus\">\r\n                <th colspan=\"5\" class=\"tablaTitulos\">Abierto</th>\r\n                <th colspan=\"4\" class=\"tablaTitulos\">Asignadas</th>\r\n                <th colspan=\"4\" class=\"tablaTitulos\">En Proceso</th>\r\n                <th colspan=\"4\" class=\"tablaTitulos\">En Espera</th>\r\n                <th colspan=\"4\" class=\"tablaTitulos\">Cerrado</th>\r\n            </tr>\r\n        <tbody>\r\n            <tr class=\"table-secondary\">\r\n                <td>Folio</td>\r\n                <td>Nombre</td>\r\n                <td>Equipo</td>\r\n                <td>Fecha</td>\r\n                <td id=\"bordeD\">Estatus</td>\r\n                <td >Folio</td>\r\n                <td>Nombre</td>\r\n                <td>Tecnico</td>\r\n                <td id=\"bordeDer\">Estatus</td>\r\n                <td >Folio</td>\r\n                <td>Nombre</td>\r\n                <td>Equipo</td>\r\n                <td id=\"bordeDer\">Estatus</td>\r\n                <td >Folio</td>\r\n                <td>Nombre</td>\r\n                <td>Equipo</td>\r\n                <td id=\"bordeDer\">Estatus</td>\r\n                <td>Folio</td>\r\n                <td>Nombre</td>\r\n                <td>Equipo</td>\r\n                <td>Estatus</td>\r\n            </tr>\r\n            <tr class=\"table-light\">\r\n                <% for (let i = 0; i < Math.max(abierto.length, pendiente.length, cerrado.length); i++) { %>\r\n                    <tr>\r\n                        <!-- Abierto -->\r\n                        <% if (i < abierto.length) { %>\r\n                            <td class=\"bg-danger\"><%= abierto[i].FolioSolicitud %></td>\r\n                            <td class=\"bg-danger\"><%= abierto[i].Nombre %></td>\r\n                            <td class=\"bg-danger\" id=\"equipoEstado<%= i %>\"><%= abierto[i].Equipo %></td>\r\n                            <td class=\"bg-danger fechaEstado\" id=\"fechaEstado<%= i %>\"><%= abierto[i].Fecha %></td>\r\n                            <td class=\"seleccion bg-danger\" id=\"bordeDerecho<%= i %>\" >\r\n                                <select class=\"form-select cambiarEstado\" data-folio=\"<%= abierto[i].FolioSolicitud %>\">\r\n                                    <option value=\"Abierto\" selected>Abierto</option>\r\n                                    <option value=\"Proceso\">En Proceso</option>\r\n                                    <option value=\"Espera\">En Espera</option>\r\n                                    <option value=\"Cerrado\">Cerrado</option>\r\n                                </select>\r\n                            </td>\r\n                        <% } else { %>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td id=\"bordeDerechoVacio\"></td>\r\n                        <% } %>\r\n                        <!----ASIGNADAS-->\r\n                        <% if (i < asignada.length) { %>\r\n                            <td class=\"bg-warning\"><%= asignada[i].FolioSolicitud %></td>\r\n                            <td class=\"bg-warning\"><%= asignada[i].UsuarioNombre %></td>\r\n                            <td class=\"bg-warning\" id=\"equipoEstado<%= i %>\"><%= asignada[i].Nombre %></td>\r\n                            <td class=\"seleccion bg-warning\" id=\"ladoDerecho<%= i %>\" >\r\n                                <select class=\"form-select cambiarEstado\" data-folio=\"<%= asignada[i].FolioSolicitud %>\">\r\n                                    <option value=\"Asignada\" selected>Asignada</option>\r\n                                    <option value=\"Proceso\">En Proceso</option>\r\n                                    <option value=\"Espera\">En Espera</option>\r\n                                    <option value=\"Cerrado\">Cerrado</option>\r\n                                </select>\r\n                            </td>\r\n                        <% } else { %>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td id=\"ladoDerechoVacio\"></td>\r\n                        <% } %>\r\n                        <!-- Pendiente -->\r\n                        <% if (i < pendiente.length) { %>\r\n                            <td class=\"bg-info\"><%= pendiente[i].FolioSolicitud %></td>\r\n                            <td class=\"bg-info\"><%= pendiente[i].Nombre %></td>\r\n                            <td class=\"bg-info\"><%= pendiente[i].Equipo %></td>\r\n                            <td class=\"seleccion bg-info\" id=\"pendienteDerecha<%= i %>\">\r\n                                <select class=\"form-select cambiarEstado\" data-folio=\"<%= pendiente[i].FolioSolicitud %>\">\r\n                                    <option value=\"Proceso\" selected>En Proceso</option>\r\n                                    <option value=\"Abierto\">Abierto</option>\r\n                                    <option value=\"Espera\">En Espera</option>\r\n                                    <option value=\"Cerrado\">Cerrado</option>\r\n                                </select>\r\n                            </td>\r\n                        <% } else { %>\r\n                            <td ></td>\r\n                            <td ></td>\r\n                            <td ></td>\r\n                            <td id=\"pendienteVacioDerecha\"></td>\r\n\r\n                        <% } %>\r\n                        <!-- En espera -->\r\n                        <% if (i < espera.length) { %>\r\n                            <td class=\"bg-primary\"><%= espera[i].FolioSolicitud %></td>\r\n                            <td class=\"bg-primary\"><%= espera[i].Nombre %></td>\r\n                            <td class=\"bg-primary\"><%= espera[i].Equipo %></td>\r\n                            <td class=\"seleccion bg-primary\" id=\"esperarDerecha<%= i %>\">\r\n                                <select class=\"form-select cambiarEstado\" data-folio=\"<%= espera[i].FolioSolicitud %>\">\r\n                                    <option value=\"Proceso\">En Proceso</option>\r\n                                    <option value=\"Abierto\">Abierto</option>\r\n                                    <option value=\"Espera\" selected>En Espera</option>\r\n                                    <option value=\"Cerrado\">Cerrado</option>\r\n                                </select>\r\n                            </td>\r\n                        <% } else { %>\r\n                            <td ></td>\r\n                            <td ></td>\r\n                            <td ></td>\r\n                            <td id=\"esperaVacioDerecha\"></td>\r\n\r\n                        <% } %>\r\n                        <!-- Cerrado -->\r\n                        <% if (i < cerrado.length) { %>\r\n                            <td class=\"bg-success\"><%= cerrado[i].FolioSolicitud %></td>\r\n                            <td class=\"bg-success\"><%= cerrado[i].Nombre %></td>\r\n                            <td class=\"bg-success\"><%= cerrado[i].Equipo %></td>\r\n                            <td class=\"seleccion bg-success\" id=\"ladoDerecho<%= i %>\" >\r\n                                <select class=\"form-select cambiarEstado\" data-folio=\"<%= cerrado[i].FolioSolicitud %>\">\r\n                                    <option value=\"Asignada\" selected>Asignada</option>\r\n                                    <option value=\"Proceso\">En Proceso</option>\r\n                                    <option value=\"Espera\">En Espera</option>\r\n                                    <option value=\"Cerrado\">Cerrado</option>\r\n                                </select>\r\n                            </td>\r\n                        <% } else { %>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n\r\n                        <% } %>\r\n                    </tr>\r\n                <% } %>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    </div>\r\n</div>\r\n<script src=\"resources/scripts/estatus.js\"></script>\r\n</body>\r\n<!-----SOLICITUD DE SOPORTE TÉCNICO--------------------------------------------------------------------------------------------->\r\n</div>\r\n    <div id=\"solicitud-de-reportes\" class=\"contenido-individual\">\r\n        <!-- Contenido de la solicitud de reportes -->\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <link rel=\"stylesheet\" href=\"resources/css/style_solicitud.css\">\r\n            <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n            <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n            <title>Solicitud Soporte Tecnico</title>\r\n        </head>\r\n        <body>\r\n            <div class=\"solicitud\">\r\n                <p id=\"fechaSolicitud\"></p>\r\n                <h2>Solicitud de Servicio Técnico</h2>\r\n                <div id=\"telefonoError\" style=\"width: 50%;\"></div> <!-- Aquí se mostrará el mensaje de error -->\r\n                <form action=\"solicitudAdmin\" method=\"post\" onsubmit=\"return validarFormulario();\">\r\n                    <div class=\"contenedorInicial\">\r\n                        <div>\r\n                            <label for=\"telefono\" class=\"labelMayor required\">Teléfono</label>\r\n                            <input class=\"form-control form-control-sm\" type=\"number\" placeholder=\"Escribe tu telefono\" aria-label=\".form-control-sm example\" name=\"telefono\" id=\"telefono\" required>\r\n                        </div>\r\n                        <div>\r\n                            <label for=\"edificio\" class=\"labelMayor required\">Edificio y nivel</label>\r\n                            <select name=\"edificio\" id=\"edificio\" class=\"form-select form-select-sm\" required>\r\n                                <% edificios.forEach(edificio => { %>\r\n                                    <option value=\"<%= edificio.IdEdificio %>\"><%= edificio.NombreEdificio %>-<%= edificio.Nivel %></option>\r\n                                <% }); %>\r\n                            </select>\r\n                        </div>\r\n                        <div>\r\n                            <label for=\"area\" class=\"labelMayor required\">Ubicación física</label>\r\n                            <input class=\"form-control form-control-sm\" type=\"text\" placeholder=\"Escribe tu área\" aria-label=\".form-control-sm example\" name=\"area\" id=\"area\" required>\r\n                        </div>\r\n                        <div>\r\n                            <label for=\"usuarios\" class=\"labelMayor required\">Usuario</label>\r\n                            <select name=\"usuarios\" id=\"usuarios\" class=\"form-select form-select-sm\">\r\n                                <% usuarios.forEach(usuario => { %>\r\n                                    <option value=\"<%= usuario.IdUsuario + '|' + usuario.Correo %>\"><%= usuario.Nombre %></option>\r\n                                <% }); %>\r\n                            </select>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <fieldset>\r\n                        <legend class=\"labelMayor required\">Equipos</legend>\r\n                        <div class=\"contenedor-checkbox\">\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"monitor1\" value=\"Monitor\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"monitor\">Monitor</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"nodo1\" value=\"Nodo\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"nodo\">Nodo</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"ups1\" value=\"UPS\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"ups\">UPS</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\"  name=\"equipos\" id=\"laptop1\" value=\"Laptop\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"laptop\">Laptop</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"proyector1\" value=\"Proyector\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"proyector\">Proyector</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"point\" value=\"Access Point\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"access\">Access Point</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"pc1\" value=\"PC\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"pc\">PC</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\"  name=\"equipos\" id=\"gabinete1\" value=\"Gabinete\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"gabinete\">Gabinete</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\"  name=\"equipos\" id=\"teclado1\" value=\"Teclado\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"teclado\">Teclado</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"raton\" value=\"Mouse\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"mouse\">Mouse</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"telef\" value=\"Teléfono\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"telefono\">Teléfono</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"impresora1\" value=\"Impresora\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"impresora\">Impresora</label>\r\n                            </div>\r\n                            <div class=\"form-check form-check-inline\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\"  name=\"equipos\" id=\"otro\" value=\"Otro\" data-input-id=\"otroInput\" onchange=\"checboxListado(this)\">\r\n                                <label class=\"form-check-label\" for=\"otro\">Otro</label>\r\n                                <input class=\"form-control form-control-sm\" type=\"text\"  name=\"otroInput\" id=\"otroInput\" disabled>\r\n                            </div>\r\n                            <input type=\"hidden\" name=\"equiposSeleccionados\" id=\"equiposSeleccionados\" value=\"\">\r\n                        </div>\r\n                    </fieldset>\r\n\r\n                    <label for=\"descripcion\" class=\"labelMayor required\">Descripción del problema</label>\r\n                    <textarea class=\"form-control\" name=\"descripcion\" id=\"descripcion\" rows=\"8\" placeholder=\"Escribe todos los detalles de tu problema\" required></textarea>\r\n\r\n                    <div class=\"enviarSoli\">\r\n                        <button type=\"submit\" class=\"btn btn-outline-dark\" id=\"enviar\" value=\"Submit\" onclick=\"validarFormulario()\">Enviar</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\r\n            <script src=\"resources/scripts/seleccionMultiple.js\"></script>\r\n            <script src=\"resources/scripts/solicitudSoporte.js\"></script>\r\n            <script src=\"resources/scripts/validarTelefono.js\"></script>\r\n            <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>  <!-- Obtenido de sweetAlert2  -->\r\n            <!--Tenemos que llamar la estructura para usar el mensaje AlertSweet en EJS llamando los parametros establecidos en APPJS-->\r\n            <% if(typeof alert != \"undefined\"){ %>\r\n            <script>\r\n                Swal.fire({\r\n                    title: '<%= alertTitle %>',\r\n                    text: '<%= alertMessage %>',\r\n                    icon: '<%= alertIcon %>',\r\n                    showConfirmButton: <%= showConfirmButton %>,\r\n                    timer: <%= timer %>\r\n                }).then(() =>{\r\n                    window.location ='/<%= ruta %>'    //Hay que especificar la ruta con '/' que indica que nos redirige a la raiz, index\r\n                })\r\n            </script>\r\n            <% } %>\r\n        </body>\r\n    </div>\r\n\r\n<!-- VALES----------------------------------------------------------------------------------------------------- -->\r\n    <div id=\"Vales\" class=\"contenido-individual\">\r\n        <!-- Contenido de historial -->\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <link rel=\"stylesheet\" href=\"resources/css/solicitud_vale.css\">\r\n        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n    </head>\r\n    <body>\r\n        <!-- Contenedor principal -->\r\n        <div class=\"contenedor-principal\" id=\"contenedorPDF\">\r\n            <h2 >Creación de Vales Servicio Técnico</h2>\r\n            <!-- Contenedor azul con información del vale de entrada -->\r\n            <form action=\"vales\" method=\"post\">\r\n                <div class=\"mb-3 row\">\r\n                    <label for=\"folios\" class=\"col-sm-2 col-form-label labelFolio\">Folio de la solicitud</label>\r\n                    <div class=\"col-sm-10\">\r\n                        <select name=\"folios\" id=\"folios\" class=\"form-select form-select-sm\">\r\n                            <% folioSolicitudes.forEach(folio => { %>\r\n                            <option value=\"<%= folio.FolioSolicitud + '|' + folio.Correo %>\"><%= folio.FolioSolicitud %></option>\r\n                            <% }); %>\r\n                        </select>\r\n                    </div>\r\n                  </div>\r\n                  <fieldset>\r\n                    <legend class=\"labelMayor required\">Equipos</legend>\r\n                    <div class=\"contenedor-checkbox\">\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"monitor\" value=\"Monitor\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"monitor\">Monitor</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"nodo\" value=\"Nodo\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"nodo\">Nodo</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"ups\" value=\"UPS\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"ups\">UPS</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\"  name=\"equipos\" id=\"laptop\" value=\"Laptop\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"laptop\">Laptop</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"proyector\" value=\"Proyector\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"proyector\">Proyector</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"access\" value=\"Access Point\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"access\">Access Point</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"pc\" value=\"PC\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"pc\">PC</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\"  name=\"equipos\" id=\"gabinete\" value=\"Gabinete\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"gabinete\">Gabinete</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\"  name=\"equipos\" id=\"teclado\" value=\"Teclado\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"teclado\">Teclado</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"mouse\" value=\"Mouse\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"mouse\">Mouse</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"tele\" value=\"Teléfono\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"telefono\">Teléfono</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" name=\"equipos\" id=\"impresora\" value=\"Impresora\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"impresora\">Impresora</label>\r\n                        </div>\r\n                        <div class=\"form-check form-check-inline\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\"  name=\"equipos\" id=\"otro2\" value=\"Otro\" data-input-id=\"otroInput2\" onchange=\"handleCheckboxChange(this)\">\r\n                            <label class=\"form-check-label\" for=\"otro2\">Otro</label>\r\n                            <input class=\"form-control form-control-sm\" type=\"text\"  name=\"otroInput2\" id=\"otroInput2\" disabled>\r\n                        </div>\r\n                        <input type=\"hidden\" name=\"listaEquiposCheck\" id=\"listaEquiposCheck\" value=\"\">\r\n\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend class=\"labelMayor\">Datos del equipo:</legend>\r\n\r\n                    <div class=\"mb-3 row\">\r\n                        <label for=\"serie\" class=\"col-sm-2 col-form-label required\">No. Serie:</label>\r\n                        <div class=\"col-sm-10\">\r\n                          <input type=\"text\" class=\"form-control datosEquipo\" name=\"serie\" id=\"serie\" required>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mb-3 row\">\r\n                        <label for=\"marca\" class=\"col-sm-2 col-form-label required\">Marca:</label>\r\n                        <div class=\"col-sm-10\">\r\n                          <input type=\"text\" class=\"form-control datosEquipo\" name=\"marca\" id=\"marca\" required>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mb-3 row\">\r\n                        <label for=\"modelo\" class=\"col-sm-2 col-form-label required\">Modelo:</label>\r\n                        <div class=\"col-sm-10\">\r\n                          <input type=\"text\" class=\"form-control datosEquipo\"  name=\"modelo\" id=\"modelo\" required>\r\n                        </div>\r\n                    </div>\r\n                    <label for=\"caracteristicas\" class=\"required\">Características:</label>\r\n                    <textarea class=\"form-control\" name=\"caracteristicas\" id=\"caracteristicas\" rows=\"8\" required></textarea>\r\n\r\n                </fieldset>\r\n                <div class=\"contenedor-estatus\">\r\n                    <div>\r\n                        <label for=\"estatus\" class=\"col-sm-2 col-form-label labelFolio required\" id=\"lblEstatus\">Estatus:</label>\r\n                            <select name=\"estatus\" id=\"estatus\" class=\"form-select form-select-sm\" required>\r\n                                <option value=\"Funciona\">Funciona</option>\r\n                                <option value=\"No funciona\">No funciona</option>\r\n                                <option value=\"Esperar\">Esperar piezas</option>\r\n                            </select>\r\n                    </div>\r\n                    <div>\r\n                        <label for=\"tecnico\" class=\"col-sm-2 col-form-label labelFolio required\" id=\"lblAsignado\">Asignar a técnico:</label>\r\n                        <select name=\"tecnico\" id=\"tecnico\" class=\"form-select form-select-sm\">\r\n                            <% tecnicos.forEach(tecnico => { %>\r\n                            <option value=\"<%= tecnico.IdTecnico + '|' + tecnico.Correo%>\"><%= tecnico.IdTecnico %>-<%= tecnico.Nombre %></option>\r\n                            <% }); %>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label for=\"revision\" class=\"col-sm-2 col-form-label labelFolio\" id=\"lblRevision\">Revisó:</label>\r\n                        <input type=\"text\" class=\"form-control datosEquipo input-sm\" name=\"revision\" id=\"revision\" required>\r\n                    </div>\r\n                </div>\r\n                <div class=\"enviarVale\">\r\n                    <button type=\"submit\" class=\"btn btn-outline-dark\" id=\"generarPDF\" value=\"Submit\">Generar PDF</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div> <!-- Fin del contenedor princiupal-->\r\n        <script src=\"resources/scripts/seleccionMultiple.js\"></script>\r\n        <script src=\"resources/scripts/vale.js\"></script>\r\n        <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>  <!-- Obtenido de sweetAlert2  -->\r\n        <!--Tenemos que llamar la estructura para usar el mensaje AlertSweet en EJS llamando los parametros establecidos en APPJS-->\r\n        <% if(typeof alert != \"undefined\"){ %>\r\n        <script>\r\n            Swal.fire({\r\n                title: '<%= alertTitle %>',\r\n                text: '<%= alertMessage %>',\r\n                icon: '<%= alertIcon %>',\r\n                showConfirmButton: <%= showConfirmButton %>,\r\n                timer: <%= timer %>\r\n            }).then((result) =>{\r\n                window.location.href = '/Vale_de_entrada_001.pdf';\r\n                window.location ='/<%= ruta %>'    //Hay que especificar la ruta con '/' que indica que nos redirige a la raiz, index\r\n            })\r\n        </script>\r\n        <% } %>\r\n    </body>\r\n    </div>\r\n\r\n<!-- -------------------------------------------------------------------------------------------------------- -->\r\n<!-- DICTAMENES------------------------------------------------------------------------------------------------ -->\r\n<div id=\"Dictamen\" class=\"contenido-individual\">\r\n    <!-- Contenido de historial -->\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Creación de Dictamen</title>\r\n    <link rel=\"stylesheet\" href=\"resources/css/solicitud_dictamen.css\">\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n</head>\r\n<body class=\"bodyDictamen\">\r\n    <div class=\"creacionDictamen\">\r\n        <p id=\"fechaDictamen\"></p>\r\n        <h2>Creación de Dictámenes</h2>\r\n        <div class=\"row g-3\">\r\n            <div class=\"col-auto\">\r\n                <label for=\"folioSolicitud\" class=\"form-control-plaintext required\">Folio:</label>\r\n            </div>\r\n            <div class=\"col-auto\">\r\n                <input type=\"text\" name=\"folioSolicitud\" id=\"folioSolicitudDictamen\" class=\"form-control\"  placeholder=\"Folio de la solicitud de soporte técnico\">\r\n            </div>\r\n            <div class=\"col-auto\">\r\n                <button type=\"button\" class=\"btn btn-outline-dark\" id=\"btnBuscarFolio\" onclick=\"buscarFolio()\">Buscar</button>\r\n            </div>\r\n        </div>\r\n        <form action=\"/guardar-datos-y-generar-pdf\" method=\"post\">\r\n            <div class=\"contenedorDictamen\">\r\n                <div>\r\n                    <label for=\"valeId\" class=\"labelMayor\">Vale:</label>\r\n                    <input type=\"text\" id=\"identificadorVale\" name=\"valeId\" class=\"form-control form-control-sm\" readonly>\r\n                </div>\r\n                <div>\r\n                    <label for=\"equipoDictamen\" class=\"labelMayor\">Equipo:</label>\r\n                    <input type=\"text\" id=\"equipoDictamen\" name=\"equipoDictamen\" class=\"form-control form-control-sm\" readonly>\r\n                </div>\r\n                <div>\r\n                    <label for=\"marcaEquipo\" class=\"labelMayor required\">Marca:</label>\r\n                    <input type=\"text\" name=\"marcaEquipo\" id=\"marcaEquipo\" class=\"form-control form-control-sm\" required>\r\n                </div>\r\n                <div>\r\n                    <label for=\"modeloEquipo\" class=\"labelMayor required\">Modelo:</label>\r\n                    <input type=\"text\" name=\"modeloEquipo\" id=\"modeloEquipo\" class=\"form-control form-control-sm\" required>\r\n                </div>\r\n                <div>\r\n                    <label for=\"noSerieEquipo\" class=\"labelMayor required\">N° de serie:</label>\r\n                    <input type=\"text\" name=\"noSerieEquipo\" id=\"noSerieEquipo\" class=\"form-control form-control-sm\" required>\r\n                </div>\r\n                <div>\r\n                    <label for=\"estado\" class=\"labelMayor required\">Estado:</label>\r\n                    <select name=\"estado\" id=\"estado\" class=\"form-select form-select-sm\" required>\r\n                        <option value=\"blanco\">&nbsp;</option>\r\n                        <option value=\"Vigente\">Vigente</option>\r\n                        <option value=\"Obsoleto\">Obsoleto</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label for=\"tipoDictamen\" class=\"labelMayor required\">Dictamen:</label>\r\n                    <select name=\"tipoDictamen\" id=\"tipoDictamen\" class=\"form-select form-select-sm\" required>\r\n                        <option value=\"blanco\">&nbsp;</option>\r\n                        <option value=\"Funciona\">Funcional</option>\r\n                        <option value=\"No Funciona\">Obsoleto</option>\r\n                        <option value=\"Baja\">Tramitar Baja</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                   <label for=\"dirigidoA\" class=\"labelMayor required\">Dirigido a:</label>\r\n                   <input type=\"text\" name=\"dirigidoA\" id=\"dirigidoA\" class=\"form-control form-control-sm\" required>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"contenedorSecundario\">\r\n                <div>\r\n                    <label for=\"caracDictamen\" class=\"labelMayor required\">Características:</label>\r\n                    <textarea class=\"form-control\" name=\"caracDictamen\" id=\"caracDictamen\" cols=\"30\" rows=\"5\" required></textarea>\r\n                </div>\r\n                <div>\r\n                    <label for=\"observacionesDictamen\" class=\"labelMayor required\">Observaciones:</label>\r\n                    <textarea class=\"form-control\" name=\"observacionesDictamen\" id=\"observacionesDictamen\" cols=\"30\" rows=\"5\" required></textarea>\r\n                </div>\r\n                <div>\r\n                    <label for=\"descripcionDictamen\" class=\"labelMayor required\">Descripción técnica de partes necesarias:</label>\r\n                    <textarea class=\"form-control\" name=\"descripcionDictamen\" id=\"descripcionDictamen\" cols=\"30\" rows=\"5\" required></textarea>\r\n                </div>\r\n                <div class=\"btnGuardarDatos\">\r\n                    <button type=\"submit\" id=\"btnGuardarDatos\" class=\"btn btn-outline-dark\" value=\"submit\">Guardar datos y generar PDF</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\r\n<script src=\"https://code.jquery.com/jquery-3.6.4.min.js\"></script>\r\n<script src=\"resources/scripts/dictamenes_fecha.js\"></script>\r\n<script src=\"resources/scripts/relleno_dictamen.js\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>  <!-- Obtenido de sweetAlert2  -->\r\n<!--Tenemos que llamar la estructura para usar el mensaje AlertSweet en EJS llamando los parametros establecidos en APPJS-->\r\n<% if(typeof alert != \"undefined\"){ %>\r\n    <script>\r\n        Swal.fire({\r\n            title: '<%= alertTitle %>',\r\n            text: '<%= alertMessage %>',\r\n            icon: '<%= alertIcon %>',\r\n            showConfirmButton: <%= showConfirmButton %>,\r\n            timer: <%= timer %>\r\n        }).then((result) =>{\r\n            window.location ='/<%= ruta %>'    //Hay que especificar la ruta con '/' que indica que nos redirige a la raiz, index\r\n        })\r\n    </script>\r\n    <% } %>\r\n</body>\r\n</div>\r\n\r\n\r\n<!-- ------------------------------------------------------------------------------------------------- -->\r\n<!-- SOLICITUD DE HISTORIAL DE SOLICITUDES -------------------------------------------------------------------------------------->\r\n<div id=\"Historial\" class=\"contenido-individual\">\r\n    <head>\r\n        <!-- Metadatos -->\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <title>Historial de Solicitudes</title>\r\n        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n        <link rel=\"stylesheet\" href=\"estilos/solicitud_historial.css\">\r\n        <!-- Fuentes -->\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n    </head>\r\n    <body class=\"bodyHistorial\">\r\n    <!-- Contenedor principal para el historial de solicitudes -->\r\n        <div class=\"historialSolicitudes\">\r\n            <!-- Título de la sección -->\r\n            <h2 id=\"tituloHistorialSoli\">Historial de Solicitudes</h2>\r\n                <!-- Contenedor para la tabla del historial -->\r\n                <div class=\"table-responsive\">\r\n                    <table  class=\"table table-hover table-striped\" id=\"TablaHistorialSolicitudes\">\r\n                        <thead>\r\n                            <th>Folio</th>\r\n                            <th>Fecha</th>\r\n                            <th>Hora</th>\r\n                            <th>Usuario</th>\r\n                            <th>Equipo</th>\r\n                            <th>Estado</th>\r\n                            <th>Vale</th>\r\n                            <th>Dictamen</th>\r\n                        </thead>\r\n                        <% historial.forEach(solicitud => { %>\r\n                            <!-- Fila de la tabla para cada solicitud en el historial -->\r\n                            <tr>\r\n                                <td><%= solicitud.FolioSolicitud %></td>\r\n                                <td><%= solicitud.Fecha %></td>\r\n                                <td><%= solicitud.Hora %></td>\r\n                                <td><%= solicitud.NombreUsuario %></td>\r\n                                <td><%= solicitud.Equipo%></td>\r\n                                <td class=\"estado-celda\" data-estado=\"<%= solicitud.Estado %>\"><%= solicitud.Estado%></td>\r\n                                <td><%= solicitud.Vale %></td>\r\n                                <td><%= solicitud.Dictamen %></td>\r\n                            </tr>\r\n                        <% }); %>\r\n                    </table>\r\n                </div>\r\n        </div>\r\n        <script src=\"resources/scripts/semaforo.js\"></script>\r\n            <script src=\"resources/scripts/paneles.js\"></script>\r\n\r\n    </body>\r\n</div>\r\n\r\n<!-- ------------------------------------------------------------------------------------------------ -->\r\n<!-- REGISTRO DE USUARIOS------------------------------------------------------------------------------ -->\r\n    <div id=\"Registro\" class=\"contenido-individual\">\r\n        <!-- Contenido de Registro -->\r\n        <head>\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Registro usuarios</title>\r\n            <link rel=\"stylesheet\" href=\"resources/css/style_registro.css\">\r\n            <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n            <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n        </head>\r\n        <body>\r\n        <div class=\"contenedor\">\r\n            <h3 class=\"titulosLogin\">Registrar Usuario</h3>\r\n            <form action=\"registerP\" method=\"post\" onsubmit=\"return validar();\" id=\"formRegistro\">\r\n                <div class=\"registroCampos\">\r\n                    <label for=\"username\" class=\"lblRegistro required\">Nombre de Usuario</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" placeholder=\"Nombre de usuario unico\" required>\r\n                </div>\r\n                <div class=\"registroCampos\">\r\n                    <label for=\"password\" class=\"lblRegistro required\">Contraseña</label>\r\n                    <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"8 caracteres mínimo, sin espacios\" required>\r\n                </div>\r\n                <div class=\"registroCampos\">\r\n                    <label for=\"password2\" class=\"lblRegistro required\">Repita su contraseña</label>\r\n                    <input type=\"password\" class=\"form-control\" id=\"password2\" name=\"password2\" placeholder=\"8 caracteres mínimo, sin espacios\" required>\r\n                </div>\r\n                <div class=\"registroCampos\">\r\n                    <label for=\"name\" class=\"lblRegistro required\">Nombre Completo</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" placeholder=\"Nombres y apellidos\" required>\r\n                </div>\r\n                <div class=\"registroCampos\">\r\n                    <label for=\"correo\" class=\"lblRegistro required\">Correo institucional</label>\r\n                    <input type=\"email\" class=\"form-control\" id=\"correo\" name=\"correo\" placeholder=\"ejemplo@uacam.mx\" required>\r\n                </div>\r\n                <div class=\"selects_registro\">\r\n                    <div class=\"mb-3 row\">\r\n                        <label for=\"rol\" class=\"col-sm-2 col-form-label required\">Rol:</label>\r\n                        <div class=\"col-sm-10\">\r\n                            <select name=\"rol\" id=\"rol\" class=\"form-select form-select-sm\" required>\r\n                                <option value=\"Admin\">Administrador</option>\r\n                                <option value=\"Usuario\">Usuario</option>\r\n                                <option value=\"Tecnico\">Técnico</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mb-3 row\">\r\n                        <label for=\"genero\" class=\"col-sm-2 col-form-label\">Genero:</label>\r\n                        <div class=\"col-sm-10\">\r\n                            <select name=\"genero\" id=\"genero\" class=\"form-select form-select-sm\" required>\r\n                                <option value=\"F\">Femenino</option>\r\n                                <option value=\"M\">Masculino</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"enviarRegistro\">\r\n                    <input type=\"submit\" value=\"Registrar\" class=\"btn btn-outline-dark\" onclick=\"validar()\">\r\n                </div>\r\n            </form>\r\n            <!-- Button trigger modal -->\r\n            <button type=\"button\" class=\"btn btn-outline-dark\" data-toggle=\"modal\" data-target=\"#exampleModalLong\">\r\n                Ver listado de usuarios registrados\r\n            </button>\r\n            <br>\r\n            <!-- Modal -->\r\n            <div class=\"modal fade\" id=\"exampleModalLong\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\r\n                <div class=\"modal-dialog\" role=\"document\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                    <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">Usuarios</h5>\r\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        Enlistado de todos los usuarios registrados en CIC Assistance\r\n                        <div class=\"table-responsive\">\r\n                            <table class=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                      <th scope=\"col\">Id</th>\r\n                                      <th scope=\"col\">Nombre</th>\r\n                                      <th scope=\"col\">Rol</th>\r\n                                      <th scope=\"col\">Correo</th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <% usuarios.forEach(usuario => { %>\r\n                                    <tr>\r\n                                      <td><%= usuario.IdUsuario %></td>\r\n                                      <td><%= usuario.Nombre%></td>\r\n                                      <td><%= usuario.Rol %></td>\r\n                                      <td><%= usuario.Correo%></td>\r\n                                    </tr>\r\n                                    <% }); %>\r\n                                  </tbody>\r\n                            </table>\r\n                          </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cerrar</button>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <script src=\"resources/scripts/validacion.js\"></script>\r\n        <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>  <!-- Obtenido de sweetAlert2  -->\r\n        <!--Tenemos que llamar la estructura para usar el mensaje AlertSweet en EJS llamando los parametros establecidos en APPJS-->\r\n        <% if(typeof alert != \"undefined\"){ %>\r\n        <script>\r\n            Swal.fire({\r\n                title: '<%= alertTitle %>',\r\n                text: '<%= alertMessage %>',\r\n                icon: '<%= alertIcon %>',\r\n                showConfirmButton: <%= showConfirmButton %>,\r\n                timer: <%= timer %>\r\n            }).then(() =>{\r\n                window.location ='/<%= ruta %>'    //Hay que especificar la ruta con '/' que indica que nos redirige a la raiz, index\r\n            })\r\n        </script>\r\n        <% } %>\r\n        </body>\r\n    </div>\r\n<!-----------------------------------TECNICOS-->\r\n<div id=\"RegistroT\" class=\"contenido-individual\">\r\n    <!-- Contenido de Registro -->\r\n    <head>\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <title>Registro usuarios</title>\r\n        <link rel=\"stylesheet\" href=\"resources/css/style_registro.css\">\r\n        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n    </head>\r\n    <body>\r\n<div class=\"contenedor\" id=\"contenedorTecnicos\">\r\n    <h3 class=\"titulosLogin\">Registrar Tecnico</h3>\r\n    <form action=\"registerT\" method=\"post\" id=\"formRegistro\">\r\n        <div class=\"registroCampos\">\r\n            <label for=\"nombreT\" class=\"lblRegistro required\">Nombres:</label>\r\n            <input type=\"text\" class=\"form-control\" name=\"nombreT\" placeholder=\"Nombre(s)\" required>\r\n        </div>\r\n        <div class=\"registroCampos\">\r\n            <label for=\"apellidos\" class=\"lblRegistro required\">Apellidos</label>\r\n            <input type=\"text\" class=\"form-control\" name=\"apellidos\" placeholder=\"Apellido paterno y materno\" required>\r\n        </div>\r\n        <div class=\"registroCampos\">\r\n            <label for=\"noTrabajador\" class=\"lblRegistro required\">Numero de trabajador</label>\r\n            <input type=\"text\" class=\"form-control\" name=\"noTrabajador\" placeholder=\"Numero de trabajador\" required>\r\n        </div>\r\n        <div class=\"registroCampos\">\r\n            <label for=\"email\" class=\"lblRegistro required\">Correo institucional</label>\r\n            <input type=\"text\" class=\"form-control\" name=\"email\" placeholder=\"correo@uacam.mx\" required>\r\n        </div>\r\n        <div class=\"registroCampos\">\r\n            <label for=\"telef\" class=\"lblRegistro required\">Telefono</label>\r\n            <input type=\"text\" class=\"form-control\" name=\"telef\" placeholder=\"xxx-xxx-xxxx\" required>\r\n        </div>\r\n        <div class=\"selects_registro\" id=\"registroTecnico\">\r\n                <label for=\"idUsuario\" class=\"col-sm-2 col-form-label required\" id=\"lblTec\">Id de usuario en CIC Assistance:</label>\r\n                    <select name=\"IdUsuario\" id=\"tecnicoId\" class=\"form-select form-select-sm\" required>\r\n                        <% usuariosTecnicos.forEach(usuario => { %>\r\n                            <option value=\"<%= usuario.IdUsuario %>\"><%= usuario.IdUsuario %>-<%= usuario.Nombre %></option>\r\n                        <% }); %>\r\n                    </select>\r\n        </div>\r\n        <div id=\"enviarRegistro\">\r\n            <input type=\"submit\" value=\"Registrar\" class=\"btn btn-outline-dark\">\r\n        </div>\r\n    </form>\r\n    <!-- Button trigger modal -->\r\n    <button type=\"button\" class=\"btn btn-outline-dark\" data-toggle=\"modal\" data-target=\"#exampleModalLong2\">\r\n        Ver listado de técnicos registrados\r\n    </button>\r\n    <br>\r\n    <!-- Modal -->\r\n    <div class=\"modal fade\" id=\"exampleModalLong2\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle2\" aria-hidden=\"true\">\r\n        <div class=\"modal-dialog\" role=\"document\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"exampleModalLongTitle2\">Técnicos</h5>\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                Enlistado de todos los técnicos registrados en CIC Assistance\r\n                <div class=\"table-responsive\">\r\n                    <table class=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                              <th scope=\"col\">Id técnico</th>\r\n                              <th scope=\"col\">Nombre</th>\r\n                              <th scope=\"col\">Apellidos</th>\r\n                              <th scope=\"col\">Correo</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <% tecnicos.forEach(tecnico => { %>\r\n                            <tr>\r\n                              <td><%= tecnico.IdTecnico %></td>\r\n                              <td><%= tecnico.Nombre%></td>\r\n                              <td><%= tecnico.Apellidos %></td>\r\n                              <td><%= tecnico.Correo%></td>\r\n                            </tr>\r\n                            <% }); %>\r\n                          </tbody>\r\n                    </table>\r\n                  </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cerrar</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>  <!-- Obtenido de sweetAlert2  -->\r\n<!--Tenemos que llamar la estructura para usar el mensaje AlertSweet en EJS llamando los parametros establecidos en APPJS-->\r\n<% if(typeof alert != \"undefined\"){ %>\r\n<script>\r\n    Swal.fire({\r\n        title: '<%= alertTitle %>',\r\n        text: '<%= alertMessage %>',\r\n        icon: '<%= alertIcon %>',\r\n        showConfirmButton: <%= showConfirmButton %>,\r\n        timer: <%= timer %>\r\n    }).then(() =>{\r\n        window.location ='/<%= ruta %>'    //Hay que especificar la ruta con '/' que indica que nos redirige a la raiz, index\r\n    })\r\n</script>\r\n<% } %>\r\n</body>\r\n</div>\r\n\r\n\r\n<!-- Sección de estadisticas -->\r\n\r\n<div id=\"Estadisticas\" class=\"contenido-individual\">\r\n<!-- Contenido de historial -->\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link rel=\"stylesheet\" href=\"#\">\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n    <title>Reportes de uso</title>\r\n</head>\r\n    <body>\r\n    <div class=\"container\" style=\"max-width: 100%;\">\r\n        <h2 id=\"estadoSolicitudes\">Reportes de uso</h2>\r\n        <div class=\"container-xl px-4 mt-4\">\r\n            <div class=\"row\">\r\n                <div class=\"col\">\r\n                    <div class=\"card mb-4\">\r\n                        <div class=\"card-header\">Detalles del reporte</div> \r\n                        <div class=\"card-body\">\r\n                            <form method=\"post\" action=\"#\">\r\n                                <!-- Form Row-->\r\n                                <div class=\"row gx-3 mb-3\">\r\n                                    <div class=\"col md-6\">\r\n                                        <label class=\"small mb-1 is-required\" for=\"input_tipo\">\r\n                                            Tipo de solicitudes:\r\n                                        </label>\r\n                                        <select class=\"form-select form-select-mb mb-1\" id=\"input_tipo\" autocomplete=\"off\"\r\n                                                name=\"tipo\">\r\n                                                <option value=\"solicitudes\" selected>Solicitudes</option>\r\n                                                <option value=\"vales\">Vales</option>\r\n                                                <option value=\"dictamenes\">Dictámenes</option>\r\n                                        </select>\r\n                                    </div>\r\n                                <div class=\"row gx-3 mb-3 \">\r\n                                    <p class=\"text-justify mt-2 mb-0\">Seleccione el periodo de tiempo que desea incluir en el reporte</p>\r\n\r\n                                    <div class=\"col-md-6\">\r\n                                        <label class=\"small mb-1 is-required\" for=\"input_desde\">\r\n                                            Desde:\r\n                                        </label>\r\n                                        <input class=\"form-control\" id=\"input_desde\" type=\"date\" required\r\n                                               autocomplete=\"off\" name=\"desdeFecha\"\r\n                                               placeholder=\"Ingrese desde que fecha\"/>\r\n                                    </div>\r\n\r\n                                    <div class=\"col-md-6 \">\r\n                                        <label class=\"small mb-1 is-required\" for=\"input_hasta\">\r\n                                            Hasta:\r\n                                        </label>\r\n                                        <div class=\"input-group\">\r\n                                            <input type=\"date\" class=\"form-control\" name=\"hastaFecha\" required autocomplete=\"off\"\r\n                                                   placeholder=\"Ingrese hasta que fecha\" id=\"input_hasta\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div class=\"row gx-3 mb-3 \">\r\n                                    <p class=\"text-justify\">Introduzca los datos complementarios del reporte</p>\r\n                                    <div class=\"col-md-4\">\r\n                                        <label class=\"small mb-1 is-required\" for=\"input_titulo\">\r\n                                            Título:\r\n                                        </label>\r\n                                        <select class=\"form-select form-select-mb mb-1\" id=\"input_titulo\" autocomplete=\"off\"\r\n                                                name=\"titulo\">\r\n                                                <option value=\"Ing.\">Ing.</option>\r\n                                                <option value=\"Lic.\">Lic.</option>\r\n                                                <option value=\"Dr.\">Dr.</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div class=\"col-md-4\">\r\n                                        <label class=\"small mb-1 is-required\" for=\"input_nombre\">\r\n                                            Nombre:\r\n                                        </label>\r\n                                        <div class=\"input-group\">\r\n                                            <input type=\"text\" class=\"form-control\" name=\"nombre\" required autocomplete=\"off\"\r\n                                                   placeholder=\"Ingrese su nombre\" id=\"input_nombre\">\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"col-md-4\">\r\n                                        <label class=\"small mb-1 is-required\" for=\"input_oficio\">\r\n                                            Núm. de oficio:\r\n                                        </label>\r\n                                        <div class=\"input-group\">\r\n                                            <input type=\"text\" class=\"form-control\" name=\"oficio\" required autocomplete=\"off\"\r\n                                                   placeholder=\"P.E. 10/15\" id=\"input_oficio\">\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"col-md-4\">\r\n                                        <label class=\"small mb-1 is-required\" for=\"input_expediente\">\r\n                                            Expediente:\r\n                                        </label>\r\n                                        <div class=\"input-group\">\r\n                                            <input type=\"text\" class=\"form-control\" name=\"expediente\" required autocomplete=\"off\"\r\n                                                   placeholder=\"P.E. MR-15\" id=\"input_expediente\">\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"col-md-4\">\r\n                                        <label class=\"small mb-1 is-required\" for=\"input_area\">\r\n                                            Área:\r\n                                        </label>\r\n                                        <div class=\"input-group\">\r\n                                            <input type=\"text\" class=\"form-control\" name=\"area\" required autocomplete=\"off\"\r\n                                                   placeholder=\"P.E. 10/15\" id=\"input_area\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"d-flex justify-content-around\">\r\n                                    <button type=\"button\" id=\"generarReportesBtn\" class=\"btn text-light\" style=\"background-color: #0D1642;\">Generar reporte</button>\r\n                                    <button type=\"button\" id=\"generarEstadisticasBtn\" class=\"btn text-light\" style=\"background-color: #0D1642;\">Generar estadisticas</button>\r\n                                </div>\r\n                                </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </body>\r\n</div>\r\n<script src=\"resources/scripts/estadisticas.js\"></script>\r\n</main>\r\n\r\n<!-- HISTORIAL 2----------------------------------------------------------------------------------------------- -->\r\n<div id=\"Historial2\" class=\"contenido-individual\">\r\n    <!-- Contenido de historial -->\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link rel=\"stylesheet\" href=\"resources/css/solicitud_historial2.css\">\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n\r\n    <title>Historial</title>\r\n    <script>\r\n        document.addEventListener('DOMContentLoaded', function () {\r\n            // Obtener todas las celdas de la columna IdDictamen\r\n            var celdasIdDictamen = document.querySelectorAll('.historialTablaContenedor .table td:nth-child(6)');\r\n\r\n            // Iterar sobre cada celda\r\n            celdasIdDictamen.forEach(function (celda) {\r\n                // Verificar el contenido de la celda\r\n                if (celda.textContent.trim() === 'No existe') {\r\n                    // Obtener las celdas de las columnas \"Dicta-PDF\"\r\n                    var celdaDictaPDF = celda.parentElement.querySelector('td:nth-child(8)');\r\n\r\n                    // Cambiar el contenido por un espacio en blanco en ambas celdas\r\n                    celdaDictaPDF.textContent = ' ';\r\n                }\r\n            });\r\n        });\r\n    </script>\r\n</head>\r\n<body class=\"historialBody\">\r\n    <div class=\"historialContenedor\">\r\n        <h2 id=\"tituloBitacora\">Historial General</h2>\r\n        <div class=\"historialTablaContenedor\">\r\n            <div class=\"table-responsive\">\r\n                <table  class=\"table table-hover table-striped\" id=\"TablaHistorialVales\">\r\n                    <thead>\r\n                            <th>Folio</th>\r\n                            <th>Vale</th>\r\n                            <th>Usuario</th>\r\n                            <th>Equipo</th>\r\n                            <th>Estado</th>\r\n                            <th>Dictamen</th>\r\n                            <th>Vale-PDF</th>\r\n                            <th>Dicta-PDF</th>\r\n                            <th>Diagnóstico técnico</th>\r\n                            <th>Nivel de satisfacción</th>\r\n                    </thead>\r\n\r\n                    <% vales.forEach((variables) => { %>\r\n                        <tr>\r\n                            <td><%= variables.FolioSolicitud %></td>\r\n                            <td><%= variables.idVale %></td>\r\n                            <td><%= variables.NombreUsuario %></td>\r\n                            <td><%= variables.Equipo %></td>\r\n                            <td class=\"estado-td\" data-estado=\"<%= variables.Estado %>\"><%= variables.Estado %></td>\r\n                            <td><%= variables.IdDictamen %></td>\r\n                            <td><a href=\"/descargarPDFvale?folioSolicitud=<%= variables.FolioSolicitud %>\"><img src=\"resources/images/downloads.png\" alt=\"Descargar Vale\"></a></td>\r\n                            <td><a href=\"/descargarPDFdictamen?folioSolicitud=<%= variables.FolioSolicitud %>\"><img src=\"resources/images/downloads.png\" alt=\"Descargar Dictamen\"></a></td>\r\n                            <td>\r\n                                <% if (variables.Diagnostico) { %>\r\n                                    <a href=\"#\" class=\"btn btn-diagnostico\" data-toggle=\"modal\" data-target=\"#exampleModalLong3\" data-diagnostico=\"<%= variables.Diagnostico %>\" data-solucion=\"<%= variables.Solucion %>\" data-mensaje=\"<%= variables.Mensaje %>\">\r\n                                        <img src=\"resources/images/ver.png\" alt=\"Ojo\">\r\n                                    </a>\r\n                                <% } %>\r\n                            </td>\r\n                            <td class=\"estado-td\" data-estado=\"<%= variables.Encuesta %>\">\r\n                                <%= variables.Encuesta %>\r\n                            </td>\r\n                        </tr>\r\n                    <% }); %>\r\n                </table>\r\n            </div>\r\n            <!-- Modal -->\r\n            <div class=\"modal fade\" id=\"exampleModalLong3\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle3f\" aria-hidden=\"true\">\r\n                <div class=\"modal-dialog\" role=\"document\">\r\n                    <div class=\"modal-content\">\r\n                        <div class=\"modal-header\">\r\n                            <h5 class=\"modal-title\" id=\"exampleModalLongTitle3\">Diagnóstico técnico</h5>\r\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"modal-body\">\r\n                            <div class=\"table-responsive\">\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">Diagnóstico</th>\r\n                                            <th scope=\"col\">Solución aplicada</th>\r\n                                            <th scope=\"col\">Comentario</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody id=\"diagnosticosSoluciones\">\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"modal-footer\">\r\n                            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cerrar</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </div>\r\n    <script src=\"resources/scripts/semaforoVales.js\"></script>\r\n    <script src=\"resources/scripts/semaforoEncuesta.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            $('.btn-diagnostico').click(function() {\r\n                var diagnostico = $(this).data('diagnostico');\r\n                var solucion = $(this).data('solucion');\r\n                var mensaje = $(this).data('mensaje');\r\n\r\n                // Limpiar tabla\r\n                $('#diagnosticosSoluciones').empty();\r\n\r\n                // Agregar diagnóstico y solución a la tabla\r\n                var row = $('<tr>');\r\n                row.append('<td>' + diagnostico + '</td>');\r\n                row.append('<td>' + solucion + '</td>');\r\n                row.append('<td>' + mensaje + '</td>');\r\n                $('#diagnosticosSoluciones').append(row);\r\n            });\r\n        });\r\n    </script>\r\n</body>\r\n</div>\r\n\r\n<script src=\"resources/scripts/paneles.js\"></script>\r\n\r\n\r\n<!-- SCRIPTS PARA GENERAR LOS FILTROS FUNCIONALES ------------------------------------------------------------------------->\r\n<script src=\"resources/scripts/paneles.js\"></script>\r\n\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/js/bootstrap.bundle.min.js\"></script>\r\n<script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\r\n<script src=\"https://code.jquery.com/jquery-3.7.1.js\"></script>\r\n<script src=\"https://cdn.datatables.net/2.0.2/js/dataTables.js\"></script>\r\n<script src=\"https://cdn.datatables.net/2.0.2/js/dataTables.bootstrap5.js\"></script>\r\n\r\n<script>\r\n\r\n$(document).ready(function() {\r\n    // Inicializar las tablas DataTable\r\n    $('#TablaHistorialSolicitudes').DataTable({\r\n        language: {\r\n            info: 'Mostrando _PAGE_ de _PAGES_ paginas',\r\n            infoEmpty: 'No hay registros disponibles',\r\n            lengthMenu: '_MENU_ Entradas por página',\r\n            zeroRecords: 'No se encontraron registros - Lo siento',\r\n            search: \"Buscar:\"\r\n        }\r\n    });\r\n\r\n    $('#TablaHistorialVales').DataTable({\r\n        language: {\r\n            info: 'Mostrando _PAGE_ de _PAGES_ paginas',\r\n            infoEmpty: 'No hay registros disponibles',\r\n            lengthMenu: '_MENU_ Entradas por página',\r\n            zeroRecords: 'No se encontraron registros - Lo siento',\r\n            search: \"Buscar:\"\r\n        }\r\n    });\r\n\r\n    // Escuchar el evento draw.dt para cada tabla y recargar los estilos de Bootstrap\r\n    $('#TablaHistorialSolicitudes').on('draw.dt', function () {\r\n        $(this).closest('.dataTables_wrapper').find('button').removeClass('btn-secondary').addClass('btn-primary');\r\n    });\r\n\r\n    $('#TablaHistorialVales').on('draw.dt', function () {\r\n        $(this).closest('.dataTables_wrapper').find('button').removeClass('btn-secondary').addClass('btn-primary');\r\n    });\r\n});\r\n</script>\r\n<!--Script para mostrar el div logout-->\r\n<script>\r\n    const contenedorMostrarSesion = document.querySelector('.contenedorMostrarSesion');\r\n    const logoutMenu = document.querySelector('#logoutMenu');\r\n\r\n    contenedorMostrarSesion.addEventListener('click', function(event) {\r\n        logoutMenu.style.display = (logoutMenu.style.display === 'block') ? 'none' : 'block';\r\n        event.stopPropagation();\r\n    });\r\n\r\n    document.addEventListener('click', function(event) {\r\n        if (!logoutMenu.contains(event.target) && event.target !== logoutMenu) {\r\n            logoutMenu.style.display = 'none';\r\n        }\r\n    });\r\n\r\n</script>\r\n\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/panelAdmin.ejs b/views/panelAdmin.ejs
--- a/views/panelAdmin.ejs	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ b/views/panelAdmin.ejs	(date 1715805539683)
@@ -71,6 +71,7 @@
           <% const totalSemanal = cantidadSemanal[0].totalSolicitudes; %>
           <% const datos = conteo.map(contado => contado.total); %>
           <% const totalDictamenes = cantidadDictamenes[0].totalDictamenes; %>
+          <% const encuestasFiltradas = encuestasConteo.filter(encuesta => encuesta.Encuesta !== null && encuesta.Encuesta !== undefined); %>
             <div class="dashboardContenedor">
             <h2>Dashboard</h2>
             <div class="container-xxl flex-grow-1 container-p-y">
@@ -278,13 +279,29 @@
                 </div>
                 <!--/ Transactions -->
               </div>
+                <div class="col-12 col-lg-12 order-2 order-md-3 order-lg-2 mb-4">
+                  <div class="card h-100">
+                    <div class="card-header">
+                      <h5 class="card-title m-0 me-2">Encuestas de satisfacción</h5>
+                    </div>
+                    <div class="card-body px-0">
+                      <div class="tab-content p-0">
+                        <div class="tab-pane fade show active" id="navs-tabs-line-card-income" role="tabpanel">
+                          <canvas id="myChart3" width="30" height="30"></canvas>
+                        </div>
+                      </div>
+                    </div>
+                  </div>
+                </div>
             </div>
+            <br>
             </div>
             <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 
 <script>
   const ctx = document.getElementById('myChart');
   const ctx2 = document.getElementById('myChart2');
+  const ctx3 = document.getElementById('myChart3');
 
   const data = {
     labels: [<% conteo.forEach(conteo => { %> '<%= conteo.estado %>', <% }); %>],
@@ -354,6 +371,44 @@
       }
     }
   });
+
+  const data3 = {
+      labels: [<% encuestasConteo.forEach(encuesta => { %> '<%= encuesta.Encuesta %>', <% }); %>],
+      datasets: [{
+        label: 'Encuestas',
+        data: [<% encuestasConteo.forEach(encuesta => { %> '<%= encuesta.totalEncuestas %>', <% }); %>], // Aquí deberías agregar tus datos para la tercera gráfica
+        backgroundColor: [
+        'rgba(255, 99, 132, 0.8)',
+        'rgba(255, 206, 86, 0.8)',
+        'rgba(75, 192, 192, 0.8)',
+        'rgba(54, 162, 235, 0.8)',
+        'rgba(0, 204, 102, 0.8)'
+        ],
+        borderColor: [
+          'rgba(255, 99, 132, 1)',
+          'rgba(255, 206, 86, 1)',
+          'rgba(75, 192, 192, 1)',
+          'rgba(54, 162, 235, 1)',
+          'rgba(0, 204, 102, 1)'
+        ],
+        borderWidth: 1
+        }]
+        };
+
+    // Configura la instancia de la tercera gráfica
+    const myChart3 = new Chart(ctx3, {
+      type: 'bar',
+      data: data3,
+      options: {
+        maintainAspectRatio: false,
+        aspectRatio: 2,
+        scales: {
+          y: {
+            beginAtZero: true
+          }
+        }
+      }
+    });
 </script>
         </body>
     </div>
@@ -954,6 +1009,7 @@
                             <th>Hora</th>
                             <th>Usuario</th>
                             <th>Equipo</th>
+                            <th>Descripción del problema</th>
                             <th>Estado</th>
                             <th>Vale</th>
                             <th>Dictamen</th>
@@ -966,6 +1022,11 @@
                                 <td><%= solicitud.Hora %></td>
                                 <td><%= solicitud.NombreUsuario %></td>
                                 <td><%= solicitud.Equipo%></td>
+                                <td>
+                                    <a href="#" class="btn btn-descripcion" data-toggle="modal" data-target="#exampleModalLong5" data-descripcion="<%= solicitud.Descripcion %>">
+                                        <img src="resources/images/ver.png" alt="Ojo">
+                                    </a>
+                                </td>
                                 <td class="estado-celda" data-estado="<%= solicitud.Estado %>"><%= solicitud.Estado%></td>
                                 <td><%= solicitud.Vale %></td>
                                 <td><%= solicitud.Dictamen %></td>
@@ -973,10 +1034,55 @@
                         <% }); %>
                     </table>
                 </div>
+                <!-- Modal -->
+                <div class="modal fade" id="exampleModalLong5" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle5" aria-hidden="true">
+                    <div class="modal-dialog" role="document">
+                    <div class="modal-content">
+                        <div class="modal-header">
+                        <h5 class="modal-title" id="exampleModalLongTitle5">Problemas de los equipos</h5>
+                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
+                            <span aria-hidden="true">&times;</span>
+                        </button>
+                        </div>
+                        <div class="modal-body">
+                            Enlistado de las descripciones de los equipos de las solicitudes
+                            <div class="table-responsive">
+                                <table class="table">
+                                    <thead>
+                                        <tr>
+                                          <th scope="col">Descripción del problema</th>
+                                        </tr>
+                                      </thead>
+                                      <tbody id="descripcionesProblema">
+                                      </tbody>
+                                </table>
+                              </div>
+                        </div>
+                        <div class="modal-footer">
+                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
+                        </div>
+                    </div>
+                    </div>
+                </div>
         </div>
         <script src="resources/scripts/semaforo.js"></script>
-            <script src="resources/scripts/paneles.js"></script>
+        <script src="resources/scripts/paneles.js"></script>
+        <script>
+            $(document).ready(function() {
+                $('.btn-descripcion').click(function() {
+                    var descripcion = $(this).data('descripcion');
+
+                    // Limpiar tabla
+                    $('#descripcionesProblema').empty();
 
+                    // Agregar diagnóstico y solución a la tabla
+                    var row = $('<tr>');
+                    row.append('<td>' + descripcion + '</td>');
+
+                    $('#descripcionesProblema').append(row);
+                });
+            });
+        </script>
     </body>
 </div>
 
@@ -1344,7 +1450,7 @@
 <script src="resources/scripts/estadisticas.js"></script>
 </main>
 
-<!-- HISTORIAL 2----------------------------------------------------------------------------------------------- -->
+<!-- HISTORIAL GENERAL----------------------------------------------------------------------------------------------- -->
 <div id="Historial2" class="contenido-individual">
     <!-- Contenido de historial -->
 <head>
@@ -1410,7 +1516,7 @@
                                     </a>
                                 <% } %>
                             </td>
-                            <td class="estado-td" data-estado="<%= variables.Encuesta %>">
+                            <td class="estado-encuesta" data-estado="<%= variables.Encuesta %>">
                                 <%= variables.Encuesta %>
                             </td>
                         </tr>
Index: views/encuesta.ejs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Encuesta de satisfacción</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\">\n\n</head>\n<body>\n    <div class=\"text-center mt-5\">\n        <i class=\"bi bi-file-earmark-lock h1\"></i>\n    </div>\n    <div >\n        <div class=\"card w-50 mb-3 mt-5\" style=\"margin: auto;\">\n            <h5 class=\"card-header text-bg-dark \">Encuesta de satisfacción</h5>\n            <div class=\"card-body\">\n                <div id=\"contraseñaError\" style=\"width: 80%;\"></div>\n                <form method=\"POST\" action=\"/responder-encuesta\" >\n                    <input type=\"hidden\" name=\"token\" value=\"<%= token %>\">\n                    <input type=\"hidden\" name=\"folioSolicitud\" value=\"<%= folioSolicitud %>\">\n                    <div class=\"mb-3\">\n                        <label for=\"pregunta\" class=\"form-label\">¿Cómo calificaría la calidad de la atención recibida?</label>\n                        <select name=\"pregunta\">\n                          <option value=\"\" disabled selected>Seleccione una opción</option>\n                          <option value=\"Excelente\">Excelente</option>\n                          <option value=\"Buena\">Buena</option>\n                          <option value=\"Regular\">Regular</option>\n                          <option value=\"Mala\">Mala</option>\n                        </select>\n                    </div>\n\n                    <button type=\"submit\" class=\"btn btn-dark\">Enviar</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</body>\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/encuesta.ejs b/views/encuesta.ejs
--- a/views/encuesta.ejs	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ b/views/encuesta.ejs	(date 1715748244029)
@@ -10,7 +10,7 @@
 </head>
 <body>
     <div class="text-center mt-5">
-        <i class="bi bi-file-earmark-lock h1"></i>
+        <i class="bi bi-envelope-check h1"></i>
     </div>
     <div >
         <div class="card w-50 mb-3 mt-5" style="margin: auto;">
Index: app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//Invocamos express\r\nconst express = require('express');\r\nconst rateLimit = require('express-rate-limit');//Para proteger ataques ddos o limitar la cantidad de solicitudes\r\nconst app = express();\r\nconst path = require('path');\r\nconst ejs = require('ejs');\r\nconst fs = require('fs');\r\nconst puppeteer = require('puppeteer');\r\nconst {authPage,authSub} = require('./middleware');\r\nconst nodemailer = require('nodemailer');\r\nconst crypto = require('crypto');\r\nconst bodyParser = require('body-parser');\r\n\r\n//seteamos urlencoded para capturar los datos del formulario\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(express.json());\r\n\r\n//Invocar a dotenv\r\nconst dotenv = require('dotenv');\r\ndotenv.config({path: './env/.env'})\r\n\r\n//Setear el directorio public\r\napp.use('/resources', express.static('public'));\r\napp.use('/resources', express.static(__dirname + '/public'));\r\n\r\n///Establecer el motor de plantillas\r\napp.set('view engine', 'ejs');\r\n\r\n//6.- invocar a bcrypt\r\nconst bcryptjs = require('bcryptjs');\r\n\r\n//7.- Var de sesion\r\nconst session = require('express-session');\r\napp.use(session({\r\n    secret: 'secret',\r\n    resave: true,\r\n    saveUninitialized:true\r\n}));\r\n\r\n// //Invocar a rate-limit para proteger contra ataques de muchas solicitudes al mismo tiempo\r\n  const limiter = rateLimit({\r\n  windowMs: 15 * 60 * 1000, // 15 minutes\r\n  max: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)\r\n standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n });\r\n app.use(limiter);\r\n app.set('trust proxy', false);\r\n\r\n//8.- Invocar conexion a DB\r\nconst connection = require('./database/db');\r\nconst { assign } = require('nodemailer/lib/shared');\r\nconsole.log(__dirname);\r\n\r\n//FUNCION PARA ENVIAR NOTIFICACIONES POR EMAIL\r\n enviarMail = async(opcion,correoObjetivo)=>{\r\n    const config = {\r\n         host : 'smtp.gmail.com',\r\n         port : 587,\r\n        auth : {\r\n             user: process.env.SMTP_USER,\r\n             pass: process.env.SMTP_PASS\r\n         }\r\n     }\r\n\r\n     let textoCorreo;\r\n     let textAsunto;\r\n     let htmlCorreo;\r\n    if (opcion === 1) {\r\n         textAsunto = 'Solicitud de soporte creada'\r\n         textoCorreo = 'Ha realizado una solicitud de soporte técnico al sistema CIC Assistance, puede checar el estatus de su solicitud en su historial de solicitudes a traves de la misma página donde realizó la solicitud';\r\n         htmlCorreo = \"<div id='contenedor' style='margin:auto;background-color: #f0f0f0;;padding: 1em;text-align:center;'><div id='Titulo' style='background-color: #1E2943;border-bottom: 1px solid white;color:white;'><h1>Hemos recibido su solicitud de soporte</h1></div><p>Ha realizado una solicitud de soporte técnico al sistema CIC Assistance, puede checar el estatus de su solicitud en su historial de solicitudes a traves de la misma página donde realizó la solicitud</p><p>Cualquier duda o  inquitud puede ir al CIC o marcar al 9818119800 con extensión: 3030107<p><p>Pagina web: [cicassistance.josapino.dev]</p></div>\"\r\n        } else if (opcion === 2) {\r\n         textAsunto = 'Actualización estatus en solicitud'\r\n         textoCorreo = 'Ha cambiado el estatus de tu solicitud de soporte técnico, revisa tu portal cic assistance para obtener mas información';\r\n         htmlCorreo = '<div style=\"margin:auto;background-color: #f0f0f0;;padding: 1em;text-align:center;\"><div style=\"background-color: #1E2943;border-bottom: 1px solid white;color:white;\"><h1>Hemos actualizado el estado de su solicitud de soporte</h1></div><p>Ha cambiado el estatus de tu solicitud de soporte técnico, revisa tu portal cic assistance para obtener mas información</p><p>Cualquier duda o  inquitud puede ir al CIC o marcar al 9818119800 con extensión: 3030107<p><p>Pagina web: [cicassistance.josapino.dev]</p></div>'\r\n\r\n        } else if(opcion === 3){\r\n         textAsunto = 'Vale creado'\r\n         textoCorreo = 'Se ha creado el vale a su solicitud de soporte técnico puede descargarlo a traves del portal cic assistance en su navegador web';\r\n         htmlCorreo = '<div style=\"margin:auto;background-color: #f0f0f0;;padding: 1em;text-align:center;\"><div style=\"background-color: #1E2943;border-bottom: 1px solid white;color:white;\"><h1>Se ha creado un vale para su solicitud</h1></div><p>Se ha creado el vale a su solicitud de soporte técnico puede descargarlo a traves del portal cic assistance en su navegador web</p><p>Cualquier duda o  inquitud puede ir al CIC o marcar al 9818119800 con extensión: 3030107<p><p>Pagina web: [cicassistance.josapino.dev]</p></div>'\r\n\r\n        }else if(opcion === 4){\r\n         textAsunto = 'Dictamen sobre solicitud'\r\n         textoCorreo = 'Se ha determinado el dictamen a su solicitud de soporte técnico, puede revisar mas detalles del dictamen en su portal cic assistance y puede pasar por su equipo al Centro de Computo';\r\n         htmlCorreo = '<div style=\"margin:auto;background-color: #f0f0f0;;padding: 1em;text-align:center;\"><div style=\"background-color: #1E2943;border-bottom: 1px solid white;color:white;\"><h1>Hemos realizado un dictamen sobre su solicitud</h1></div><p>Se ha creado el dictamen a su solicitud de soporte técnico, puede revisar mas detalles del dictamen en su portal cic assistance y puede pasar por su equipo al Centro de Computo</p><p>Cualquier duda o  inquitud puede ir al CIC o marcar al 9818119800 con extensión: 3030107<p><p>Pagina web: [cicassistance.josapino.dev]</p></div>'\r\n\r\n        }else if(opcion === 5) {\r\n        textAsunto = 'Solicitud Asignada'\r\n        textoCorreo = 'Se le ha asignado una nueva solicitud de soporte técnico porfavor entre a su portal CIC Assistance para poder ver mas información';\r\n        htmlCorreo = '<div style=\"margin:auto;background-color: #f0f0f0;;padding: 1em;text-align:center;\"><div style=\"background-color: #1E2943;border-bottom: 1px solid white;color:white;\"><h1>Tiene una nueva solicitud asignada</h1></div><p>Se le ha asignado una nueva solicitud de soporte técnico porfavor entre a su portal CIC Assitance para poder ver mas información sobre la nueva asignación</p><p>Cualquier duda o  inquitud puede ir al CIC o marcar al 9818119800 con extensión: 3030107<p><p>Pagina web: [cicassistance.josapino.dev]</p></div>'\r\n\r\n        }else if(opcion === 6) {\r\n        textAsunto = 'Solicitud cerrada'\r\n        textoCorreo = 'Su solicitud ha sido cerrada porfavor entre a su portal CIC Assistance para poder responder la encuesta de satisfacción sobre el servicio proporcionado';\r\n        htmlCorreo = '<div style=\"margin:auto;background-color: #f0f0f0;;padding: 1em;text-align:center;\"><div style=\"background-color: #1E2943;border-bottom: 1px solid white;color:white;\"><h1>Su solicitud ha sido cerrada</h1></div><p>Su solicitud ha sido cerrada porfavor entre a su portal CIC Assistance para poder responder la encuesta de satisfacción sobre el servicio proporcionado</p><p>Cualquier duda o  inquitud puede ir al CIC o marcar al 9818119800 con extensión: 3030107<p><p>Pagina web: [cicassistance.josapino.dev]</p></div>'\r\n\r\n     }\r\n     const mensaje = {\r\n         from: '\"CIC Assistance \uD83E\uDD16\" <cic.assistance2024@gmail.com>',\r\n         to: correoObjetivo,\r\n         subject: textAsunto,\r\n         texto: textoCorreo,\r\n         html: htmlCorreo\r\n     }\r\n     const transport = nodemailer.createTransport(config);\r\n     const info = await transport.sendMail(mensaje);\r\n }\r\n\r\n//9.- Estableciendo las rutas\r\napp.get('/login', (req, res) => {\r\n    res.render('login');\r\n});\r\n\r\napp.get('/acercaDe', (req, res) => {\r\n    res.render('acerca_de');\r\n});\r\n\r\napp.get('/registerP',authPage('Admin'), (req, res) => {\r\n    res.render('register');\r\n});\r\napp.get('/registerT',authPage('Admin'), (req, res) => {\r\n    res.render('registerT');\r\n});\r\napp.get('/generarDictamen',authPage('Admin'), (req, res) => {\r\n    res.render('generarDictamen');\r\n});\r\napp.get('/alerta', (req, res) => {\r\n    res.render('alerta');\r\n});\r\n// Ruta GET para renderizar la vista de estadísticas ESTADISTICAS\r\napp.get('/estadisticas', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        const folios = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n        const conteoEstados = await query(`SELECT Estado AS estado, COUNT(*) AS total FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}' GROUP BY Estado`);\r\n\r\n        const usuariosPorSoli = await query(`SELECT u.Nombre AS NombreUsuario, COUNT(a.FolioSolicitud) AS NumeroSolicitudes\r\n                                                FROM usuarios u\r\n                                                JOIN solicitudes s ON u.IdUsuario = s.IdUsuario\r\n                                                JOIN ${tipo} a ON s.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY u.NombreUsuario`);\r\n        const asignacionesTecnicos = await query(`SELECT t.Nombre AS Tecnico, COUNT(a.IdSolicitud) AS NumeroSolicitudesTecnico\r\n                                                FROM tecnicos t\r\n                                                JOIN asignaciones a ON t.IdTecnico = a.IdTecnico \r\n                                                JOIN solicitudes s ON s.FolioSolicitud = a.IdSolicitud WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY t.Nombre`);\r\n        const solucionesDictamen = await query(`SELECT d.DictamenFinal AS DictamenFinal, COUNT(a.FolioSolicitud) AS NumeroSolicitudesDictamen\r\n                                                FROM dictamenes d\r\n                                                JOIN ${tipo} a ON d.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE d.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY d.DictamenFinal`);\r\n        const solicitudesSinDictamen = await query(`SELECT COUNT(s.FolioSolicitud) AS NumSolicitudesCerradasSinDictamen\r\n                                                        FROM solicitudes s\r\n                                                        LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud\r\n                                                        JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud\r\n                                                        WHERE s.Estado = 'Cerrado' AND d.FolioSolicitud IS NULL \r\n                                                        AND s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n        const solicitudesConDictamen = await query(`SELECT COUNT(s.FolioSolicitud) AS NumSolicitudesCerradasConDictamenYVales\r\n                                                    FROM solicitudes s\r\n                                                    JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud\r\n                                                    JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud\r\n                                                    WHERE s.Estado = 'Cerrado'\r\n                                                    AND s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen, solicitudesSinDictamen:solicitudesSinDictamen, solicitudesConDictamen:solicitudesConDictamen});\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\napp.get('/reportes', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`)\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('reportes', { tipo, desdeFecha, hastaFecha, objetos: queryParaReportes, titulo, nombre, oficio, exp, area });\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\n//Panel de técnicos\r\napp.get('/panelTecnicos', authPage([\"Tecnico\", \"Admin\"]), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,\r\n            ruta: 'login'\r\n        });\r\n    }\r\n\r\n    try {\r\n        const usuario = req.session.idUsuario;\r\n        const asignaciones = await query(`SELECT DISTINCT s.FolioSolicitud,s.Fecha,s.Descripcion, v.Equipo,v.NoSerieEquipo,v.MarcaEquipo,v.ModeloEquipo, u.IdUsuario as IdUsuarioTecnico, us.IdUsuario as IdUsuarioSolicitante, us.Nombre as NombreSolicitante, COALESCE(a.Encuesta, 'No disponible') AS Encuesta FROM solicitudes s JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud JOIN tecnicos t ON a.IdTecnico = t.IdTecnico JOIN usuarios u ON t.IdUsuario = u.IdUsuario JOIN usuarios us ON s.IdUsuario = us.IdUsuario WHERE u.IdUsuario = ${usuario}`);\r\n        \r\n        res.render('panelTecnicos', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            asignaciones: asignaciones // Pasando las asignaciones como variable local\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error al obtener las asignaciones:\", error);\r\n        res.status(500).send('Error interno del servidor');\r\n    }\r\n});\r\n\r\n// Panel de usuarios\r\napp.get('/panelUsuario',authPage([\"Usuario\",\"Admin\",\"Tecnico\"]), async (req, res) => {\r\n\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const usuario = req.session.idUsuario;\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const historialUsuario = `\r\n    SELECT s.FolioSolicitud AS FolioSolicitud, s.Fecha AS Fecha, s.Equipo AS Equipo, s.Estado AS Estado, CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Vale, CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen, COALESCE(a.Encuesta, 'No disponible') AS Encuesta FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud WHERE s.IdUsuario = ${usuario} ORDER BY FolioSolicitud DESC;\r\n    `;\r\n    const historial = await query(historialUsuario);\r\n    res.render('panelUsuario', {\r\n        edificios: edificios,\r\n        login: req.session.loggedin,\r\n        name: req.session.name,\r\n        historial: historial,\r\n    });\r\n});\r\n\r\n\r\n//Panel de administradores\r\napp.get('/panelAdmin',authPage('Admin'), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const fechaHaceUnaSemana = obtenerFechaHaceUnaSemana();\r\n \r\n    const conteoEstados = await query(`SELECT Estado AS estado, COUNT(*) AS total FROM solicitudes GROUP BY Estado`);\r\n    const tecnicos = await query('SELECT * FROM tecnicos');\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const folios = await query('SELECT solicitudes.FolioSolicitud, solicitudes.IdUsuario, usuarios.Correo FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE NOT EXISTS ( SELECT 1 FROM vales WHERE vales.FolioSolicitud = solicitudes.FolioSolicitud )');\r\n    const usuarios = await query('SELECT * from usuarios');\r\n    const usuariosTecnicos = await query('SELECT * FROM usuarios WHERE rol = \"Tecnico\" AND NOT EXISTS ( SELECT 1 FROM tecnicos WHERE tecnicos.IdUsuario = usuarios.IdUsuario )');\r\n    const historialSoli = await query(`SELECT s.FolioSolicitud AS FolioSolicitud,s.Fecha AS Fecha,s.Hora AS Hora,u.Nombre AS NombreUsuario,s.Equipo AS Equipo,s.Estado AS Estado,CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' WHEN d.FolioSolicitud IS NOT NULL THEN 'No disponible' ELSE 'No Disponible' END AS Vale,CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario ORDER BY FolioSolicitud DESC; `);\r\n    const soloAbiertas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Abierto\"')\r\n    const soliPendiente = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Proceso\"')\r\n    const soliCerradas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Cerrado\"')\r\n    const resultadoConsulta = await query('SELECT COUNT(*) AS totalSolicitudes FROM solicitudes WHERE Estado = \"Asignada\"');    \r\n    const resultadoSolicitudes = await query('SELECT COUNT(*) AS totalSolicitudes FROM solicitudes'); \r\n    const resultadoSemanal = await query(`SELECT COUNT(*) AS totalSolicitudes FROM solicitudes WHERE Fecha > '${fechaHaceUnaSemana}'`);\r\n    const resultadoVales = await query('SELECT COUNT(*) AS totalSolicitudes FROM vales');       \r\n    const soliEspera = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Espera\"')\r\n    const soliAsignada = await query('SELECT solicitudes.*,u.Correo, u.Nombre as UsuarioNombre, tecnicos.Nombre, tecnicos.IdTecnico FROM solicitudes LEFT JOIN usuarios u ON solicitudes.IdUsuario = u.IdUsuario LEFT JOIN asignaciones ON solicitudes.IdAsignacion = asignaciones.IdAsignacion LEFT JOIN tecnicos ON asignaciones.IdTecnico = tecnicos.IdTecnico LEFT JOIN usuarios ON tecnicos.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Asignada\"')\r\n    const inforVales = await query(\"SELECT v.*, COALESCE(d.idDictamen, 'No existe') AS IdDictamen, u.Nombre AS NombreUsuario, COALESCE(a.Diagnostico, 'No disponible') AS Diagnostico, COALESCE(a.Solucion, 'No disponible') AS Solucion, COALESCE(a.Encuesta, 'No disponible') AS Encuesta, COALESCE(a.Mensaje, 'No disponible') AS Mensaje FROM vales v LEFT JOIN dictamenes d ON v.idVale = d.idVale LEFT JOIN solicitudes s ON v.folioSolicitud = s.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario LEFT JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud ORDER BY v.idVale DESC;\");\r\n    const resultadoDictamenes = await query('SELECT COUNT(*)  AS totalDictamenes FROM dictamenes;')\r\n    const asignacionesTecnicos = await query('SELECT t.IdTecnico,t.Nombre AS NombreTecnico,t.Correo AS CorreoTecnico,COUNT(a.IdAsignacion) AS CantidadAsignaciones FROM tecnicos t INNER JOIN asignaciones a ON t.IdTecnico = a.IdTecnico GROUP BY t.IdTecnico, t.Nombre;')\r\n\r\n    res.render('panelAdmin', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            folioSolicitudes: folios,\r\n            usuarios: usuarios,\r\n            historial: historialSoli,\r\n            edificios: edificios,\r\n            abierto: soloAbiertas,\r\n            pendiente:  soliPendiente,\r\n            asignada: soliAsignada,\r\n            espera: soliEspera,\r\n            cerrado: soliCerradas,\r\n            vales:inforVales,\r\n            tecnicos: tecnicos,\r\n            usuariosTecnicos: usuariosTecnicos,\r\n            cantidadAsignadas : resultadoConsulta,\r\n            cantidadSolicitudes : resultadoSolicitudes,\r\n            cantidadVales :  resultadoVales,\r\n            cantidadSemanal: resultadoSemanal,\r\n            conteo: conteoEstados,\r\n            cantidadDictamenes: resultadoDictamenes,\r\n            asignaTecnico:  asignacionesTecnicos\r\n\r\n        });\r\n});\r\nfunction query(sql) {\r\n    return new Promise((resolve, reject) => {\r\n        connection.query(sql, (error, result) => {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction obtenerFechaHaceUnaSemana() {\r\n    const fechaActual = new Date(obtenerFechaActual());\r\n    const fechaHaceUnaSemana = new Date(fechaActual);\r\n    fechaHaceUnaSemana.setDate(fechaActual.getDate() - 6);\r\n\r\n    const añoSemanaPasada = fechaHaceUnaSemana.getFullYear();\r\n    const mesSemanaPasada = String(fechaHaceUnaSemana.getMonth() + 1).padStart(2, '0');\r\n    const diaSemanaPasada = String(fechaHaceUnaSemana.getDate()).padStart(2, '0');\r\n    const fechaFormateadaSemanaPasada = `${añoSemanaPasada}-${mesSemanaPasada}-${diaSemanaPasada}`;\r\n\r\n    return fechaFormateadaSemanaPasada;\r\n}\r\n\r\n\r\n// BUSQUEDA DE FOLIO PARA RELLENO AUTOMATICO DE INFO EN DICTAMENES\r\napp.get('/obtener-informacion-folio/:folioSolicitud',authPage('Admin'), (req, res) => {\r\n    const folioSolicitud = req.params.folioSolicitud;\r\n    req.session.folioSolicitudDictamen = folioSolicitud;\r\n    const query = 'SELECT v.idVale, v.Equipo, v.NoSerieEquipo, v.MarcaEquipo, v.ModeloEquipo, u.Correo FROM vales v JOIN solicitudes s ON v.FolioSolicitud = s.FolioSolicitud JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE v.FolioSolicitud = ?';\r\n\r\n    connection.query(query, [folioSolicitud], (error, results) => {\r\n        if (error) {\r\n            console.error(error);\r\n            res.status(500).json({ error: 'Error al obtener la información del folio' });\r\n        } else {\r\n            if (results.length > 0) {\r\n                // Si se encontraron resultados, devuelve la información como JSON al cliente\r\n                req.session.correoDictamen = results[0].Correo;\r\n                req.session.idValeDictamen = results[0].idVale;\r\n                res.json(results[0]); // Suponiendo que solo necesitas el primer resultado\r\n            } else {\r\n                // Si no se encontraron resultados, puedes devolver un objeto vacío o un mensaje\r\n                res.json({ message: 'No se encontró información para el folio proporcionado' });\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n\r\n//------------------CAMBIAR EL LINK AL SUBIR AL SERVIDOR--------------------------------\r\n//-----------------------------------------------------------------------------------------------------\r\napp.post('/forgot-password', async (req, res) => {\r\n    const  email  = req.body.email;\r\n    const emailVerified = await query(`SELECT * FROM usuarios WHERE Correo =  '${email}'`);\r\n    // Check if the email exists in your user database\r\n     if (emailVerified.length > 0) {  \r\n        const idUsuario = emailVerified[0].IdUsuario;\r\n       // Generate a reset token\r\n       const token = crypto.randomBytes(20).toString('hex');\r\n       const tokenExpira = new Date(); // Obtiene la fecha y hora actual\r\n        tokenExpira.setHours(tokenExpira.getHours() + 1); // Suma una hora a la fecha y hora actual\r\n        const fechaHoraExpiracion = `${tokenExpira.getFullYear()}-${String(tokenExpira.getMonth() + 1).padStart(2, '0')}-${String(tokenExpira.getDate()).padStart(2, '0')} ${String(tokenExpira.getHours()).padStart(2, '0')}:${String(tokenExpira.getMinutes()).padStart(2, '0')}:${String(tokenExpira.getSeconds()).padStart(2, '0')}`;\r\n\r\n       // Store the token with the user's email in a database or in-memory store\r\n       await query(`INSERT INTO reset_password (IdUsuario, Token, FechaExpiracion) VALUES (${idUsuario},\"${token}\",\"${fechaHoraExpiracion}\")`);\r\n       // Send the reset token to the user's email\r\n       const transporter = nodemailer.createTransport({\r\n         service: 'gmail',\r\n         auth: {\r\n           user: process.env.SMTP_USER,\r\n           pass: process.env.SMTP_PASS\r\n         },\r\n       });\r\n       const mailOptions = {\r\n         from: '\"CIC Assistance \uD83E\uDD16\" <cic.assistance2024@gmail.com>',\r\n         to: email,\r\n         subject: 'Crear nueva contraseña',\r\n         text: `Haz click en el siguiente enlace para poder crear una nueva contraseña: http://localhost:3000/reset-password/${token}`,\r\n       };\r\n       transporter.sendMail(mailOptions, (error, info) => {\r\n         if (error) {\r\n           console.log(error);\r\n           res.status(500).send('Error enviando el email');\r\n         } else {\r\n           res.status(200).send('Te enviamos las instrucciones a tu correo para cambiar la contraseña de tu cuenta');\r\n         }\r\n       });\r\n     } else {\r\n       res.status(404).send('Email no encontrado');\r\n     }\r\n    });\r\n\r\n\r\napp.get('/cambiarContraseña', (req, res) => {\r\n    res.render('cambiarContraseña');\r\n});\r\n\r\n\r\n//HACER QUE EL FORM HABRA EN UN ARCHIVO EJS PARA PASAR PARAMS\r\n// Route to handle the reset token\r\napp.get('/reset-password/:token', async (req, res) => {\r\n    const { token } = req.params;\r\n    // Check if the token exists and is still valid\r\n    const validarToken = await query(`SELECT * FROM reset_password WHERE Token = \"${token}\" AND FechaExpiracion > NOW()`)\r\n    if (validarToken.length > 0) {\r\n      // Render a form for the user to enter a new password\r\n      res.render('cambiarContraseña', { token: token });\r\n    } else {\r\n      res.status(404).send('Invalid or expired token');\r\n    }\r\n  }); \r\n\r\n  app.post('/reset-password', async (req, res) => {\r\n    const { token, password } = req.body;\r\n    let hashPass = await bcryptjs.hash(password, 8);\r\n    // Find the user with the given token and update their password\r\n    const usuario = await query(`SELECT IdUsuario FROM reset_password WHERE Token = \"${token}\"`);\r\n    if (usuario.length > 0) {\r\n      const actualizarPass = await query(`UPDATE usuarios SET Contrasena = \"${hashPass}\" WHERE IdUsuario = ${usuario[0].IdUsuario}`);\r\n      if(actualizarPass.affectedRows > 0){\r\n        await query(`DELETE FROM reset_password WHERE Token =  \"${token}\"`);\r\n        // Remove the reset token after the password is updated\r\n        res.send(`\r\n        <!DOCTYPE html>\r\n        <html lang=\"es\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta http-equiv=\"refresh\" content=\"5;url=/\">\r\n            <title>Contraseña Actualizada</title>\r\n            <style>\r\n                body {\r\n                    font-family: 'Roboto', sans-serif;\r\n                    background-color: #f0f0f0;\r\n                }\r\n                div {\r\n                    margin: 50px auto;\r\n                    width: 80%;\r\n                    text-align: center;\r\n                    background-color: #fff;\r\n                    padding: 20px;\r\n                    border-radius: 10px;\r\n                    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n                }\r\n                h1 {\r\n                    color: #333;\r\n                }\r\n                h2 {\r\n                    color: #555;\r\n                }\r\n                p {\r\n                    color: #777;\r\n                }\r\n            </style>\r\n        </head>\r\n        <body>\r\n            <div>\r\n                <h1>Contraseña Actualizada con Éxito</h1>\r\n                <p>Serás redirigido a la pantalla de inicio en 5 segundos...</p>\r\n            </div>\r\n            \r\n        </body>\r\n    </html>\r\n    `);\r\n      }\r\n    } else {\r\n      res.status(404).send('Token invalido o expirado');\r\n    }\r\n  });\r\n\r\n  // Encuesta de satisfacción\r\napp.post('/encuesta-satisfaccion', async (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const emailQuery = `SELECT u.Correo \r\n                        FROM usuarios u\r\n                        JOIN solicitudes s ON u.IdUsuario = s.IdUsuario\r\n                        JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud\r\n                        WHERE a.IdSolicitud = \"${folioSolicitud}\"`;\r\n\r\n    try {\r\n        const emailResult = await query(emailQuery);\r\n\r\n        if (emailResult.length > 0) {\r\n            const email = emailResult[0].Correo;\r\n            const emailVerified = await query(`SELECT * FROM usuarios WHERE Correo = '${email}'`);\r\n\r\n            if (emailVerified.length > 0) {\r\n                const idUsuario = emailVerified[0].IdUsuario;\r\n\r\n                // Genera el token de restablecimiento\r\n                const token = crypto.randomBytes(20).toString('hex');\r\n                const tokenExpira = new Date();\r\n                tokenExpira.setHours(tokenExpira.getHours() + 1);\r\n                const fechaHoraExpiracion = `${tokenExpira.getFullYear()}-${String(tokenExpira.getMonth() + 1).padStart(2, '0')}-${String(tokenExpira.getDate()).padStart(2, '0')} ${String(tokenExpira.getHours()).padStart(2, '0')}:${String(tokenExpira.getMinutes()).padStart(2, '0')}:${String(tokenExpira.getSeconds()).padStart(2, '0')}`;\r\n\r\n                // Almacena el token con el correo electrónico del usuario en una base de datos o en un almacenamiento en memoria\r\n                await query(`INSERT INTO encuesta_satisfaccion (IdUsuario, Token, FechaExpiracion) VALUES (\"${idUsuario}\",\"${token}\",\"${fechaHoraExpiracion}\")`);\r\n\r\n                // Envía el token de restablecimiento al correo electrónico del usuario\r\n                const transporter = nodemailer.createTransport({\r\n                    service: 'gmail',\r\n                    auth: {\r\n                        user: process.env.SMTP_USER,\r\n                        pass: process.env.SMTP_PASS\r\n                    },\r\n                });\r\n\r\n                const mailOptions = {\r\n                    from: '\"CIC Assistance \uD83E\uDD16\" <cic.assistance2024@gmail.com>',\r\n                    to: email,\r\n                    subject: 'Responde nuestra encuesta de satisfacción',\r\n                    text: `Haz click en el siguiente enlace para poder responder la encuesta de satisfacción: http://localhost:3000/responder-encuesta/${token}/${folioSolicitud}`,\r\n                };\r\n\r\n                transporter.sendMail(mailOptions, (error, info) => {\r\n                    if (error) {\r\n                        console.log(error);\r\n                        res.status(500).send('Error enviando el correo electrónico');\r\n                    } else {\r\n                        res.status(200).send('Te enviamos las instrucciones a tu correo para responder la encuesta de satisfacción');\r\n                    }\r\n                });\r\n            } else {\r\n                res.status(404).send('Email no encontrado');\r\n            }\r\n        } else {\r\n            res.status(404).send('Solicitud no encontrada');\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Error en el servidor');\r\n    }\r\n});\r\n\r\n\r\napp.get('/encuesta', (req, res) => {\r\n    res.render('encuesta');\r\n});\r\n\r\napp.get('/responder-encuesta/:token/:folioSolicitud', async (req, res) => {\r\n    const { token, folioSolicitud } = req.params;\r\n    // Check if the token exists and is still valid\r\n    const validarToken = await query(`SELECT * FROM encuesta_satisfaccion WHERE Token = \"${token}\" AND FechaExpiracion > NOW()`)\r\n    if (validarToken.length > 0) {\r\n        // Render a form for the user to enter a new password\r\n        res.render('encuesta', { token: token, folioSolicitud:folioSolicitud });\r\n    } else {\r\n        res.status(404).send('Invalid or expired token');\r\n    }\r\n});\r\n\r\napp.post('/responder-encuesta', async (req, res) => {\r\n    const { token, pregunta, folioSolicitud } = req.body;\r\n    console.log(\"Folio:\",folioSolicitud);\r\n    console.log(\"Respuesta:\",pregunta);\r\n    // Find the user with the given token and update their password\r\n    const usuario = await query(`SELECT IdUsuario FROM encuesta_satisfaccion WHERE Token = \"${token}\"`);\r\n    console.log(\"Resultado del query 'usuario':\", usuario);\r\n    if (usuario.length > 0) {\r\n        const idUsuario = usuario[0].IdUsuario;\r\n        const actualizarEncuesta = await query(`UPDATE asignaciones SET Encuesta = \"${pregunta}\" WHERE IdSolicitud = \"${folioSolicitud}\"`);\r\n        console.log(\"Resutado del update}:\",actualizarEncuesta);\r\n        if (actualizarEncuesta.affectedRows > 0) {\r\n            await query(`DELETE FROM encuesta_satisfaccion WHERE Token =  \"${token}\"`);\r\n            // Remove the reset token after the password is updated\r\n            res.send(`\r\n        <!DOCTYPE html>\r\n            <html lang=\"es\">\r\n            <head>\r\n                <meta charset=\"UTF-8\">\r\n                <meta http-equiv=\"refresh\" content=\"5;url=/\">\r\n                <title>Respuesta enviada</title>\r\n                <style>\r\n                    body {\r\n                        font-family: 'Roboto', sans-serif;\r\n                        background-color: #f0f0f0;\r\n                    }\r\n                    div {\r\n                        margin: 50px auto;\r\n                        width: 80%;\r\n                        text-align: center;\r\n                        background-color: #fff;\r\n                        padding: 20px;\r\n                        border-radius: 10px;\r\n                        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n                    }\r\n                    h1 {\r\n                        color: #333;\r\n                    }\r\n                    h2 {\r\n                        color: #555;\r\n                    }\r\n                    p {\r\n                        color: #777;\r\n                    }\r\n                </style>\r\n            </head>\r\n            <body>\r\n                <div>\r\n                    <h1>¡La respuesta fue enviada con éxito!</h1>\r\n                    <h2>Gracias por haber contestado la encuesta, se tomará en cuenta para mejorar nuestros servicios</h2>\r\n                    <p>Serás redirigido a la pantalla de inicio en 5 segundos...</p>\r\n                </div>\r\n            </body>\r\n            </html>\r\n    `);\r\n        } else {\r\n            res.status(500).send('Error al actualizar la encuesta');\r\n        }\r\n    } else {\r\n        res.status(404).send('Token inválido o expirado');\r\n    }\r\n});\r\n\r\n\r\n\r\n//estadisticas\r\napp.post('/generarEstadisticas', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha };\r\n    res.redirect('/estadisticas');\r\n});\r\n\r\n//reportes\r\napp.post('/generarReportes', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area };\r\n    res.redirect('/reportes');\r\n});\r\n\r\n// Define la ruta de la plantilla\r\nconst plantillaPath = path.join(__dirname, 'views', 'plantillaReportes.ejs');\r\n\r\n// Ruta para generar el PDF\r\napp.post('/generarPDF', async (req, res, next) => {\r\n    try {\r\n        // Obtén los datos de la sesión\r\n        const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas;\r\n\r\n        // Realizar la consulta SQL para obtener los datos de la base de datos\r\n        const fecha = desdeFecha;\r\n        const fechaFinal = hastaFecha;\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n\r\n        // Renderiza la plantilla con los datos de la sesión y los datos de la base de datos\r\n        const htmlContent = await ejs.renderFile(plantillaPath, {\r\n            tipo,\r\n            desdeFecha,\r\n            hastaFecha,\r\n            titulo,\r\n            nombre,\r\n            oficio,\r\n            exp,\r\n            area,\r\n            objetos: queryParaReportes\r\n        });\r\n\r\n        // Crea una instancia de Puppeteer\r\n        const browser = await puppeteer.launch();\r\n        const page = await browser.newPage();\r\n\r\n        // Establece el tamaño de la página y carga el contenido HTML\r\n        await page.setViewport({ width: 1200, height: 800 });\r\n        await page.setContent(htmlContent);\r\n\r\n        // Genera el PDF\r\n        const pdf = await page.pdf({ format: 'A4', landscape: true });\r\n\r\n        // Cierra el navegador de Puppeteer\r\n        await browser.close();\r\n\r\n        // Envía el PDF como respuesta\r\n        res.contentType('application/pdf');\r\n        res.send(pdf);\r\n    } catch (error) {\r\n        // Maneja cualquier error que ocurra\r\n        console.error('Error al generar el PDF:', error);\r\n        res.status(500).send('Error al generar el PDF');\r\n    }\r\n});\r\n\r\n//10 Hacer registro\r\napp.post('/registerP',authPage('Admin'),async(req, res) => {\r\n    const user = req.body.username;\r\n    const name = req.body.name;\r\n    const pass = req.body.password;\r\n    const rol = req.body.rol;\r\n    const genero = req.body.genero;\r\n    const correo  = req.body.correo;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    \r\n    connection.query('INSERT INTO usuarios SET ?', { NombreUsuario: user, Nombre: name, Contrasena: passwordHaash, Rol: rol, Genero: genero, Correo: correo }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            if (error.code === 'ER_DUP_ENTRY') {\r\n                res.render('alerta', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"¡Debe elegir otro nombre de usuario!\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: false,\r\n                    timer: 1500,\r\n                    ruta: 'panelAdmin'\r\n                });\r\n            }\r\n        } else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n})\r\n\r\napp.post('/registerT',authPage('Admin'),async(req, res) => { ///SEPARAR EN OTRA PESTAÑA\r\n    const nombre = req.body.nombreT;\r\n    const apellidos = req.body.apellidos;\r\n    const numeroT = req.body.noTrabajador;\r\n    const email = req.body.email;\r\n    const telefono = req.body.telef;\r\n    const IdUsuario  = req.body.IdUsuario;\r\n    const fecha = obtenerFechaActual();  \r\n    connection.query('INSERT INTO tecnicos SET ?', { Nombre: nombre, Apellidos: apellidos, NoTrabajador: numeroT, Correo: email, Telefono: telefono, IdUsuario: IdUsuario,FechaRegistro: fecha }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n        }\r\n             else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n    \r\n})\r\n\r\nfunction obtenerFechaActual() {\r\n    const fecha = new Date();\r\n    const año = fecha.getFullYear();\r\n    const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n    const dia = String(fecha.getDate()).padStart(2, '0');\r\n    return `${año}-${mes}-${dia}`;\r\n}\r\n\r\n//10 Hacer solicitud de soporte\r\napp.post('/solicitud', async(req, res) => {\r\n    const usuario = req.session.idUsuario; //\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:usuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion,IdAsignacion:0}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,req.session.correoUser);\r\n            const idSolicitud = results.insertId;\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${req.session.idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelUsuario'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\napp.post('/solicitudAdmin',authPage('Admin'), async(req, res) => {\r\n    const usuario = req.body.usuarios;\r\n    const [idUsuario, correoUsuario] = usuario.split('|');\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:idUsuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion,IdAsignacion:0}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,correoUsuario);\r\n            const idSolicitud = results.insertId;\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//11 Autenticacion\r\napp.post('/auth', async (req,res)=> {\r\n    const user = req.body.username;\r\n    const pass = req.body.password;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    if(user && pass){\r\n        connection.query('SELECT * FROM usuarios WHERE NombreUsuario = ?', [user], async (error, results)=>{\r\n            if(results.length == 0 || !(await bcryptjs.compare(pass, results[0].Contrasena))){ \r\n                //si es igual a 0 o no coincide la contraseña, en la comparacion de bcrypt se debe poner el nombre de la variable y despues [0]. el nombre del campo contraseña en la db\r\n                res.render('login', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"Usuario y/o contrseña incorrectas\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: true,\r\n                    timer: false,\r\n                    ruta :'login'\r\n                });\r\n            }else{\r\n                req.session.loggedin = true;\r\n                req.session.correoUser = results[0].Correo;\r\n                req.session.idUsuario = results[0].IdUsuario;\r\n                req.session.name = results[0].Nombre;\r\n                req.session.rol = results[0].Rol;\r\n                if (results[0].Rol === 'Admin') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelAdmin'  // Redirigir a la página de panelAdmin\r\n                    });\r\n                } else if (results[0].Rol === 'Tecnico') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelTecnicos'  // Redirigir a la página de panelTecnico\r\n                    });\r\n                } else {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelUsuario'  // Redirigir a la página de solicitud\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }else{\r\n        res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"¡Porfavor ingrese un usuario y/o contraseña!\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 1500,\r\n            ruta :'login'\r\n        });\r\n    }\r\n});\r\n\r\n//VALES\r\napp.post('/vales', async(req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioS = req.body.folios;\r\n    const [folioSolicitud, correoUsuarioFolio] = folioS.split('|');\r\n    let equipo = req.body.listaEquiposCheck || '';\r\n    const otroInput = req.body.otroInput2 || '';  \r\n    const noSerie = req.body.serie;\r\n    const marca = req.body.marca;\r\n    const modelo = req.body.modelo;\r\n    const estado = req.body.estatus;\r\n    const caracteris = req.body.caracteristicas;\r\n    const [idTecnico, correoTecnico] = req.body.tecnico.split('|');\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    \r\n    const fechaHoraActual = new Date().toLocaleString();\r\n    const folioSeleccionado = folioSolicitud;\r\n    const templatePath = path.join(__dirname, 'views', 'generarVale.ejs');\r\n    \r\n    // Renderizar la plantilla HTML\r\n    const htmlContent = await ejs.renderFile(templatePath, {\r\n        folio: folioSeleccionado,\r\n        equipos: req.body.equipos,\r\n        serie: req.body.serie,\r\n        marca: req.body.marca,\r\n        modelo: req.body.modelo,\r\n        caracteristicas: req.body.caracteristicas,\r\n        estatus: req.body.estatus,\r\n        revision: req.body.revision,\r\n        fechaHoraActual: fechaHoraActual\r\n    });\r\n\r\n    // Crear una instancia de Puppeteer y generar el PDF\r\n    const browser = await puppeteer.launch();\r\n    const page = await browser.newPage();\r\n    const pdfPath = path.join(__dirname, 'docs', `ValeST24-${folioSeleccionado}.pdf`);\r\n\r\n    await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n    await page.pdf({ path: pdfPath, format: 'A4' });\r\n    await browser.close();\r\n\r\n    // Enviar respuesta al cliente\r\n\r\n    res.render('alerta', {\r\n        alert: true,\r\n        alertTitle: 'Éxito',\r\n        alertMessage: 'PDF generado y guardado correctamente',\r\n        alertIcon: 'success',\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n        ruta: 'panelAdmin'\r\n    });   \r\n\r\n    // Actualizar el estado de la solicitud en la base de datos\r\n    const cambioEstado = \"Asignada\";\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ? ', [cambioEstado, folioSolicitud], async(error, results)=> {\r\n        if (error) {\r\n            console.log(error);\r\n        } else {\r\n            // Insertar registros en la base de datos\r\n            connection.query('INSERT INTO asignaciones SET ?', { IdSolicitud: folioSolicitud, IdTecnico: idTecnico,DIagnostico:\"\", Solucion:\"\", Encuesta:\"\", Mensaje:\"\" }, async(error, results)=> {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    const IdAsignacion = results.insertId;\r\n                    await query(`UPDATE solicitudes SET IdAsignacion = ${IdAsignacion} WHERE FolioSolicitud = ${folioSolicitud}`);\r\n                    connection.query('INSERT INTO vales SET ?', {FolioSolicitud:folioSolicitud,Fecha:fecha,Equipo:equipo, NoSerieEquipo:noSerie, MarcaEquipo:marca, ModeloEquipo:modelo,Caracteristicas: caracteris ,Estado: estado,NombreUsuario:usuario}, async(error, results)=> {\r\n                        if (error) {\r\n                            console.log(error);\r\n                        } else {\r\n                            enviarMail(3,correoUsuarioFolio);\r\n                            enviarMail(5,correoTecnico);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n});\r\n\r\n// Función para obtener la fecha y hora actual en formato MySQL\r\nfunction obtenerFechaHoraActual() {\r\n    const fecha = new Date();\r\n    const año = fecha.getFullYear();\r\n    const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n    const dia = String(fecha.getDate()).padStart(2, '0');\r\n\r\n    return `${año}-${mes}-${dia}`;\r\n}\r\n\r\n// DICTAMENES\r\napp.post('/guardar-datos-y-generar-pdf', async (req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioSolicitudDictamen = req.session.folioSolicitudDictamen;\r\n    const vale = req.body.valeId;\r\n    (folioSolicitudDictamen);\r\n    const equipoDictamen = req.body.equipoDictamen;\r\n    const marcaEquipo = req.body.marcaEquipo;\r\n    const modeloEquipo = req.body.modeloEquipo;\r\n    const noSerieEquipo = req.body.noSerieEquipo;\r\n    const estado = req.body.estado;\r\n    const tipoDictamen = req.body.tipoDictamen;\r\n    const caracDictamen = req.body.caracDictamen;\r\n    const observacionesDictamen = req.body.observacionesDictamen;\r\n    const descripcionDictamen = req.body.descripcionDictamen;\r\n    const dirigidoA = req.body.dirigidoA;\r\n    connection.query('INSERT INTO dictamenes SET ?', {\r\n        Encargado: usuario,\r\n        Fecha: fecha,\r\n        FolioSolicitud: folioSolicitudDictamen,\r\n        idVale: vale,\r\n        Equipo: equipoDictamen,\r\n        MarcaEquipo: marcaEquipo,\r\n        ModeloEquipo: modeloEquipo,\r\n        NoSerieEquipo: noSerieEquipo,\r\n        Estado: estado,\r\n        DictamenFinal: tipoDictamen,\r\n        caracDictamen: caracDictamen,\r\n        Observaciones: observacionesDictamen,\r\n        Descripcion: descripcionDictamen\r\n    }, async (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.status(500).send('Error al guardar los datos en la base de datos');\r\n        } else {\r\n            const idDictamen = results.insertId;\r\n\r\n            // Crear una instancia de Puppeteer\r\n            const browser = await puppeteer.launch();\r\n            const page = await browser.newPage();\r\n\r\n            // Ruta de la plantilla HTML\r\n            const templatePath = path.join(__dirname, 'views', 'generarDictamen.ejs');\r\n            console.log('Fecha a renderizar en la plantilla:', fecha);\r\n            const htmlContent = await ejs.renderFile(templatePath, {\r\n                dictamenes: [{\r\n                    idDictamen,\r\n                    FolioSolicitud: folioSolicitudDictamen,\r\n                    Fecha: fecha,\r\n                    Equipo: equipoDictamen,\r\n                    MarcaEquipo: marcaEquipo,\r\n                    ModeloEquipo: modeloEquipo,\r\n                    NoSerieEquipo: noSerieEquipo,\r\n                    Estado: estado,\r\n                    DictamenFinal: tipoDictamen,\r\n                    caracDictamen: caracDictamen,\r\n                    Observaciones: observacionesDictamen,\r\n                    Descripcion: descripcionDictamen,\r\n                    dirigidoA: dirigidoA\r\n                }],\r\n                fecha: fecha\r\n\r\n\r\n            });\r\n\r\n            await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n\r\n            // Ruta y nombre del archivo PDF\r\n            const pdfFileName = `DT24-${folioSolicitudDictamen}.pdf`;\r\n            const pdfFilePath = path.join(__dirname, './docs/', pdfFileName);\r\n\r\n            // Configurar la orientación a horizontal\r\n            const options = {\r\n                format: 'A4',\r\n                landscape: true \r\n            };\r\n\r\n\r\n            // Generar el PDF\r\n            await page.pdf({ path: pdfFilePath, ...options });\r\n\r\n            // Cerrar el navegador Puppeteer\r\n            await browser.close();\r\n\r\n            console.log('Archivo PDF generado y guardado correctamente');\r\n            console.log(req.session.correoDictamen)\r\n            enviarMail(4,req.session.correoDictamen);\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: 'Éxito',\r\n                alertMessage: 'PDF generado y guardado correctamente',\r\n                alertIcon: 'success',\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n\r\n    function obtenerFechaHoraActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n});\r\n\r\n//ACTUALIZAR ESTADO DE LAS SOLICITUDES\r\napp.post('/actualizar-estado', async (req, res) => {\r\n    const { folio, nuevoEstado } = req.body;\r\n    const fecha = obtenerFechaActual().toString();\r\n    const hora = obtenerHoraActual().toString();\r\n\r\n    // Consulta para actualizar el estado en la tabla solicitudes\r\n    const cambiarEstado = 'UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?';\r\n    // Consulta para insertar el cambio en el log, solo si hay un cambio en el estado\r\n    const logQuery = 'INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (?, ?, ?, ?, ?)';\r\n    // Consulta para obtener el estado original antes de la actualización\r\n    const obtenerEstadoOriginal = 'SELECT s.Estado, s.IdUsuario, u.Correo FROM solicitudes s INNER JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE s.FolioSolicitud = ?';\r\n\r\n    connection.query(obtenerEstadoOriginal, [folio], async (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el estado original:', error);\r\n            res.status(500).json({ error: 'Error al obtener el estado original' });\r\n        } else {\r\n            const usuarioEmail = results[0].Correo;\r\n            const estadoOriginal = results[0].Estado;\r\n            // Ejecuta la consulta para cambiar el estado\r\n            connection.query(cambiarEstado, [nuevoEstado, folio], (updateError, updateResults) => {\r\n                if (updateError) {\r\n                    console.error('Error al actualizar la base de datos:', updateError);\r\n                    res.status(500).json({ error: 'Error al actualizar el estado en la base de datos' });\r\n                } else {\r\n                    console.log('Estado actualizado en la base de datos:', updateResults);\r\n                    // Inserta en el log solo si hay un cambio en el estado\r\n                    if (estadoOriginal !== nuevoEstado) {\r\n                        connection.query(logQuery, [req.session.idUsuario, folio, nuevoEstado, fecha, hora], (logError, logResults) => {\r\n                            if (nuevoEstado === 'Cerrado') {\r\n                                enviarMail(6, usuarioEmail);\r\n                                console.log('Correo enviado al usuario:', usuarioEmail);\r\n                            }\r\n                            else if (logError) {\r\n                                console.error('Error al insertar en el log:', logError);\r\n                            } else {\r\n                                enviarMail(2,usuarioEmail);\r\n                                console.log('Cambio registrado en el log:', logResults);\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    res.json({ success: true, mensaje: 'Estado actualizado exitosamente' });\r\n                }\r\n            });\r\n        }\r\n    });\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//DESCARGAR PDF DESDE EL HISTORIAL\r\n//DESCARGAR VALE\r\napp.get('/descargarPDFvale', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `ValeST24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Vale no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//DESCARGAR DICTAMEN\r\napp.get('/descargarPDFdictamen', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `DT24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Dictamen no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//Actualizar el estado de las asignaciones\r\napp.post('/actualizarEstadoSolicitud', async (req, res) => {\r\n    const folioSolicitud = req.body.folioSolicitud;\r\n    const nuevoEstado = req.body.nuevoEstado;\r\n\r\n    // Actualiza el estado de la solicitud en la base de datos\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?', [nuevoEstado, folioSolicitud], (error, results) => {\r\n\r\n        if (error) {\r\n            console.error('Error al actualizar el estado de la solicitud:', error);\r\n            res.status(500).send('Error interno del servidor');\r\n        } else {\r\n            // Si se actualizó correctamente, muestra un mensaje de éxito con SweetAlert2\r\n            res.status(200).send('Estado actualizado correctamente');\r\n        }\r\n    });\r\n});\r\n\r\n//Creación de comentario del técnico\r\napp.post('/crearComentario', async (req, res) => {\r\n    const folioSeleccionado = req.body.folios;\r\n    const comentario = req.body.comentarioT;\r\n\r\n    try {\r\n        // Consulta para obtener el IdTecnico de la tabla asignaciones\r\n        const [tecnicoRows] = await connection.promise().query('SELECT IdTecnico FROM asignaciones WHERE IdSolicitud = ?', [folioSeleccionado]);\r\n        const idTecnico = tecnicoRows[0].IdTecnico;\r\n\r\n        // Inserción del comentario en la tabla asignaciones\r\n        await connection.promise().query('UPDATE asignaciones SET Mensaje = ? WHERE IdSolicitud = ?', [comentario, folioSeleccionado]);\r\n\r\n        // Consulta para obtener las asignaciones actualizadas\r\n        const [asignacionesRows] = await connection.promise().query('SELECT * FROM asignaciones WHERE IdTecnico = ?', [idTecnico]);\r\n\r\n        // Renderizar la página con éxito\r\n        res.render('panelTecnicos', {\r\n            alert: {\r\n                alertTitle: 'Éxito',\r\n                alertMessage: 'Comentario enviado correctamente',\r\n                alertIcon: 'success',\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelTecnicos' // Redirige a la misma página\r\n            },\r\n            asignaciones: asignacionesRows // Pasar las asignaciones al archivo EJS\r\n        });\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        // Mostrar un mensaje de error utilizando SweetAlert2\r\n        res.render('panelTecnicos', {\r\n            alert: {\r\n                alertTitle: 'Error',\r\n                alertMessage: 'Error interno del servidor',\r\n                alertIcon: 'error',\r\n                showConfirmButton: true,\r\n                timer: null,\r\n                ruta: 'panelTecnicos' // Redirige a la misma página\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n// Creación de diagnósticos técnicos y soluciones aplicadas\r\napp.post('/crearDiagnostico', async (req, res) => {\r\n    const folioSeleccionado = req.body.folios; // Obtener el folio seleccionado del cuerpo de la solicitud\r\n    const diagnosticoT = req.body.diagnosticoT;\r\n    const solucion = req.body.solucion;\r\n\r\n    // Consulta para obtener el IdTecnico de la tabla asignaciones\r\n    connection.query('SELECT IdTecnico FROM asignaciones WHERE IdSolicitud = ?', [folioSeleccionado], (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el IdTecnico:', error);\r\n            // Mostrar un mensaje de error utilizando SweetAlert2\r\n            res.render('panelTecnicos', {\r\n                alert: {\r\n                    alertTitle: 'Error',\r\n                    alertMessage: 'Error interno del servidor',\r\n                    alertIcon: 'error',\r\n                    showConfirmButton: true,\r\n                    timer: null,\r\n                    ruta: 'panelTecnicos' // Redirige a la misma página\r\n                }\r\n            });\r\n        } else {\r\n            const idTecnico = results[0].IdTecnico; // Se obtiene el IdTecnico de los resultados de la consulta\r\n\r\n            // Inserción del diagnóstico y solución en la tabla asignaciones\r\n            connection.query('UPDATE asignaciones SET Diagnostico = ?, Solucion = ? WHERE IdSolicitud = ?',\r\n                [diagnosticoT, solucion, folioSeleccionado], (error, results) => {\r\n                    if (error) {\r\n                        console.error('Error al actualizar la tabla de asignaciones:', error);\r\n                        // Mostrar un mensaje de error utilizando SweetAlert2\r\n                        res.render('panelTecnicos', {\r\n                            alert: {\r\n                                alertTitle: 'Error',\r\n                                alertMessage: 'Error al actualizar la tabla de asignaciones',\r\n                                alertIcon: 'error',\r\n                                showConfirmButton: false,\r\n                                timer: 1500,\r\n                                ruta: 'panelTecnicos' // Redirige a la misma página\r\n                            }\r\n                        });\r\n                    } else {\r\n                        console.log('Diagnóstico y solución actualizados correctamente');\r\n\r\n                        // Consulta para obtener las asignaciones actualizadas\r\n                        connection.query('SELECT * FROM asignaciones WHERE IdTecnico = ?', [idTecnico], (error, asignaciones) => {\r\n                            if (error) {\r\n                                console.error('Error al obtener las asignaciones:', error);\r\n                                // Mostrar un mensaje de error utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Error',\r\n                                        alertMessage: 'Error al obtener las asignaciones',\r\n                                        alertIcon: 'error',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                console.log('Asignaciones obtenidas correctamente');\r\n                                // Mostrar un mensaje de éxito utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Éxito',\r\n                                        alertMessage: 'Diagnóstico y solución actualizados correctamente',\r\n                                        alertIcon: 'success',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    },\r\n                                    asignaciones: asignaciones // Pasar las asignaciones al archivo EJS\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    });\r\n\r\n});\r\n\r\n//12 Auth page\r\napp.get('/',(req, res)=>{\r\n\r\n    if(req.session.loggedin){\r\n        res.render('login',{\r\n            login: true,\r\n            name: req.session.name\r\n        });\r\n    }else{\r\n        res.render('login',{\r\n            login: false,\r\n            name: 'Debe iniciar sesión'\r\n        })\r\n    }\r\n})\r\n\r\n//13 Logout\r\napp.get('/logout', (req, res)=>{\r\n    req.session.destroy(()=>{\r\n        res.redirect('/login'); //Redirige al index\r\n    });\r\n})\r\n\r\n//Hacemos que funcione el servidor local en el puerto\r\napp.listen(3000, (req, res)=> {\r\n    console.log('SERVER RUNNING IN http://localhost:3000');\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.js b/app.js
--- a/app.js	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ b/app.js	(date 1715806930737)
@@ -208,8 +208,10 @@
 
     try {
         const usuario = req.session.idUsuario;
-        const asignaciones = await query(`SELECT DISTINCT s.FolioSolicitud,s.Fecha,s.Descripcion, v.Equipo,v.NoSerieEquipo,v.MarcaEquipo,v.ModeloEquipo, u.IdUsuario as IdUsuarioTecnico, us.IdUsuario as IdUsuarioSolicitante, us.Nombre as NombreSolicitante, COALESCE(a.Encuesta, 'No disponible') AS Encuesta FROM solicitudes s JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud JOIN tecnicos t ON a.IdTecnico = t.IdTecnico JOIN usuarios u ON t.IdUsuario = u.IdUsuario JOIN usuarios us ON s.IdUsuario = us.IdUsuario WHERE u.IdUsuario = ${usuario}`);
-        
+        const asignaciones = await query(`SELECT DISTINCT s.FolioSolicitud,s.Fecha,s.Descripcion AS Descripcion, v.Equipo,v.NoSerieEquipo,v.MarcaEquipo,v.ModeloEquipo, u.IdUsuario as IdUsuarioTecnico, us.IdUsuario as IdUsuarioSolicitante, us.Nombre as NombreSolicitante, COALESCE(a.Encuesta, 'No disponible') AS Encuesta FROM solicitudes s JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud JOIN tecnicos t ON a.IdTecnico = t.IdTecnico JOIN usuarios u ON t.IdUsuario = u.IdUsuario JOIN usuarios us ON s.IdUsuario = us.IdUsuario WHERE u.IdUsuario = ${usuario}`);
+
+
+
         res.render('panelTecnicos', {
             login: req.session.loggedin,
             name: req.session.name,
@@ -273,11 +275,11 @@
     const folios = await query('SELECT solicitudes.FolioSolicitud, solicitudes.IdUsuario, usuarios.Correo FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE NOT EXISTS ( SELECT 1 FROM vales WHERE vales.FolioSolicitud = solicitudes.FolioSolicitud )');
     const usuarios = await query('SELECT * from usuarios');
     const usuariosTecnicos = await query('SELECT * FROM usuarios WHERE rol = "Tecnico" AND NOT EXISTS ( SELECT 1 FROM tecnicos WHERE tecnicos.IdUsuario = usuarios.IdUsuario )');
-    const historialSoli = await query(`SELECT s.FolioSolicitud AS FolioSolicitud,s.Fecha AS Fecha,s.Hora AS Hora,u.Nombre AS NombreUsuario,s.Equipo AS Equipo,s.Estado AS Estado,CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' WHEN d.FolioSolicitud IS NOT NULL THEN 'No disponible' ELSE 'No Disponible' END AS Vale,CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario ORDER BY FolioSolicitud DESC; `);
+    const historialSoli = await query(`SELECT s.FolioSolicitud AS FolioSolicitud,s.Fecha AS Fecha,s.Hora AS Hora,u.Nombre AS NombreUsuario,s.Equipo AS Equipo,s.Estado AS Estado,s.Descripcion AS Descripcion,CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' WHEN d.FolioSolicitud IS NOT NULL THEN 'No disponible' ELSE 'No Disponible' END AS Vale,CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario ORDER BY FolioSolicitud DESC; `);
     const soloAbiertas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = "Abierto"')
     const soliPendiente = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = "Proceso"')
     const soliCerradas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  "Cerrado"')
-    const resultadoConsulta = await query('SELECT COUNT(*) AS totalSolicitudes FROM solicitudes WHERE Estado = "Asignada"');    
+    const resultadoConsulta = await query('SELECT COUNT(*) AS totalSolicitudes FROM solicitudes WHERE Estado = "Asignada"');
     const resultadoSolicitudes = await query('SELECT COUNT(*) AS totalSolicitudes FROM solicitudes'); 
     const resultadoSemanal = await query(`SELECT COUNT(*) AS totalSolicitudes FROM solicitudes WHERE Fecha > '${fechaHaceUnaSemana}'`);
     const resultadoVales = await query('SELECT COUNT(*) AS totalSolicitudes FROM vales');       
@@ -287,6 +289,8 @@
     const resultadoDictamenes = await query('SELECT COUNT(*)  AS totalDictamenes FROM dictamenes;')
     const asignacionesTecnicos = await query('SELECT t.IdTecnico,t.Nombre AS NombreTecnico,t.Correo AS CorreoTecnico,COUNT(a.IdAsignacion) AS CantidadAsignaciones FROM tecnicos t INNER JOIN asignaciones a ON t.IdTecnico = a.IdTecnico GROUP BY t.IdTecnico, t.Nombre;')
 
+    const encuestasConteo = await query("SELECT COALESCE(Encuesta, 'Sin responder') AS Encuesta, COUNT(*) AS totalEncuestas FROM asignaciones WHERE Encuesta IN ('Excelente', 'Regular', 'Buena', 'Mala') GROUP BY Encuesta");
+
     res.render('panelAdmin', {
             login: req.session.loggedin,
             name: req.session.name,
@@ -308,7 +312,8 @@
             cantidadSemanal: resultadoSemanal,
             conteo: conteoEstados,
             cantidadDictamenes: resultadoDictamenes,
-            asignaTecnico:  asignacionesTecnicos
+            asignaTecnico:  asignacionesTecnicos,
+            encuestasConteo: encuestasConteo
 
         });
 });
@@ -390,6 +395,7 @@
          from: '"CIC Assistance 🤖" <cic.assistance2024@gmail.com>',
          to: email,
          subject: 'Crear nueva contraseña',
+           // text: `Haz click en el siguiente enlace para poder crear una nueva contraseña: http://cicassistance.josapino.dev/reset-password/${token}`,
          text: `Haz click en el siguiente enlace para poder crear una nueva contraseña: http://localhost:3000/reset-password/${token}`,
        };
        transporter.sendMail(mailOptions, (error, info) => {
@@ -523,6 +529,7 @@
                     from: '"CIC Assistance 🤖" <cic.assistance2024@gmail.com>',
                     to: email,
                     subject: 'Responde nuestra encuesta de satisfacción',
+                    // text: `Haz click en el siguiente enlace para poder responder la encuesta de satisfacción: http://cicassistance.josapino.dev/responder-encuesta/${token}/${folioSolicitud}`,
                     text: `Haz click en el siguiente enlace para poder responder la encuesta de satisfacción: http://localhost:3000/responder-encuesta/${token}/${folioSolicitud}`,
                 };
 
@@ -531,7 +538,15 @@
                         console.log(error);
                         res.status(500).send('Error enviando el correo electrónico');
                     } else {
-                        res.status(200).send('Te enviamos las instrucciones a tu correo para responder la encuesta de satisfacción');
+                        res.render('alerta', {
+                            alert: true,
+                            alertTitle: 'Éxito',
+                            alertMessage: 'Te enviamos las instrucciones a tu correo para responder la encuesta de satisfacción',
+                            alertIcon: 'success',
+                            showConfirmButton: false,
+                            timer: 2000,
+                            ruta: 'login'
+                        });
                     }
                 });
             } else {
@@ -565,15 +580,14 @@
 
 app.post('/responder-encuesta', async (req, res) => {
     const { token, pregunta, folioSolicitud } = req.body;
-    console.log("Folio:",folioSolicitud);
-    console.log("Respuesta:",pregunta);
+
     // Find the user with the given token and update their password
     const usuario = await query(`SELECT IdUsuario FROM encuesta_satisfaccion WHERE Token = "${token}"`);
-    console.log("Resultado del query 'usuario':", usuario);
+
     if (usuario.length > 0) {
         const idUsuario = usuario[0].IdUsuario;
         const actualizarEncuesta = await query(`UPDATE asignaciones SET Encuesta = "${pregunta}" WHERE IdSolicitud = "${folioSolicitud}"`);
-        console.log("Resutado del update}:",actualizarEncuesta);
+
         if (actualizarEncuesta.affectedRows > 0) {
             await query(`DELETE FROM encuesta_satisfaccion WHERE Token =  "${token}"`);
             // Remove the reset token after the password is updated
Index: .idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00_[Changes]/shelved.patch	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ /dev/null	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
@@ -1,189 +0,0 @@
-Index: views/estadisticas.ejs
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Estadísticas</title>\n    <link rel=\"stylesheet\" href=\"resources/css/estadisticas.css\">\n</head>\n<body>\n    <div class=\"logo-contenedor\">\n                <img src=\"resources/images/uac_logo.png\" alt=\"Logo Izquierdo\" class=\"logo-izquierdo\">\n                <h1 class=\"titulo-sitio\">CIC Assistance</h1>\n                <img src=\"resources/images/facu_logo.png\" alt=\"Logo Derecho\" class=\"logo-derecho\">\n            </div>\n    <div class=\"estadisticasContenedor\">\n\n        <br>\n        <h2>Estadísticas</h2>\n        <div>\n            <div>\n                <p class=\"labelMayor\">El tipo de solicitud es: </p><p><%= tipo %></p>\n            </div>\n            <div class=\"fechas\">\n                <p class=\"labelMayor\">Las fechas seleccionadas son</p>\n                <p class=\"labelMayor\">desde: </p><p><%= desdeFecha %></p>\n                <p class=\"labelMayor\">hasta: </p><p><%= hastaFecha %></p>\n            </div>\n\n                <% const datos = objetos.map(objeto => objeto.FolioSolicitud); %>\n                <% const datos2 = conteo.map(contado => contado.total); %>\n                <% const datosUsuarios = usuariosPorSoli.map(numSoli => numSoli.NumeroSolicitudes); %>\n                <% const asigTecnicos = asignacionesTecnicos.map(asignacion => asignacion.NumeroSolicitudesTecnico); %>\n                <% const dictamenSolucion = solucionesDictamen.map(solucion => solucion.NumeroSolicitudesDictamen); %>\n\n\n            <!-- Agrega aquí cualquier otra información estadística que desees mostrar -->\n        </div>\n        <div>\n            <canvas id=\"myChart\" width=\"200\" height=\"200\"></canvas>\n        </div>\n\n        <div>\n                <canvas id=\"myChart2\" width=\"200\" height=\"200\"></canvas>\n        </div>\n\n        <div>\n                <canvas id=\"myChart3\" width=\"200\" height=\"200\"></canvas>\n        </div>\n\n        <div>\n                <canvas id=\"myChart4\" width=\"200\" height=\"200\"></canvas>\n        </div>\n    </div>\n      \n      <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n      \n      <script>\n          document.addEventListener('DOMContentLoaded', function () {\n              // Obtén el contexto del lienzo donde se dibujará la gráfica\n              const ctx = document.getElementById('myChart').getContext('2d');\n\n              // Configura los datos de la gráfica utilizando los datos procesados\n              const data = {\n                  labels: [<% usuariosPorSoli.forEach(usuariosPorSoli => { %> '<%= usuariosPorSoli.NombreUsuario %>', <% }); %>], // Puedes cambiar las etiquetas según tus necesidades\n                  datasets: [{\n                      label: 'Total de <%= tipo %>', // Etiqueta de los datos\n                      data: [<%= datosUsuarios.join(',') %>], // Utiliza los datos procesados aquí\n                      backgroundColor: [\n                          'rgba(255, 99, 132, 0.2)',\n                          'rgba(54, 162, 235, 0.2)',\n                          'rgba(255, 206, 86, 0.2)',\n                          'rgba(75, 192, 192, 0.2)',\n                          'rgba(153, 102, 255, 0.2)'\n                      ],\n                      borderColor: [\n                          'rgba(255, 99, 132, 1)',\n                          'rgba(54, 162, 235, 1)',\n                          'rgba(255, 206, 86, 1)',\n                          'rgba(75, 192, 192, 1)',\n                          'rgba(153, 102, 255, 1)'\n                      ],\n                      borderWidth: 1\n                  }]\n              };\n\n              // Configura la instancia de la gráfica\n              const myChart = new Chart(ctx, {\n                  type: 'pie', // Tipo de gráfico\n                  data: data, // Configuración de los datos de la gráfica\n                  options: {\n                      maintainAspectRatio: false, // Desactiva el mantenimiento del aspecto\n                      aspectRatio: 2,\n                      scales: {\n                          y: {\n                              beginAtZero: true\n                          }\n                      }\n                  }\n              });\n              // Obtén el contexto del lienzo donde se dibujará la segunda gráfica\n              const ctx2 = document.getElementById('myChart2').getContext('2d');\n\n              // Configura los datos de la segunda gráfica\n              const data2 = {\n                  labels: [<% conteo.forEach(conteo => { %> '<%= conteo.estado %>', <% }); %>],\n                  datasets: [{\n                      label: 'Total',\n                      data: [<%= datos2 %>], // Aquí deberías agregar tus datos para la segunda gráfica\n                      backgroundColor: [\n                          'rgba(255, 99, 132, 0.2)',\n                          'rgba(54, 162, 235, 0.2)',\n                          'rgba(255, 206, 86, 0.2)',\n                          'rgba(75, 192, 192, 0.2)',\n                          'rgba(153, 102, 255, 0.2)'\n                      ],\n                      borderColor: [\n                          'rgba(255, 99, 132, 1)',\n                          'rgba(54, 162, 235, 1)',\n                          'rgba(255, 206, 86, 1)',\n                          'rgba(75, 192, 192, 1)',\n                          'rgba(153, 102, 255, 1)'\n                      ],\n                      borderWidth: 1\n                  }]\n              };\n\n              // Configura la instancia de la segunda gráfica\n              const myChart2 = new Chart(ctx2, {\n                  type: 'bar',\n                  data: data2,\n                  options: {\n                      maintainAspectRatio: false,\n                      aspectRatio: 2,\n                      scales: {\n                          y: {\n                              beginAtZero: true\n                          }\n                      }\n                  }\n              });\n            // Obtén el contexto del lienzo donde se dibujará la tercera gráfica\n            const ctx3 = document.getElementById('myChart3').getContext('2d');\n\n            // Configura los datos de la tercera gráfica\n            const data3 = {\n                labels: [<% asignacionesTecnicos.forEach(asignacionesTecnicos => { %> '<%= asignacionesTecnicos.Tecnico %>', <% }); %>],\n                datasets: [{\n                    label: 'Total',\n                    data: [<%= asigTecnicos.join(',') %>], // Aquí deberías agregar tus datos para la segunda gráfica\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            };\n\n            // Configura la instancia de la segunda gráfica\n            const myChart3 = new Chart(ctx3, {\n                type: 'doughnut',\n                data: data3,\n                options: {\n                    maintainAspectRatio: false,\n                    aspectRatio: 2,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n            // Obtén el contexto del lienzo donde se dibujará la tercera gráfica\n            const ctx4 = document.getElementById('myChart4').getContext('2d');\n\n            // Configura los datos de la tercera gráfica\n            const data4 = {\n                labels: [<% solucionesDictamen.forEach(solucionesDictamen => { %> '<%= solucionesDictamen.DictamenFinal %>', <% }); %>],\n                datasets: [{\n                    label: 'Total',\n                    data: [<%= dictamenSolucion.join(',') %>], // Aquí deberías agregar tus datos para la segunda gráfica\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            };\n\n            // Configura la instancia de la segunda gráfica\n            const myChart4 = new Chart(ctx4, {\n                type: 'bar',\n                data: data4,\n                options: {\n                    maintainAspectRatio: false,\n                    aspectRatio: 2,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n          });\n      </script>\n</body>\n</html>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/views/estadisticas.ejs b/views/estadisticas.ejs
---- a/views/estadisticas.ejs	(revision 929ec40a983fdc20cf8fd611ec9313d3103ab59b)
-+++ b/views/estadisticas.ejs	(date 1715100796785)
-@@ -11,7 +11,8 @@
-                 <img src="resources/images/uac_logo.png" alt="Logo Izquierdo" class="logo-izquierdo">
-                 <h1 class="titulo-sitio">CIC Assistance</h1>
-                 <img src="resources/images/facu_logo.png" alt="Logo Derecho" class="logo-derecho">
--            </div>
-+    </div>
-+
-     <div class="estadisticasContenedor">
- 
-         <br>
-@@ -31,6 +32,8 @@
-                 <% const datosUsuarios = usuariosPorSoli.map(numSoli => numSoli.NumeroSolicitudes); %>
-                 <% const asigTecnicos = asignacionesTecnicos.map(asignacion => asignacion.NumeroSolicitudesTecnico); %>
-                 <% const dictamenSolucion = solucionesDictamen.map(solucion => solucion.NumeroSolicitudesDictamen); %>
-+                <% const soliSinDic = solicitudesSinDictamen.map(solucionSin => solucionSin.NumSolicitudesCerradasSinDictamen); %>
-+                <% const soliConDic = solicitudesConDictamen.map(solucionCon => solucionCon.NumSolicitudesCerradasConDictamenYVales); %>
- 
- 
-             <!-- Agrega aquí cualquier otra información estadística que desees mostrar -->
-@@ -49,11 +52,14 @@
- 
-         <div>
-                 <canvas id="myChart4" width="200" height="200"></canvas>
-+        </div>
-+        <div>
-+                <canvas id="myChart5" width="200" height="200"></canvas>
-         </div>
-     </div>
--      
-+
-       <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
--      
-+
-       <script>
-           document.addEventListener('DOMContentLoaded', function () {
-               // Obtén el contexto del lienzo donde se dibujará la gráfica
-@@ -214,6 +220,47 @@
-                     maintainAspectRatio: false,
-                     aspectRatio: 2,
-                     scales: {
-+                        y: {
-+                            beginAtZero: true
-+                        }
-+                    }
-+                }
-+            });
-+            // Obtén el contexto del lienzo donde se dibujará la tercera gráfica
-+            const ctx5 = document.getElementById('myChart5').getContext('2d');
-+
-+            // Configura los datos de la tercera gráfica
-+            const data5 = {
-+                labels: ['Solicitudes sin Dictamen', 'Solicitudes con Dictamen'],
-+                datasets: [{
-+                    label: 'Total',
-+                    data: [<%= soliSinDic %>, <%= soliConDic %>], // Aquí deberías agregar tus datos para la segunda gráfica
-+                    backgroundColor: [
-+                        'rgba(255, 99, 132, 0.2)',
-+                        'rgba(54, 162, 235, 0.2)',
-+                        'rgba(255, 206, 86, 0.2)',
-+                        'rgba(75, 192, 192, 0.2)',
-+                        'rgba(153, 102, 255, 0.2)'
-+                    ],
-+                    borderColor: [
-+                        'rgba(255, 99, 132, 1)',
-+                        'rgba(54, 162, 235, 1)',
-+                        'rgba(255, 206, 86, 1)',
-+                        'rgba(75, 192, 192, 1)',
-+                        'rgba(153, 102, 255, 1)'
-+                    ],
-+                    borderWidth: 1
-+                }]
-+            };
-+
-+            // Configura la instancia de la segunda gráfica
-+            const myChart5 = new Chart(ctx5, {
-+                type: 'pie',
-+                data: data5,
-+                options: {
-+                    maintainAspectRatio: false,
-+                    aspectRatio: 2,
-+                    scales: {
-                         y: {
-                             beginAtZero: true
-                         }
-Index: app.js
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>//Invocamos express\r\nconst express = require('express');\r\nconst rateLimit = require('express-rate-limit');//Para proteger ataques ddos o limitar la cantidad de solicitudes\r\nconst app = express();\r\nconst path = require('path');\r\nconst ejs = require('ejs');\r\nconst fs = require('fs');\r\nconst puppeteer = require('puppeteer');\r\nconst {authPage,authSub} = require('./middleware');\r\nconst nodemailer = require('nodemailer');\r\n\r\n//seteamos urlencoded para capturar los datos del formulario\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(express.json());\r\n\r\n//Invocar a dotenv\r\nconst dotenv = require('dotenv');\r\ndotenv.config({path: './env/.env'})\r\n\r\n//Setear el directorio public\r\napp.use('/resources', express.static('public'));\r\napp.use('/resources', express.static(__dirname + '/public'));\r\n\r\n///Establecer el motor de plantillas\r\napp.set('view engine', 'ejs');\r\n\r\n//6.- invocar a bcrypt\r\nconst bcryptjs = require('bcryptjs');\r\n\r\n//7.- Var de sesion\r\nconst session = require('express-session');\r\napp.use(session({\r\n    secret: 'secret',\r\n    resave: true,\r\n    saveUninitialized:true\r\n}));\r\n\r\n//Invocar a rate-limit para proteger contra ataques de muchas solicitudes al mismo tiempo\r\n const limiter = rateLimit({\r\n windowMs: 15 * 60 * 1000, // 15 minutes\r\n max: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)\r\nstandardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\nlegacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\napp.use(limiter);\r\n\r\n//8.- Invocar conexion a DB\r\nconst connection = require('./database/db');\r\nconst { assign } = require('nodemailer/lib/shared');\r\nconsole.log(__dirname);\r\n\r\n//FUNCION PARA ENVIAR NOTIFICACIONES POR EMAIL\r\nenviarMail = async(opcion,correoObjetivo)=>{\r\n    const config = {\r\n        host : 'smtp.gmail.com',\r\n        port : 587,\r\n        auth : {\r\n            user: process.env.SMTP_USER,\r\n            pass: process.env.SMTP_PASS\r\n        }\r\n    }\r\n\r\n    let textoCorreo;\r\n    let textAsunto;\r\n    if (opcion === 1) {\r\n        textAsunto = 'Solicitud de soporte creada'\r\n        textoCorreo = 'Ha realizado una solicitud de soporte técnico al sistema CIC Assistance, puede checar el estatus de su solicitud en su historial de solicitudes a traves de la misma página donde realizó la solicitud';\r\n    } else if (opcion === 2) {\r\n        textAsunto = 'Actualización estatus en solicitud'\r\n        textoCorreo = 'Ha cambiado el estatus de tu solicitud de soporte técnico, revisa tu portal cic assistance para obtener mas información';\r\n    } else if(opcion === 3){\r\n        textAsunto = 'Vale creado'\r\n        textoCorreo = 'Se ha creado el vale a su solicitud de soporte técnico puede descargarlo a traves del portal cic assistance en su navegador web';\r\n    }else if(opcion === 4){\r\n        textAsunto = 'Dictamen sobre solicitud'\r\n        textoCorreo = 'Se ha determinado el dictamen a su solicitud de soporte técnico, puede revisar mas detalles del dictamen en su portal cic assistance y puede pasar por su equipo al Centro de Computo';\r\n    }else if(opcion === 5){\r\n        textAsunto = 'Solicitud Asignada'\r\n        textoCorreo = 'Se le ha asignado una nueva solicitud de soporte técnico porfavor entre a su portal CIC Assitance para poder ver mas información';\r\n   \r\n    }\r\n    const mensaje = {\r\n        from: 'cic.assistance2024@gmail.com',\r\n        to: correoObjetivo,\r\n        subject: textAsunto,\r\n        text: textoCorreo\r\n    }\r\n    const transport = nodemailer.createTransport(config);\r\n    const info = await transport.sendMail(mensaje);\r\n}\r\n\r\n\r\n\r\n//9.- Estableciendo las rutas\r\napp.get('/login', (req, res) => {\r\n    res.render('login');\r\n});\r\n\r\n\r\napp.get('/acercaDe', (req, res) => {\r\n    res.render('acerca_de');\r\n});\r\n\r\napp.get('/registerP',authPage('Admin'), (req, res) => {\r\n    res.render('register');\r\n});\r\napp.get('/registerT',authPage('Admin'), (req, res) => {\r\n    res.render('registerT');\r\n});\r\napp.get('/generarDictamen',authPage('Admin'), (req, res) => {\r\n    res.render('generarDictamen');\r\n});\r\napp.get('/alerta', (req, res) => {\r\n    res.render('alerta');\r\n});\r\n// Ruta GET para renderizar la vista de estadísticas ESTADISTICAS\r\napp.get('/estadisticas', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        console.log(fecha);\r\n        const folios = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n        const conteoEstados = await query(`SELECT Estado AS estado, COUNT(*) AS total FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}' GROUP BY Estado`);\r\n\r\n        const usuariosPorSoli = await query(`SELECT u.Nombre AS NombreUsuario, COUNT(a.FolioSolicitud) AS NumeroSolicitudes\r\n                                                FROM usuarios u\r\n                                                JOIN solicitudes s ON u.IdUsuario = s.IdUsuario\r\n                                                JOIN ${tipo} a ON s.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY u.NombreUsuario`);\r\n        const asignacionesTecnicos = await query(`SELECT t.Nombre AS Tecnico, COUNT(a.IdSolicitud) AS NumeroSolicitudesTecnico\r\n                                                FROM tecnicos t\r\n                                                JOIN asignaciones a ON t.IdTecnico = a.IdTecnico \r\n                                                JOIN solicitudes s ON s.FolioSolicitud = a.IdSolicitud WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY t.Nombre`);\r\n        const solucionesDictamen = await query(`SELECT d.DictamenFinal AS DictamenFinal, COUNT(a.FolioSolicitud) AS NumeroSolicitudesDictamen\r\n                                                FROM dictamenes d\r\n                                                JOIN ${tipo} a ON d.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE d.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY d.DictamenFinal`);\r\n        console.log(folios);\r\n        console.log(conteoEstados);\r\n        console.log(usuariosPorSoli);\r\n        console.log(asignacionesTecnicos);\r\n        console.log(solucionesDictamen);\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen });\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\napp.get('/reportes', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        console.log(fecha);\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`)\r\n        console.log(\"-----------------aaaaaaaaaaaaaaaaaaa--------------------\");\r\n        console.log(queryParaReportes)\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('reportes', { tipo, desdeFecha, hastaFecha, objetos: queryParaReportes, titulo, nombre, oficio, exp, area });\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\n//Panel de técnicos\r\napp.get('/panelTecnicos', authPage([\"Tecnico\", \"Admin\"]), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,\r\n            ruta: 'login'\r\n        });\r\n    }\r\n\r\n    try {\r\n        const usuario = req.session.idUsuario;\r\n        const asignaciones = await query(`SELECT DISTINCT s.FolioSolicitud,s.Fecha,s.Descripcion, v.Equipo,v.NoSerieEquipo,v.MarcaEquipo,v.ModeloEquipo, u.IdUsuario as IdUsuarioTecnico, us.IdUsuario as IdUsuarioSolicitante, us.Nombre as NombreSolicitante FROM solicitudes s JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud JOIN tecnicos t ON a.IdTecnico = t.IdTecnico JOIN usuarios u ON t.IdUsuario = u.IdUsuario JOIN usuarios us ON s.IdUsuario = us.IdUsuario WHERE u.IdUsuario = ${usuario}`);\r\n        \r\n        res.render('panelTecnicos', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            asignaciones: asignaciones // Pasando las asignaciones como variable local\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error al obtener las asignaciones:\", error);\r\n        res.status(500).send('Error interno del servidor');\r\n    }\r\n});\r\n\r\n// Panel de usuarios\r\napp.get('/panelUsuario',authPage([\"Usuario\",\"Admin\",\"Tecnico\"]), async (req, res) => {\r\n\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const usuario = req.session.idUsuario;\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const historialUsuario = `\r\n    SELECT s.FolioSolicitud AS FolioSolicitud, s.Fecha AS Fecha, s.Equipo AS Equipo, s.Estado AS Estado, CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Vale, CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud WHERE s.IdUsuario = ${usuario} ORDER BY FolioSolicitud DESC;\r\n    `;\r\n    const historial = await query(historialUsuario);\r\n    console.log(edificios);\r\n    res.render('panelUsuario', {\r\n        edificios: edificios,\r\n        login: req.session.loggedin,\r\n        name: req.session.name,\r\n        historial: historial,\r\n    });\r\n});\r\n\r\n\r\n//Panel de administradores\r\napp.get('/panelAdmin',authPage('Admin'), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const tecnicos = await query('SELECT * FROM tecnicos');\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const folios = await query('SELECT solicitudes.FolioSolicitud, solicitudes.IdUsuario, usuarios.Correo FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE NOT EXISTS ( SELECT 1 FROM vales WHERE vales.FolioSolicitud = solicitudes.FolioSolicitud )');\r\n    const usuarios = await query('SELECT * from usuarios');\r\n    const usuariosTecnicos = await query('SELECT * FROM usuarios WHERE rol = \"Tecnico\" AND NOT EXISTS ( SELECT 1 FROM tecnicos WHERE tecnicos.IdUsuario = usuarios.IdUsuario )');\r\n    const historialSoli = await query(`SELECT s.FolioSolicitud AS FolioSolicitud,s.Fecha AS Fecha,s.Hora AS Hora,u.Nombre AS NombreUsuario,s.Equipo AS Equipo,s.Estado AS Estado,CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' WHEN d.FolioSolicitud IS NOT NULL THEN 'No disponible' ELSE 'No Disponible' END AS Vale,CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario ORDER BY FolioSolicitud DESC; `);\r\n    const soloAbiertas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Abierto\"')\r\n    const soliPendiente = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Proceso\"')\r\n    const soliCerradas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Cerrado\"')\r\n    const soliEspera = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Espera\"')\r\n    const soliAsignada = await query('SELECT solicitudes.*,u.Correo, u.Nombre as UsuarioNombre, tecnicos.Nombre, tecnicos.IdTecnico FROM solicitudes LEFT JOIN usuarios u ON solicitudes.IdUsuario = u.IdUsuario LEFT JOIN asignaciones ON solicitudes.IdAsignacion = asignaciones.IdAsignacion LEFT JOIN tecnicos ON asignaciones.IdTecnico = tecnicos.IdTecnico LEFT JOIN usuarios ON tecnicos.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Asignada\"')\r\n    const inforVales = await query(\"SELECT v.*, COALESCE(d.idDictamen, 'No existe') AS IdDictamen, u.Nombre AS NombreUsuario, COALESCE(a.Diagnostico, 'No disponible') AS Diagnostico, COALESCE(a.Solucion, 'No disponible') AS Solucion FROM vales v LEFT JOIN dictamenes d ON v.idVale = d.idVale LEFT JOIN solicitudes s ON v.folioSolicitud = s.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario LEFT JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud ORDER BY v.idVale DESC;\");\r\n    \r\n    res.render('panelAdmin', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            folioSolicitudes: folios,\r\n            usuarios: usuarios,\r\n            historial: historialSoli,\r\n            edificios: edificios,\r\n            abierto: soloAbiertas,\r\n            pendiente:  soliPendiente,\r\n            asignada: soliAsignada,\r\n            espera: soliEspera,\r\n            cerrado: soliCerradas,\r\n            vales:inforVales,\r\n            tecnicos: tecnicos,\r\n            usuariosTecnicos: usuariosTecnicos,\r\n            \r\n        });\r\n        console.log(historialSoli);\r\n});\r\nfunction query(sql) {\r\n    return new Promise((resolve, reject) => {\r\n        connection.query(sql, (error, result) => {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\n// BUSQUEDA DE FOLIO PARA RELLENO AUTOMATICO DE INFO EN DICTAMENES\r\napp.get('/obtener-informacion-folio/:folioSolicitud',authPage('Admin'), (req, res) => {\r\n    const folioSolicitud = req.params.folioSolicitud;\r\n    req.session.folioSolicitudDictamen = folioSolicitud;\r\n    const query = 'SELECT v.idVale, v.Equipo, v.NoSerieEquipo, v.MarcaEquipo, v.ModeloEquipo, u.Correo FROM vales v JOIN solicitudes s ON v.FolioSolicitud = s.FolioSolicitud JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE v.FolioSolicitud = ?';\r\n\r\n    connection.query(query, [folioSolicitud], (error, results) => {\r\n        if (error) {\r\n            console.error(error);\r\n            res.status(500).json({ error: 'Error al obtener la información del folio' });\r\n        } else {\r\n            if (results.length > 0) {\r\n                // Si se encontraron resultados, devuelve la información como JSON al cliente\r\n                console.log(results);\r\n                req.session.correoDictamen = results[0].Correo;\r\n                req.session.idValeDictamen = results[0].idVale;\r\n                res.json(results[0]); // Suponiendo que solo necesitas el primer resultado\r\n            } else {\r\n                // Si no se encontraron resultados, puedes devolver un objeto vacío o un mensaje\r\n                res.json({ message: 'No se encontró información para el folio proporcionado' });\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n//estadisticas\r\napp.post('/generarEstadisticas', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha };\r\n    res.redirect('/estadisticas');\r\n});\r\n\r\n//reportes\r\napp.post('/generarReportes', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area };\r\n    res.redirect('/reportes');\r\n});\r\n\r\n// Define la ruta de la plantilla\r\nconst plantillaPath = path.join(__dirname, 'views', 'plantillaReportes.ejs');\r\n\r\n// Ruta para generar el PDF\r\napp.post('/generarPDF', async (req, res, next) => {\r\n    try {\r\n        // Obtén los datos de la sesión\r\n        const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas;\r\n\r\n        // Realizar la consulta SQL para obtener los datos de la base de datos\r\n        const fecha = desdeFecha;\r\n        const fechaFinal = hastaFecha;\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n\r\n        // Renderiza la plantilla con los datos de la sesión y los datos de la base de datos\r\n        const htmlContent = await ejs.renderFile(plantillaPath, {\r\n            tipo,\r\n            desdeFecha,\r\n            hastaFecha,\r\n            titulo,\r\n            nombre,\r\n            oficio,\r\n            exp,\r\n            area,\r\n            objetos: queryParaReportes\r\n        });\r\n\r\n        // Crea una instancia de Puppeteer\r\n        const browser = await puppeteer.launch();\r\n        const page = await browser.newPage();\r\n\r\n        // Establece el tamaño de la página y carga el contenido HTML\r\n        await page.setViewport({ width: 1200, height: 800 });\r\n        await page.setContent(htmlContent);\r\n\r\n        // Genera el PDF\r\n        const pdf = await page.pdf({ format: 'A4', landscape: true });\r\n\r\n        // Cierra el navegador de Puppeteer\r\n        await browser.close();\r\n\r\n        // Envía el PDF como respuesta\r\n        res.contentType('application/pdf');\r\n        res.send(pdf);\r\n    } catch (error) {\r\n        // Maneja cualquier error que ocurra\r\n        console.error('Error al generar el PDF:', error);\r\n        res.status(500).send('Error al generar el PDF');\r\n    }\r\n});\r\n\r\n//10 Hacer registro\r\napp.post('/registerP',authPage('Admin'),async(req, res) => {\r\n    const user = req.body.username;\r\n    const name = req.body.name;\r\n    const pass = req.body.password;\r\n    const rol = req.body.rol;\r\n    const genero = req.body.genero;\r\n    const correo  = req.body.correo;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    \r\n    connection.query('INSERT INTO usuarios SET ?', { NombreUsuario: user, Nombre: name, Contrasena: passwordHaash, Rol: rol, Genero: genero, Correo: correo }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            if (error.code === 'ER_DUP_ENTRY') {\r\n                res.render('alerta', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"¡Debe elegir otro nombre de usuario!\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: false,\r\n                    timer: 1500,\r\n                    ruta: 'panelAdmin'\r\n                });\r\n            }\r\n        } else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n})\r\n\r\napp.post('/registerT',authPage('Admin'),async(req, res) => { ///SEPARAR EN OTRA PESTAÑA\r\n    const nombre = req.body.nombreT;\r\n    const apellidos = req.body.apellidos;\r\n    const numeroT = req.body.noTrabajador;\r\n    const email = req.body.email;\r\n    const telefono = req.body.telef;\r\n    const IdUsuario  = req.body.IdUsuario;\r\n    const fecha = obtenerFechaActual();  \r\n    connection.query('INSERT INTO tecnicos SET ?', { Nombre: nombre, Apellidos: apellidos, NoTrabajador: numeroT, Correo: email, Telefono: telefono, IdUsuario: IdUsuario,FechaRegistro: fecha }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n        }\r\n             else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n})\r\n\r\n//10 Hacer solicitud de soporte\r\napp.post('/solicitud', async(req, res) => {\r\n    const usuario = req.session.idUsuario; //\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    console.log(otroInput);\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:usuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion,IdAsignacion:0}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,req.session.correoUser);\r\n            const idSolicitud = results.insertId;\r\n            console.log(idSolicitud);\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${req.session.idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelUsuario'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\napp.post('/solicitudAdmin',authPage('Admin'), async(req, res) => {\r\n    const usuario = req.body.usuarios;\r\n    const [idUsuario, correoUsuario] = usuario.split('|');\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:idUsuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion,IdAsignacion:0}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,correoUsuario);\r\n            const idSolicitud = results.insertId;\r\n            console.log(idSolicitud);\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//11 Autenticacion\r\napp.post('/auth', async (req,res)=> {\r\n    const user = req.body.username;\r\n    const pass = req.body.password;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    if(user && pass){\r\n        connection.query('SELECT * FROM usuarios WHERE NombreUsuario = ?', [user], async (error, results)=>{\r\n            if(results.length == 0 || !(await bcryptjs.compare(pass, results[0].Contrasena))){ \r\n                //si es igual a 0 o no coincide la contraseña, en la comparacion de bcrypt se debe poner el nombre de la variable y despues [0]. el nombre del campo contraseña en la db\r\n                res.render('login', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"Usuario y/o contrseña incorrectas\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: true,\r\n                    timer: false,\r\n                    ruta :'login'\r\n                });\r\n            }else{\r\n                req.session.loggedin = true;\r\n                req.session.correoUser = results[0].Correo;\r\n                req.session.idUsuario = results[0].IdUsuario;\r\n                req.session.name = results[0].Nombre;\r\n                req.session.rol = results[0].Rol;\r\n                if (results[0].Rol === 'Admin') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelAdmin'  // Redirigir a la página de panelAdmin\r\n                    });\r\n                } else if (results[0].Rol === 'Tecnico') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelTecnicos'  // Redirigir a la página de panelTecnico\r\n                    });\r\n                } else {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelUsuario'  // Redirigir a la página de solicitud\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }else{\r\n        res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"¡Porfavor ingrese un usuario y/o contraseña!\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 1500,\r\n            ruta :'login'\r\n        });\r\n    }\r\n});\r\n\r\n//VALES\r\napp.post('/vales', async(req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioS = req.body.folios;\r\n    const [folioSolicitud, correoUsuarioFolio] = folioS.split('|');\r\n    let equipo = req.body.listaEquiposCheck || '';\r\n    const otroInput = req.body.otroInput2 || '';  \r\n    const noSerie = req.body.serie;\r\n    const marca = req.body.marca;\r\n    const modelo = req.body.modelo;\r\n    const estado = req.body.estatus;\r\n    const caracteris = req.body.caracteristicas;\r\n    const [idTecnico, correoTecnico] = req.body.tecnico.split('|');\r\n    console.log('ABAJO DEBE APARECER EL ID DEL TECNICO')\r\n    console.log(idTecnico) \r\n    console.log(correoTecnico)\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    \r\n    const fechaHoraActual = new Date().toLocaleString();\r\n    const folioSeleccionado = folioSolicitud;\r\n    const templatePath = path.join(__dirname, 'views', 'generarVale.ejs');\r\n    \r\n    // Renderizar la plantilla HTML\r\n    const htmlContent = await ejs.renderFile(templatePath, {\r\n        folio: folioSeleccionado,\r\n        equipos: req.body.equipos,\r\n        serie: req.body.serie,\r\n        marca: req.body.marca,\r\n        modelo: req.body.modelo,\r\n        caracteristicas: req.body.caracteristicas,\r\n        estatus: req.body.estatus,\r\n        revision: req.body.revision,\r\n        fechaHoraActual: fechaHoraActual\r\n    });\r\n\r\n    // Crear una instancia de Puppeteer y generar el PDF\r\n    const browser = await puppeteer.launch();\r\n    const page = await browser.newPage();\r\n    const pdfPath = path.join(__dirname, 'docs', `ValeST24-${folioSeleccionado}.pdf`);\r\n\r\n    await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n    await page.pdf({ path: pdfPath, format: 'A4' });\r\n    await browser.close();\r\n\r\n    // Enviar respuesta al cliente\r\n\r\n    res.render('alerta', {\r\n        alert: true,\r\n        alertTitle: 'Éxito',\r\n        alertMessage: 'PDF generado y guardado correctamente',\r\n        alertIcon: 'success',\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n        ruta: 'panelAdmin'\r\n    });   \r\n\r\n    // Actualizar el estado de la solicitud en la base de datos\r\n    const cambioEstado = \"Asignada\";\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ? ', [cambioEstado, folioSolicitud], async(error, results)=> {\r\n        if (error) {\r\n            console.log(error);\r\n        } else {\r\n            // Insertar registros en la base de datos\r\n            connection.query('INSERT INTO asignaciones SET ?', { IdSolicitud: folioSolicitud, IdTecnico: idTecnico,DIagnostico:\"\", Solucion:\"\", Mensaje:\"\" }, async(error, results)=> {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    const IdAsignacion = results.insertId;\r\n                    await query(`UPDATE solicitudes SET IdAsignacion = ${IdAsignacion} WHERE FolioSolicitud = ${folioSolicitud}`);\r\n                    connection.query('INSERT INTO vales SET ?', {FolioSolicitud:folioSolicitud,Fecha:fecha,Equipo:equipo, NoSerieEquipo:noSerie, MarcaEquipo:marca, ModeloEquipo:modelo,Caracteristicas: caracteris ,Estado: estado,NombreUsuario:usuario}, async(error, results)=> {\r\n                        if (error) {\r\n                            console.log(error);\r\n                        } else {\r\n                            enviarMail(3,correoUsuarioFolio);\r\n                            enviarMail(5,correoTecnico);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n});\r\n\r\n// Función para obtener la fecha y hora actual en formato MySQL\r\nfunction obtenerFechaHoraActual() {\r\n    const fecha = new Date();\r\n    const año = fecha.getFullYear();\r\n    const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n    const dia = String(fecha.getDate()).padStart(2, '0');\r\n\r\n    return `${año}-${mes}-${dia}`;\r\n}\r\n\r\n// DICTAMENES\r\napp.post('/guardar-datos-y-generar-pdf', async (req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioSolicitudDictamen = req.session.folioSolicitudDictamen;\r\n    const vale = req.body.valeId;\r\n    console.log(folioSolicitudDictamen);\r\n    const equipoDictamen = req.body.equipoDictamen;\r\n    const marcaEquipo = req.body.marcaEquipo;\r\n    const modeloEquipo = req.body.modeloEquipo;\r\n    const noSerieEquipo = req.body.noSerieEquipo;\r\n    const estado = req.body.estado;\r\n    const tipoDictamen = req.body.tipoDictamen;\r\n    const caracDictamen = req.body.caracDictamen;\r\n    const observacionesDictamen = req.body.observacionesDictamen;\r\n    const descripcionDictamen = req.body.descripcionDictamen;\r\n\r\n    connection.query('INSERT INTO dictamenes SET ?', {\r\n        Encargado: usuario,\r\n        Fecha: fecha,\r\n        FolioSolicitud: folioSolicitudDictamen,\r\n        idVale: vale,\r\n        Equipo: equipoDictamen,\r\n        MarcaEquipo: marcaEquipo,\r\n        ModeloEquipo: modeloEquipo,\r\n        NoSerieEquipo: noSerieEquipo,\r\n        Estado: estado,\r\n        DictamenFinal: tipoDictamen,\r\n        caracDictamen: caracDictamen,\r\n        Observaciones: observacionesDictamen,\r\n        Descripcion: descripcionDictamen\r\n    }, async (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.status(500).send('Error al guardar los datos en la base de datos');\r\n        } else {\r\n            const idDictamen = results.insertId;\r\n\r\n            // Crear una instancia de Puppeteer\r\n            const browser = await puppeteer.launch();\r\n            const page = await browser.newPage();\r\n\r\n            // Ruta de la plantilla HTML\r\n            const templatePath = path.join(__dirname, 'views', 'generarDictamen.ejs');\r\n            console.log('Fecha a renderizar en la plantilla:', fecha);\r\n            const htmlContent = await ejs.renderFile(templatePath, {\r\n                dictamenes: [{\r\n                    idDictamen,\r\n                    FolioSolicitud: folioSolicitudDictamen,\r\n                    Fecha: fecha,\r\n                    Equipo: equipoDictamen,\r\n                    MarcaEquipo: marcaEquipo,\r\n                    ModeloEquipo: modeloEquipo,\r\n                    NoSerieEquipo: noSerieEquipo,\r\n                    Estado: estado,\r\n                    DictamenFinal: tipoDictamen,\r\n                    caracDictamen: caracDictamen,\r\n                    Observaciones: observacionesDictamen,\r\n                    Descripcion: descripcionDictamen\r\n                }],\r\n                fecha: fecha\r\n            });\r\n\r\n            await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n\r\n            // Ruta y nombre del archivo PDF\r\n            const pdfFileName = `DT24-${folioSolicitudDictamen}.pdf`;\r\n            const pdfFilePath = path.join(__dirname, './docs/', pdfFileName);\r\n\r\n            // Configurar la orientación a horizontal\r\n            const options = {\r\n                format: 'A4',\r\n                landscape: true \r\n            };\r\n\r\n\r\n            // Generar el PDF\r\n            await page.pdf({ path: pdfFilePath, ...options });\r\n\r\n            // Cerrar el navegador Puppeteer\r\n            await browser.close();\r\n\r\n            console.log('Archivo PDF generado y guardado correctamente');\r\n            console.log(req.session.correoDictamen)\r\n            enviarMail(4,req.session.correoDictamen);\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: 'Éxito',\r\n                alertMessage: 'PDF generado y guardado correctamente',\r\n                alertIcon: 'success',\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n\r\n    function obtenerFechaHoraActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n});\r\n\r\n//ACTUALIZAR ESTADO DE LAS SOLICITUDES\r\napp.post('/actualizar-estado', async (req, res) => {\r\n    const { folio, nuevoEstado } = req.body;\r\n    const fecha = obtenerFechaActual().toString();\r\n    const hora = obtenerHoraActual().toString();\r\n\r\n    // Consulta para actualizar el estado en la tabla solicitudes\r\n    const cambiarEstado = 'UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?';\r\n    // Consulta para insertar el cambio en el log, solo si hay un cambio en el estado\r\n    const logQuery = 'INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (?, ?, ?, ?, ?)';\r\n    // Consulta para obtener el estado original antes de la actualización\r\n    const obtenerEstadoOriginal = 'SELECT s.Estado, s.IdUsuario, u.Correo FROM solicitudes s INNER JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE s.FolioSolicitud = ?';\r\n\r\n    connection.query(obtenerEstadoOriginal, [folio], async (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el estado original:', error);\r\n            res.status(500).json({ error: 'Error al obtener el estado original' });\r\n        } else {\r\n            const usuarioEmail = results[0].Correo;\r\n            console.log(usuarioEmail);\r\n            console.log('ARRRIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');\r\n            const estadoOriginal = results[0].Estado;\r\n            // Ejecuta la consulta para cambiar el estado\r\n            connection.query(cambiarEstado, [nuevoEstado, folio], (updateError, updateResults) => {\r\n                if (updateError) {\r\n                    console.error('Error al actualizar la base de datos:', updateError);\r\n                    res.status(500).json({ error: 'Error al actualizar el estado en la base de datos' });\r\n                } else {\r\n                    console.log('Estado actualizado en la base de datos:', updateResults);\r\n                    // Inserta en el log solo si hay un cambio en el estado\r\n                    if (estadoOriginal !== nuevoEstado) {\r\n                        connection.query(logQuery, [req.session.idUsuario, folio, nuevoEstado, fecha, hora], (logError, logResults) => {\r\n                            if (logError) {\r\n                                console.error('Error al insertar en el log:', logError);\r\n                            } else {\r\n                                enviarMail(2,usuarioEmail);\r\n                                console.log('Cambio registrado en el log:', logResults);\r\n                            }\r\n                        });\r\n                    }\r\n                    res.json({ success: true, mensaje: 'Estado actualizado exitosamente' });\r\n                }\r\n            });\r\n        }\r\n    });\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//DESCARGAR PDF DESDE EL HISTORIAL\r\n//DESCARGAR VALE\r\napp.get('/descargarPDFvale', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `ValeST24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Vale no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//DESCARGAR DICTAMEN\r\napp.get('/descargarPDFdictamen', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `DT24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Dictamen no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//Actualizar el estado de las asignaciones\r\napp.post('/actualizarEstadoSolicitud', async (req, res) => {\r\n    const folioSolicitud = req.body.folioSolicitud;\r\n    const nuevoEstado = req.body.nuevoEstado;\r\n\r\n    // Actualiza el estado de la solicitud en la base de datos\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?', [nuevoEstado, folioSolicitud], (error, results) => {\r\n        if (error) {\r\n            console.error('Error al actualizar el estado de la solicitud:', error);\r\n            res.status(500).send('Error interno del servidor');\r\n        } else {\r\n            // Si se actualizó correctamente, muestra un mensaje de éxito con SweetAlert2\r\n            res.status(200).send('Estado actualizado correctamente');\r\n        }\r\n    });\r\n});\r\n\r\n// Creación de diagnósticos técnicos y soluciones aplicadas\r\napp.post('/crearDiagnostico', async (req, res) => {\r\n    const folioSeleccionado = req.body.folios; // Obtener el folio seleccionado del cuerpo de la solicitud\r\n    const diagnosticoT = req.body.diagnosticoT;\r\n    const solucion = req.body.solucion;\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n\r\n    // Consulta para obtener el IdTecnico de la tabla asignaciones\r\n    connection.query('SELECT IdTecnico FROM asignaciones WHERE IdSolicitud = ?', [folioSeleccionado], (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el IdTecnico:', error);\r\n            // Mostrar un mensaje de error utilizando SweetAlert2\r\n            res.render('panelTecnicos', {\r\n                alert: {\r\n                    alertTitle: 'Error',\r\n                    alertMessage: 'Error interno del servidor',\r\n                    alertIcon: 'error',\r\n                    showConfirmButton: true,\r\n                    timer: null,\r\n                    ruta: 'panelTecnicos' // Redirige a la misma página\r\n                }\r\n            });\r\n        } else {\r\n            const idTecnico = results[0].IdTecnico; // Se obtiene el IdTecnico de los resultados de la consulta\r\n            console.log('IdTecnico obtenido:', idTecnico);\r\n\r\n            // Inserción del diagnóstico y solución en la tabla asignaciones\r\n            connection.query('UPDATE asignaciones SET Diagnostico = ?, Solucion = ? WHERE IdSolicitud = ?',\r\n                [diagnosticoT, solucion, folioSeleccionado], (error, results) => {\r\n                    if (error) {\r\n                        console.error('Error al actualizar la tabla de asignaciones:', error);\r\n                        // Mostrar un mensaje de error utilizando SweetAlert2\r\n                        res.render('panelTecnicos', {\r\n                            alert: {\r\n                                alertTitle: 'Error',\r\n                                alertMessage: 'Error al actualizar la tabla de asignaciones',\r\n                                alertIcon: 'error',\r\n                                showConfirmButton: false,\r\n                                timer: 1500,\r\n                                ruta: 'panelTecnicos' // Redirige a la misma página\r\n                            }\r\n                        });\r\n                    } else {\r\n                        console.log('Diagnóstico y solución actualizados correctamente');\r\n\r\n                        // Consulta para obtener las asignaciones actualizadas\r\n                        connection.query('SELECT * FROM asignaciones WHERE IdTecnico = ?', [idTecnico], (error, asignaciones) => {\r\n                            if (error) {\r\n                                console.error('Error al obtener las asignaciones:', error);\r\n                                // Mostrar un mensaje de error utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Error',\r\n                                        alertMessage: 'Error al obtener las asignaciones',\r\n                                        alertIcon: 'error',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                console.log('Asignaciones obtenidas correctamente');\r\n                                // Mostrar un mensaje de éxito utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Éxito',\r\n                                        alertMessage: 'Diagnóstico y solución actualizados correctamente',\r\n                                        alertIcon: 'success',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    },\r\n                                    asignaciones: asignaciones // Pasar las asignaciones al archivo EJS\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    });\r\n\r\n    // Función para obtener la fecha actual en formato AAAA-MM-DD\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n\r\n    // Función para obtener la hora actual en formato HH:MM:SS\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n        return `${horas}:${minutos}:${segundos}`;\r\n    }\r\n});\r\n\r\n//12 Auth page\r\napp.get('/',(req, res)=>{\r\n\r\n    if(req.session.loggedin){\r\n        res.render('login',{\r\n            login: true,\r\n            name: req.session.name\r\n        });\r\n    }else{\r\n        res.render('login',{\r\n            login: false,\r\n            name: 'Debe iniciar sesión'\r\n        })\r\n    }\r\n})\r\n\r\n//13 Logout\r\napp.get('/logout', (req, res)=>{\r\n    req.session.destroy(()=>{\r\n        res.redirect('/login'); //Redirige al index\r\n    });\r\n})\r\n\r\n//Hacemos que funcione el servidor local en el puerto\r\napp.listen(3000, (req, res)=> {\r\n    console.log('SERVER RUNNING IN http://localhost:3000');\r\n});\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app.js b/app.js
---- a/app.js	(revision 929ec40a983fdc20cf8fd611ec9313d3103ab59b)
-+++ b/app.js	(date 1715100796829)
-@@ -140,13 +140,27 @@
-                                                 JOIN ${tipo} a ON d.FolioSolicitud = a.FolioSolicitud
-                                                 WHERE d.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'
-                                                 GROUP BY d.DictamenFinal`);
-+        const solicitudesSinDictamen = await query(`SELECT COUNT(s.FolioSolicitud) AS NumSolicitudesCerradasSinDictamen
-+                                                        FROM solicitudes s
-+                                                        LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud
-+                                                        JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud
-+                                                        WHERE s.Estado = 'Cerrado' AND d.FolioSolicitud IS NULL 
-+                                                        AND s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);
-+        const solicitudesConDictamen = await query(`SELECT COUNT(s.FolioSolicitud) AS NumSolicitudesCerradasConDictamenYVales
-+                                                    FROM solicitudes s
-+                                                    JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud
-+                                                    JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud
-+                                                    WHERE s.Estado = 'Cerrado'
-+                                                    AND s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);
-         console.log(folios);
-         console.log(conteoEstados);
-         console.log(usuariosPorSoli);
-         console.log(asignacionesTecnicos);
-         console.log(solucionesDictamen);
-+        console.log(solicitudesSinDictamen);
-+        console.log(solicitudesConDictamen);
-         // Renderizar la vista de estadísticas y pasar los datos
--        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen });
-+        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen, solicitudesSinDictamen:solicitudesSinDictamen, solicitudesConDictamen:solicitudesConDictamen});
-     } catch (error) {
-         console.error('Error al ejecutar la consulta SQL:', error);
-         // Manejar el error adecuadamente, por ejemplo, renderizando una página de error
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app.js\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/estadisticas.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/estadisticas.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/generarDictamen.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/generarDictamen.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ComposerSettings\">\n    <execution />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"$USER_HOME$/Library/Application Support/Herd/bin/php\" />\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2fyKfmjlEw7LogYHpH60cK6yRPW\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;dev&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/env\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-php-predefined-ba97393d7c68-6f8e3395a2b4-com.jetbrains.php.sharedIndexes-PS-233.15026.12\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"\" />\n      <created>1714767983038</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714767983038</updated>\n      <workItem from=\"1714767984758\" duration=\"553000\" />\n      <workItem from=\"1714794178238\" duration=\"660000\" />\n      <workItem from=\"1714795177084\" duration=\"1172000\" />\n      <workItem from=\"1714838497315\" duration=\"6121000\" />\n      <workItem from=\"1714880657411\" duration=\"5271000\" />\n      <workItem from=\"1714939940395\" duration=\"14014000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"UnknownFeatures\">\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\".env\" />\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.ejs\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 929ec40a983fdc20cf8fd611ec9313d3103ab59b)
-+++ b/.idea/workspace.xml	(date 1715101094561)
-@@ -4,12 +4,10 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="b75b1334-c68d-4ec7-9620-54811fca6eb8" name="Changes" comment="">
-+    <list default="true" id="b75b1334-c68d-4ec7-9620-54811fca6eb8" name="Changes" comment="Estadísticas listo">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/app.js" beforeDir="false" afterPath="$PROJECT_DIR$/app.js" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/views/estadisticas.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/estadisticas.ejs" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/views/generarDictamen.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/generarDictamen.ejs" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/views/panelAdmin.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/panelAdmin.ejs" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -76,8 +74,21 @@
-       <workItem from="1714795177084" duration="1172000" />
-       <workItem from="1714838497315" duration="6121000" />
-       <workItem from="1714880657411" duration="5271000" />
--      <workItem from="1714939940395" duration="14014000" />
-+      <workItem from="1714939940395" duration="16010000" />
-+      <workItem from="1715002742994" duration="1377000" />
-+      <workItem from="1715013976202" duration="523000" />
-+      <workItem from="1715050178899" duration="5038000" />
-+      <workItem from="1715100765340" duration="328000" />
-     </task>
-+    <task id="LOCAL-00001" summary="Estadísticas listo">
-+      <option name="closed" value="true" />
-+      <created>1714963167888</created>
-+      <option name="number" value="00001" />
-+      <option name="presentableId" value="LOCAL-00001" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1714963167888</updated>
-+    </task>
-+    <option name="localTasksCounter" value="2" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -89,5 +100,7 @@
-   </component>
-   <component name="VcsManagerConfiguration">
-     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
-+    <MESSAGE value="Estadísticas listo" />
-+    <option name="LAST_COMMIT_MESSAGE" value="Estadísticas listo" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53__Changes_.xml	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ /dev/null	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_07_05_24_10_53_[Changes]" date="1715100797151" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 07/05/24 10:53 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00__Changes_.xml	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ /dev/null	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_07_05_24_11_00_[Changes]" date="1715101203912" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 07/05/24 11:00 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46__Changes_.xml	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ /dev/null	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_06_05_24_10_46_[Changes]" date="1715014111519" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 06/05/24 10:46 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46_[Changes]/shelved.patch	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ /dev/null	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
@@ -1,81 +0,0 @@
-Index: app.js
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>//Invocamos express\r\nconst express = require('express');\r\nconst app = express();\r\nconst path = require('path');\r\nconst ejs = require('ejs');\r\nconst fs = require('fs');\r\nconst puppeteer = require('puppeteer');\r\nconst {authPage,authSub} = require('./middleware');\r\nconst nodemailer = require('nodemailer');\r\n\r\n//seteamos urlencoded para capturar los datos del formulario\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(express.json());\r\n\r\n//Invocar a dotenv\r\nconst dotenv = require('dotenv');\r\ndotenv.config({path: './env/.env'})\r\n\r\n//Setear el directorio public\r\napp.use('/resources', express.static('public'));\r\napp.use('/resources', express.static(__dirname + '/public'));\r\n\r\n///Establecer el motor de plantillas\r\napp.set('view engine', 'ejs');\r\n\r\n//6.- invocar a bcrypt\r\nconst bcryptjs = require('bcryptjs');\r\n\r\n//7.- Var de sesion\r\nconst session = require('express-session');\r\napp.use(session({\r\n    secret: 'secret',\r\n    resave: true,\r\n    saveUninitialized:true\r\n}));\r\n\r\n//8.- Invocar conexion a DB\r\nconst connection = require('./database/db');\r\nconst { assign } = require('nodemailer/lib/shared');\r\nconsole.log(__dirname);\r\n\r\n//FUNCION PARA ENVIAR NOTIFICACIONES POR EMAIL\r\nenviarMail = async(opcion,correoObjetivo)=>{\r\n    const config = {\r\n        host : 'smtp.gmail.com',\r\n        port : 587,\r\n        auth : {\r\n            user: process.env.SMTP_USER,\r\n            pass: process.env.SMTP_PASS\r\n        }\r\n    }\r\n\r\n    let textoCorreo;\r\n    let textAsunto;\r\n    if (opcion === 1) {\r\n        textAsunto = 'Solicitud de soporte creada'\r\n        textoCorreo = 'Ha realizado una solicitud de soporte técnico al sistema CIC Assistance, puede checar el estatus de su solicitud en su historial de solicitudes a traves de la misma página donde realizó la solicitud';\r\n    } else if (opcion === 2) {\r\n        textAsunto = 'Actualización estatus en solicitud'\r\n        textoCorreo = 'Ha cambiado el estatus de tu solicitud de soporte técnico, revisa tu portal cic assistance para obtener mas información';\r\n    } else if(opcion === 3){\r\n        textAsunto = 'Vale creado'\r\n        textoCorreo = 'Se ha creado el vale a su solicitud de soporte técnico puede descargarlo a traves del portal cic assistance en su navegador web';\r\n    }else if(opcion === 4){\r\n        textAsunto = 'Dictamen sobre solicitud'\r\n        textoCorreo = 'Se ha determinado el dictamen a su solicitud de soporte técnico, puede revisar mas detalles del dictamen en su portal cic assistance y puede pasar por su equipo al Centro de Computo';\r\n    }else if(opcion === 5){\r\n        textAsunto = 'Solicitud Asignada'\r\n        textoCorreo = 'Se le ha asignado una nueva solicitud de soporte técnico porfavor entre a su portal CIC Assitance para poder ver mas información';\r\n   \r\n    }\r\n    const mensaje = {\r\n        from: 'cic.assistance2024@gmail.com',\r\n        to: correoObjetivo,\r\n        subject: textAsunto,\r\n        text: textoCorreo\r\n    }\r\n    const transport = nodemailer.createTransport(config);\r\n    const info = await transport.sendMail(mensaje);\r\n}\r\n\r\n\r\n\r\n//9.- Estableciendo las rutas\r\napp.get('/login', (req, res) => {\r\n    res.render('login');\r\n});\r\n\r\n\r\napp.get('/acercaDe', (req, res) => {\r\n    res.render('acerca_de');\r\n});\r\n\r\napp.get('/registerP',authPage('Admin'), (req, res) => {\r\n    res.render('register');\r\n});\r\napp.get('/registerT',authPage('Admin'), (req, res) => {\r\n    res.render('registerT');\r\n});\r\napp.get('/generarDictamen',authPage('Admin'), (req, res) => {\r\n    res.render('generarDictamen');\r\n});\r\napp.get('/alerta', (req, res) => {\r\n    res.render('alerta');\r\n});\r\n// Ruta GET para renderizar la vista de estadísticas ESTADISTICAS\r\napp.get('/estadisticas', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        console.log(fecha);\r\n        const folios = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n        const conteoEstados = await query(`SELECT Estado AS estado, COUNT(*) AS total FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}' GROUP BY Estado`);\r\n\r\n        const usuariosPorSoli = await query(`SELECT u.Nombre AS NombreUsuario, COUNT(a.FolioSolicitud) AS NumeroSolicitudes\r\n                                                FROM usuarios u\r\n                                                JOIN solicitudes s ON u.IdUsuario = s.IdUsuario\r\n                                                JOIN ${tipo} a ON s.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY u.NombreUsuario`);\r\n        const asignacionesTecnicos = await query(`SELECT t.Nombre AS Tecnico, COUNT(a.IdSolicitud) AS NumeroSolicitudesTecnico\r\n                                                FROM tecnicos t\r\n                                                JOIN asignaciones a ON t.IdTecnico = a.IdTecnico \r\n                                                JOIN solicitudes s ON s.FolioSolicitud = a.IdSolicitud WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY t.Nombre`);\r\n        const solucionesDictamen = await query(`SELECT d.DictamenFinal AS DictamenFinal, COUNT(a.FolioSolicitud) AS NumeroSolicitudesDictamen\r\n                                                FROM dictamenes d\r\n                                                JOIN ${tipo} a ON d.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE d.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY d.DictamenFinal`);\r\n        console.log(folios);\r\n        console.log(conteoEstados);\r\n        console.log(usuariosPorSoli);\r\n        console.log(asignacionesTecnicos);\r\n        console.log(solucionesDictamen);\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen });\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\napp.get('/reportes', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        console.log(fecha);\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`)\r\n        console.log(\"-----------------aaaaaaaaaaaaaaaaaaa--------------------\");\r\n        console.log(queryParaReportes)\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('reportes', { tipo, desdeFecha, hastaFecha, objetos: queryParaReportes, titulo, nombre, oficio, exp, area });\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\n//Panel de técnicos\r\napp.get('/panelTecnicos', authPage([\"Tecnico\", \"Admin\"]), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,\r\n            ruta: 'login'\r\n        });\r\n    }\r\n\r\n    try {\r\n        const usuario = req.session.idUsuario;\r\n        const asignaciones = await query(`SELECT DISTINCT s.FolioSolicitud,s.Fecha,s.Descripcion, v.Equipo,v.NoSerieEquipo,v.MarcaEquipo,v.ModeloEquipo, u.IdUsuario as IdUsuarioTecnico, us.IdUsuario as IdUsuarioSolicitante, us.Nombre as NombreSolicitante FROM solicitudes s JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud JOIN tecnicos t ON a.IdTecnico = t.IdTecnico JOIN usuarios u ON t.IdUsuario = u.IdUsuario JOIN usuarios us ON s.IdUsuario = us.IdUsuario WHERE u.IdUsuario = ${usuario}`);\r\n        \r\n        res.render('panelTecnicos', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            asignaciones: asignaciones // Pasando las asignaciones como variable local\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error al obtener las asignaciones:\", error);\r\n        res.status(500).send('Error interno del servidor');\r\n    }\r\n});\r\n\r\n// Panel de usuarios\r\napp.get('/panelUsuario',authPage([\"Usuario\",\"Admin\",\"Tecnico\"]), async (req, res) => {\r\n\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const usuario = req.session.idUsuario;\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const historialUsuario = `\r\n    SELECT s.FolioSolicitud AS FolioSolicitud, s.Fecha AS Fecha, s.Equipo AS Equipo, s.Estado AS Estado, CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Vale, CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud WHERE s.IdUsuario = ${usuario} ORDER BY FolioSolicitud DESC;\r\n    `;\r\n    const historial = await query(historialUsuario);\r\n    console.log(edificios);\r\n    res.render('panelUsuario', {\r\n        edificios: edificios,\r\n        login: req.session.loggedin,\r\n        name: req.session.name,\r\n        historial: historial,\r\n    });\r\n});\r\n\r\n\r\n//Panel de administradores\r\napp.get('/panelAdmin',authPage('Admin'), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const tecnicos = await query('SELECT * FROM tecnicos');\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const folios = await query('SELECT solicitudes.FolioSolicitud, solicitudes.IdUsuario, usuarios.Correo FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE NOT EXISTS ( SELECT 1 FROM vales WHERE vales.FolioSolicitud = solicitudes.FolioSolicitud )');\r\n    const usuarios = await query('SELECT * from usuarios');\r\n    const usuariosTecnicos = await query('SELECT * FROM usuarios WHERE rol = \"Tecnico\" AND NOT EXISTS ( SELECT 1 FROM tecnicos WHERE tecnicos.IdUsuario = usuarios.IdUsuario )');\r\n    const historialSoli = await query(`SELECT s.FolioSolicitud AS FolioSolicitud,s.Fecha AS Fecha,s.Hora AS Hora,u.Nombre AS NombreUsuario,s.Equipo AS Equipo,s.Estado AS Estado,CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' WHEN d.FolioSolicitud IS NOT NULL THEN 'No disponible' ELSE 'No Disponible' END AS Vale,CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario ORDER BY FolioSolicitud DESC; `);\r\n    const soloAbiertas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Abierto\"')\r\n    const soliPendiente = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Proceso\"')\r\n    const soliCerradas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Cerrado\"')\r\n    const soliEspera = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Espera\"')\r\n    const soliAsignada = await query('SELECT solicitudes.*,u.Correo, u.Nombre as UsuarioNombre, tecnicos.Nombre, tecnicos.IdTecnico FROM solicitudes LEFT JOIN usuarios u ON solicitudes.IdUsuario = u.IdUsuario LEFT JOIN asignaciones ON solicitudes.IdAsignacion = asignaciones.IdAsignacion LEFT JOIN tecnicos ON asignaciones.IdTecnico = tecnicos.IdTecnico LEFT JOIN usuarios ON tecnicos.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Asignada\"')\r\n    const inforVales = await query(\"SELECT v.*, COALESCE(d.idDictamen, 'No existe') AS IdDictamen, u.Nombre AS NombreUsuario, COALESCE(a.Diagnostico, 'No disponible') AS Diagnostico, COALESCE(a.Solucion, 'No disponible') AS Solucion FROM vales v LEFT JOIN dictamenes d ON v.idVale = d.idVale LEFT JOIN solicitudes s ON v.folioSolicitud = s.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario LEFT JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud ORDER BY v.idVale DESC;\");\r\n    \r\n    res.render('panelAdmin', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            folioSolicitudes: folios,\r\n            usuarios: usuarios,\r\n            historial: historialSoli,\r\n            edificios: edificios,\r\n            abierto: soloAbiertas,\r\n            pendiente:  soliPendiente,\r\n            asignada: soliAsignada,\r\n            espera: soliEspera,\r\n            cerrado: soliCerradas,\r\n            vales:inforVales,\r\n            tecnicos: tecnicos,\r\n            usuariosTecnicos: usuariosTecnicos,\r\n            \r\n        });\r\n        console.log(historialSoli);\r\n});\r\nfunction query(sql) {\r\n    return new Promise((resolve, reject) => {\r\n        connection.query(sql, (error, result) => {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\n// BUSQUEDA DE FOLIO PARA RELLENO AUTOMATICO DE INFO EN DICTAMENES\r\napp.get('/obtener-informacion-folio/:folioSolicitud',authPage('Admin'), (req, res) => {\r\n    const folioSolicitud = req.params.folioSolicitud;\r\n    req.session.folioSolicitudDictamen = folioSolicitud;\r\n    const query = 'SELECT v.idVale, v.Equipo, v.NoSerieEquipo, v.MarcaEquipo, v.ModeloEquipo, u.Correo FROM vales v JOIN solicitudes s ON v.FolioSolicitud = s.FolioSolicitud JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE v.FolioSolicitud = ?';\r\n\r\n    connection.query(query, [folioSolicitud], (error, results) => {\r\n        if (error) {\r\n            console.error(error);\r\n            res.status(500).json({ error: 'Error al obtener la información del folio' });\r\n        } else {\r\n            if (results.length > 0) {\r\n                // Si se encontraron resultados, devuelve la información como JSON al cliente\r\n                console.log(results);\r\n                req.session.correoDictamen = results[0].Correo;\r\n                req.session.idValeDictamen = results[0].idVale;\r\n                res.json(results[0]); // Suponiendo que solo necesitas el primer resultado\r\n            } else {\r\n                // Si no se encontraron resultados, puedes devolver un objeto vacío o un mensaje\r\n                res.json({ message: 'No se encontró información para el folio proporcionado' });\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n//estadisticas\r\napp.post('/generarEstadisticas', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha };\r\n    res.redirect('/estadisticas');\r\n});\r\n\r\n//reportes\r\napp.post('/generarReportes', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area };\r\n    res.redirect('/reportes');\r\n});\r\n\r\n// Define la ruta de la plantilla\r\nconst plantillaPath = path.join(__dirname, 'views', 'plantillaReportes.ejs');\r\n\r\n// Ruta para generar el PDF\r\napp.post('/generarPDF', async (req, res, next) => {\r\n    try {\r\n        // Obtén los datos de la sesión\r\n        const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas;\r\n\r\n        // Realizar la consulta SQL para obtener los datos de la base de datos\r\n        const fecha = desdeFecha;\r\n        const fechaFinal = hastaFecha;\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n\r\n        // Renderiza la plantilla con los datos de la sesión y los datos de la base de datos\r\n        const htmlContent = await ejs.renderFile(plantillaPath, {\r\n            tipo,\r\n            desdeFecha,\r\n            hastaFecha,\r\n            titulo,\r\n            nombre,\r\n            oficio,\r\n            exp,\r\n            area,\r\n            objetos: queryParaReportes\r\n        });\r\n\r\n        // Crea una instancia de Puppeteer\r\n        const browser = await puppeteer.launch();\r\n        const page = await browser.newPage();\r\n\r\n        // Establece el tamaño de la página y carga el contenido HTML\r\n        await page.setViewport({ width: 1200, height: 800 });\r\n        await page.setContent(htmlContent);\r\n\r\n        // Genera el PDF\r\n        const pdf = await page.pdf({ format: 'A4', landscape: true });\r\n\r\n        // Cierra el navegador de Puppeteer\r\n        await browser.close();\r\n\r\n        // Envía el PDF como respuesta\r\n        res.contentType('application/pdf');\r\n        res.send(pdf);\r\n    } catch (error) {\r\n        // Maneja cualquier error que ocurra\r\n        console.error('Error al generar el PDF:', error);\r\n        res.status(500).send('Error al generar el PDF');\r\n    }\r\n});\r\n\r\n//10 Hacer registro\r\napp.post('/registerP',authPage('Admin'),async(req, res) => {\r\n    const user = req.body.username;\r\n    const name = req.body.name;\r\n    const pass = req.body.password;\r\n    const rol = req.body.rol;\r\n    const genero = req.body.genero;\r\n    const correo  = req.body.correo;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    \r\n    connection.query('INSERT INTO usuarios SET ?', { NombreUsuario: user, Nombre: name, Contrasena: passwordHaash, Rol: rol, Genero: genero, Correo: correo }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            if (error.code === 'ER_DUP_ENTRY') {\r\n                res.render('alerta', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"¡Debe elegir otro nombre de usuario!\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: false,\r\n                    timer: 1500,\r\n                    ruta: 'panelAdmin'\r\n                });\r\n            }\r\n        } else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n})\r\n\r\napp.post('/registerT',authPage('Admin'),async(req, res) => { ///SEPARAR EN OTRA PESTAÑA\r\n    const nombre = req.body.nombreT;\r\n    const apellidos = req.body.apellidos;\r\n    const numeroT = req.body.noTrabajador;\r\n    const email = req.body.email;\r\n    const telefono = req.body.telef;\r\n    const IdUsuario  = req.body.IdUsuario;\r\n    const fecha = obtenerFechaActual();  \r\n    connection.query('INSERT INTO tecnicos SET ?', { Nombre: nombre, Apellidos: apellidos, NoTrabajador: numeroT, Correo: email, Telefono: telefono, IdUsuario: IdUsuario,FechaRegistro: fecha }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n        }\r\n             else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n})\r\n\r\n//10 Hacer solicitud de soporte\r\napp.post('/solicitud', async(req, res) => {\r\n    const usuario = req.session.idUsuario; //\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    console.log(otroInput);\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:usuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,req.session.correoUser);\r\n            const idSolicitud = results.insertId;\r\n            console.log(idSolicitud);\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${req.session.idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelUsuario'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\napp.post('/solicitudAdmin',authPage('Admin'), async(req, res) => {\r\n    const usuario = req.body.usuarios;\r\n    const [idUsuario, correoUsuario] = usuario.split('|');\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:idUsuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,correoUsuario);\r\n            const idSolicitud = results.insertId;\r\n            console.log(idSolicitud);\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//11 Autenticacion\r\napp.post('/auth', async (req,res)=> {\r\n    const user = req.body.username;\r\n    const pass = req.body.password;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    if(user && pass){\r\n        connection.query('SELECT * FROM usuarios WHERE NombreUsuario = ?', [user], async (error, results)=>{\r\n            if(results.length == 0 || !(await bcryptjs.compare(pass, results[0].Contrasena))){ \r\n                //si es igual a 0 o no coincide la contraseña, en la comparacion de bcrypt se debe poner el nombre de la variable y despues [0]. el nombre del campo contraseña en la db\r\n                res.render('login', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"Usuario y/o contrseña incorrectas\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: true,\r\n                    timer: false,\r\n                    ruta :'login'\r\n                });\r\n            }else{\r\n                req.session.loggedin = true;\r\n                req.session.correoUser = results[0].Correo;\r\n                req.session.idUsuario = results[0].IdUsuario;\r\n                req.session.name = results[0].Nombre;\r\n                req.session.rol = results[0].Rol;\r\n                if (results[0].Rol === 'Admin') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelAdmin'  // Redirigir a la página de panelAdmin\r\n                    });\r\n                } else if (results[0].Rol === 'Tecnico') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelTecnicos'  // Redirigir a la página de panelTecnico\r\n                    });\r\n                } else {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelUsuario'  // Redirigir a la página de solicitud\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }else{\r\n        res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"¡Porfavor ingrese un usuario y/o contraseña!\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 1500,\r\n            ruta :'login'\r\n        });\r\n    }\r\n});\r\n\r\n//VALES\r\napp.post('/vales', async(req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioS = req.body.folios;\r\n    const [folioSolicitud, correoUsuarioFolio] = folioS.split('|');\r\n    let equipo = req.body.listaEquiposCheck || '';\r\n    const otroInput = req.body.otroInput2 || '';  \r\n    const noSerie = req.body.serie;\r\n    const marca = req.body.marca;\r\n    const modelo = req.body.modelo;\r\n    const estado = req.body.estatus;\r\n    const caracteris = req.body.caracteristicas;\r\n    const [idTecnico, correoTecnico] = req.body.tecnico.split('|');\r\n    console.log('ABAJO DEBE APARECER EL ID DEL TECNICO')\r\n    console.log(idTecnico) \r\n    console.log(correoTecnico)\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    \r\n    const fechaHoraActual = new Date().toLocaleString();\r\n    const folioSeleccionado = folioSolicitud;\r\n    const templatePath = path.join(__dirname, 'views', 'generarVale.ejs');\r\n    \r\n    // Renderizar la plantilla HTML\r\n    const htmlContent = await ejs.renderFile(templatePath, {\r\n        folio: folioSeleccionado,\r\n        equipos: req.body.equipos,\r\n        serie: req.body.serie,\r\n        marca: req.body.marca,\r\n        modelo: req.body.modelo,\r\n        caracteristicas: req.body.caracteristicas,\r\n        estatus: req.body.estatus,\r\n        revision: req.body.revision,\r\n        fechaHoraActual: fechaHoraActual\r\n    });\r\n\r\n    // Crear una instancia de Puppeteer y generar el PDF\r\n    const browser = await puppeteer.launch();\r\n    const page = await browser.newPage();\r\n    const pdfPath = path.join(__dirname, 'docs', `ValeST24-${folioSeleccionado}.pdf`);\r\n\r\n    await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n    await page.pdf({ path: pdfPath, format: 'A4' });\r\n    await browser.close();\r\n\r\n    // Enviar respuesta al cliente\r\n\r\n    res.render('alerta', {\r\n        alert: true,\r\n        alertTitle: 'Éxito',\r\n        alertMessage: 'PDF generado y guardado correctamente',\r\n        alertIcon: 'success',\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n        ruta: 'panelAdmin'\r\n    });   \r\n\r\n    // Actualizar el estado de la solicitud en la base de datos\r\n    const cambioEstado = \"Asignada\";\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ? ', [cambioEstado, folioSolicitud], async(error, results)=> {\r\n        if (error) {\r\n            console.log(error);\r\n        } else {\r\n            // Insertar registros en la base de datos\r\n            connection.query('INSERT INTO asignaciones SET ?', { IdSolicitud: folioSolicitud, IdTecnico: idTecnico }, async(error, results)=> {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    const IdAsignacion = results.insertId;\r\n                    await query(`UPDATE solicitudes SET IdAsignacion = ${IdAsignacion} WHERE FolioSolicitud = ${folioSolicitud}`);\r\n                    connection.query('INSERT INTO vales SET ?', {FolioSolicitud:folioSolicitud,Fecha:fecha,Equipo:equipo, NoSerieEquipo:noSerie, MarcaEquipo:marca, ModeloEquipo:modelo,Caracteristicas: caracteris ,Estado: estado,NombreUsuario:usuario}, async(error, results)=> {\r\n                        if (error) {\r\n                            console.log(error);\r\n                        } else {\r\n                            enviarMail(3,correoUsuarioFolio);\r\n                            enviarMail(5,correoTecnico);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n});\r\n\r\n// Función para obtener la fecha y hora actual en formato MySQL\r\nfunction obtenerFechaHoraActual() {\r\n    const fecha = new Date();\r\n    const año = fecha.getFullYear();\r\n    const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n    const dia = String(fecha.getDate()).padStart(2, '0');\r\n\r\n    return `${año}-${mes}-${dia}`;\r\n}\r\n\r\n// DICTAMENES\r\napp.post('/guardar-datos-y-generar-pdf', async (req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioSolicitudDictamen = req.session.folioSolicitudDictamen;\r\n    const vale = req.body.valeId;\r\n    console.log(folioSolicitudDictamen);\r\n    const equipoDictamen = req.body.equipoDictamen;\r\n    const marcaEquipo = req.body.marcaEquipo;\r\n    const modeloEquipo = req.body.modeloEquipo;\r\n    const noSerieEquipo = req.body.noSerieEquipo;\r\n    const estado = req.body.estado;\r\n    const tipoDictamen = req.body.tipoDictamen;\r\n    const caracDictamen = req.body.caracDictamen;\r\n    const observacionesDictamen = req.body.observacionesDictamen;\r\n    const descripcionDictamen = req.body.descripcionDictamen;\r\n\r\n    connection.query('INSERT INTO dictamenes SET ?', {\r\n        Encargado: usuario,\r\n        Fecha: fecha,\r\n        FolioSolicitud: folioSolicitudDictamen,\r\n        idVale: vale,\r\n        Equipo: equipoDictamen,\r\n        MarcaEquipo: marcaEquipo,\r\n        ModeloEquipo: modeloEquipo,\r\n        NoSerieEquipo: noSerieEquipo,\r\n        Estado: estado,\r\n        DictamenFinal: tipoDictamen,\r\n        caracDictamen: caracDictamen,\r\n        Observaciones: observacionesDictamen,\r\n        Descripcion: descripcionDictamen\r\n    }, async (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.status(500).send('Error al guardar los datos en la base de datos');\r\n        } else {\r\n            const idDictamen = results.insertId;\r\n\r\n            // Crear una instancia de Puppeteer\r\n            const browser = await puppeteer.launch();\r\n            const page = await browser.newPage();\r\n\r\n            // Ruta de la plantilla HTML\r\n            const templatePath = path.join(__dirname, 'views', 'generarDictamen.ejs');\r\n            console.log('Fecha a renderizar en la plantilla:', fecha);\r\n            const htmlContent = await ejs.renderFile(templatePath, {\r\n                dictamenes: [{\r\n                    idDictamen,\r\n                    FolioSolicitud: folioSolicitudDictamen,\r\n                    Fecha: fecha,\r\n                    Equipo: equipoDictamen,\r\n                    MarcaEquipo: marcaEquipo,\r\n                    ModeloEquipo: modeloEquipo,\r\n                    NoSerieEquipo: noSerieEquipo,\r\n                    Estado: estado,\r\n                    DictamenFinal: tipoDictamen,\r\n                    caracDictamen: caracDictamen,\r\n                    Observaciones: observacionesDictamen,\r\n                    Descripcion: descripcionDictamen\r\n                }],\r\n                fecha: fecha\r\n            });\r\n\r\n            await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n\r\n            // Ruta y nombre del archivo PDF\r\n            const pdfFileName = `DT24-${folioSolicitudDictamen}.pdf`;\r\n            const pdfFilePath = path.join(__dirname, './docs/', pdfFileName);\r\n\r\n            // Configurar la orientación a horizontal\r\n            const options = {\r\n                format: 'A4',\r\n                landscape: true \r\n            };\r\n\r\n\r\n            // Generar el PDF\r\n            await page.pdf({ path: pdfFilePath, ...options });\r\n\r\n            // Cerrar el navegador Puppeteer\r\n            await browser.close();\r\n\r\n            console.log('Archivo PDF generado y guardado correctamente');\r\n            console.log(req.session.correoDictamen)\r\n            enviarMail(4,req.session.correoDictamen);\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: 'Éxito',\r\n                alertMessage: 'PDF generado y guardado correctamente',\r\n                alertIcon: 'success',\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n\r\n    function obtenerFechaHoraActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n});\r\n\r\n//ACTUALIZAR ESTADO DE LAS SOLICITUDES\r\napp.post('/actualizar-estado', async (req, res) => {\r\n    const { folio, nuevoEstado } = req.body;\r\n    const fecha = obtenerFechaActual().toString();\r\n    const hora = obtenerHoraActual().toString();\r\n\r\n    // Consulta para actualizar el estado en la tabla solicitudes\r\n    const cambiarEstado = 'UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?';\r\n    // Consulta para insertar el cambio en el log, solo si hay un cambio en el estado\r\n    const logQuery = 'INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (?, ?, ?, ?, ?)';\r\n    // Consulta para obtener el estado original antes de la actualización\r\n    const obtenerEstadoOriginal = 'SELECT s.Estado, s.IdUsuario, u.Correo FROM solicitudes s INNER JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE s.FolioSolicitud = ?';\r\n\r\n    connection.query(obtenerEstadoOriginal, [folio], async (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el estado original:', error);\r\n            res.status(500).json({ error: 'Error al obtener el estado original' });\r\n        } else {\r\n            const usuarioEmail = results[0].Correo;\r\n            console.log(usuarioEmail);\r\n            console.log('ARRRIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');\r\n            const estadoOriginal = results[0].Estado;\r\n            // Ejecuta la consulta para cambiar el estado\r\n            connection.query(cambiarEstado, [nuevoEstado, folio], (updateError, updateResults) => {\r\n                if (updateError) {\r\n                    console.error('Error al actualizar la base de datos:', updateError);\r\n                    res.status(500).json({ error: 'Error al actualizar el estado en la base de datos' });\r\n                } else {\r\n                    console.log('Estado actualizado en la base de datos:', updateResults);\r\n                    // Inserta en el log solo si hay un cambio en el estado\r\n                    if (estadoOriginal !== nuevoEstado) {\r\n                        connection.query(logQuery, [req.session.idUsuario, folio, nuevoEstado, fecha, hora], (logError, logResults) => {\r\n                            if (logError) {\r\n                                console.error('Error al insertar en el log:', logError);\r\n                            } else {\r\n                                enviarMail(2,usuarioEmail);\r\n                                console.log('Cambio registrado en el log:', logResults);\r\n                            }\r\n                        });\r\n                    }\r\n                    res.json({ success: true, mensaje: 'Estado actualizado exitosamente' });\r\n                }\r\n            });\r\n        }\r\n    });\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//DESCARGAR PDF DESDE EL HISTORIAL\r\n//DESCARGAR VALE\r\napp.get('/descargarPDFvale', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `ValeST24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Vale no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//DESCARGAR DICTAMEN\r\napp.get('/descargarPDFdictamen', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `DT24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Dictamen no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//Actualizar el estado de las asignaciones\r\napp.post('/actualizarEstadoSolicitud', async (req, res) => {\r\n    const folioSolicitud = req.body.folioSolicitud;\r\n    const nuevoEstado = req.body.nuevoEstado;\r\n\r\n    // Actualiza el estado de la solicitud en la base de datos\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?', [nuevoEstado, folioSolicitud], (error, results) => {\r\n        if (error) {\r\n            console.error('Error al actualizar el estado de la solicitud:', error);\r\n            res.status(500).send('Error interno del servidor');\r\n        } else {\r\n            // Si se actualizó correctamente, muestra un mensaje de éxito con SweetAlert2\r\n            res.status(200).send('Estado actualizado correctamente');\r\n        }\r\n    });\r\n});\r\n\r\n// Creación de diagnósticos técnicos y soluciones aplicadas\r\napp.post('/crearDiagnostico', async (req, res) => {\r\n    const folioSeleccionado = req.body.folios; // Obtener el folio seleccionado del cuerpo de la solicitud\r\n    const diagnosticoT = req.body.diagnosticoT;\r\n    const solucion = req.body.solucion;\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n\r\n    // Consulta para obtener el IdTecnico de la tabla asignaciones\r\n    connection.query('SELECT IdTecnico FROM asignaciones WHERE IdSolicitud = ?', [folioSeleccionado], (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el IdTecnico:', error);\r\n            // Mostrar un mensaje de error utilizando SweetAlert2\r\n            res.render('panelTecnicos', {\r\n                alert: {\r\n                    alertTitle: 'Error',\r\n                    alertMessage: 'Error interno del servidor',\r\n                    alertIcon: 'error',\r\n                    showConfirmButton: true,\r\n                    timer: null,\r\n                    ruta: 'panelTecnicos' // Redirige a la misma página\r\n                }\r\n            });\r\n        } else {\r\n            const idTecnico = results[0].IdTecnico; // Se obtiene el IdTecnico de los resultados de la consulta\r\n            console.log('IdTecnico obtenido:', idTecnico);\r\n\r\n            // Inserción del diagnóstico y solución en la tabla asignaciones\r\n            connection.query('UPDATE asignaciones SET Diagnostico = ?, Solucion = ? WHERE IdSolicitud = ?',\r\n                [diagnosticoT, solucion, folioSeleccionado], (error, results) => {\r\n                    if (error) {\r\n                        console.error('Error al actualizar la tabla de asignaciones:', error);\r\n                        // Mostrar un mensaje de error utilizando SweetAlert2\r\n                        res.render('panelTecnicos', {\r\n                            alert: {\r\n                                alertTitle: 'Error',\r\n                                alertMessage: 'Error al actualizar la tabla de asignaciones',\r\n                                alertIcon: 'error',\r\n                                showConfirmButton: false,\r\n                                timer: 1500,\r\n                                ruta: 'panelTecnicos' // Redirige a la misma página\r\n                            }\r\n                        });\r\n                    } else {\r\n                        console.log('Diagnóstico y solución actualizados correctamente');\r\n\r\n                        // Consulta para obtener las asignaciones actualizadas\r\n                        connection.query('SELECT * FROM asignaciones WHERE IdTecnico = ?', [idTecnico], (error, asignaciones) => {\r\n                            if (error) {\r\n                                console.error('Error al obtener las asignaciones:', error);\r\n                                // Mostrar un mensaje de error utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Error',\r\n                                        alertMessage: 'Error al obtener las asignaciones',\r\n                                        alertIcon: 'error',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                console.log('Asignaciones obtenidas correctamente');\r\n                                // Mostrar un mensaje de éxito utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Éxito',\r\n                                        alertMessage: 'Diagnóstico y solución actualizados correctamente',\r\n                                        alertIcon: 'success',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    },\r\n                                    asignaciones: asignaciones // Pasar las asignaciones al archivo EJS\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    });\r\n\r\n    // Función para obtener la fecha actual en formato AAAA-MM-DD\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n\r\n    // Función para obtener la hora actual en formato HH:MM:SS\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n        return `${horas}:${minutos}:${segundos}`;\r\n    }\r\n});\r\n\r\n//12 Auth page\r\napp.get('/',(req, res)=>{\r\n\r\n    if(req.session.loggedin){\r\n        res.render('login',{\r\n            login: true,\r\n            name: req.session.name\r\n        });\r\n    }else{\r\n        res.render('login',{\r\n            login: false,\r\n            name: 'Debe iniciar sesión'\r\n        })\r\n    }\r\n})\r\n\r\n//13 Logout\r\napp.get('/logout', (req, res)=>{\r\n    req.session.destroy(()=>{\r\n        res.redirect('/login'); //Redirige al index\r\n    });\r\n})\r\n\r\n//Hacemos que funcione el servidor local en el puerto\r\napp.listen(3000, (req, res)=> {\r\n    console.log('SERVER RUNNING IN http://localhost:3000');\r\n});\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app.js b/app.js
---- a/app.js	(revision 867d41cfd863f76a82ec7d0e3bf9dacc3296e92f)
-+++ b/app.js	(date 1715003850263)
-@@ -462,7 +462,7 @@
-         equipo += (equipo ? ':' : '') + otroInput;
-     }
-     console.log(otroInput);
--    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:usuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion}, async(error, results)=> {
-+    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:usuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion, IdAsignacion:0}, async(error, results)=> {
-         if(error){
-             console.log(error);
-         }else{
-@@ -523,7 +523,7 @@
-     if (otroInput) {
-         equipo += (equipo ? ':' : '') + otroInput;
-     }
--    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:idUsuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion}, async(error, results)=> {
-+    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:idUsuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion, IdAsignacion:0}, async(error, results)=> {
-         if(error){
-             console.log(error);
-         }else{
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app.js\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/estadisticas.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/estadisticas.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/generarDictamen.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/generarDictamen.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ComposerSettings\">\n    <execution />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"$USER_HOME$/Library/Application Support/Herd/bin/php\" />\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2fyKfmjlEw7LogYHpH60cK6yRPW\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;dev&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/env\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-php-predefined-ba97393d7c68-6f8e3395a2b4-com.jetbrains.php.sharedIndexes-PS-233.15026.12\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"\" />\n      <created>1714767983038</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714767983038</updated>\n      <workItem from=\"1714767984758\" duration=\"553000\" />\n      <workItem from=\"1714794178238\" duration=\"660000\" />\n      <workItem from=\"1714795177084\" duration=\"1172000\" />\n      <workItem from=\"1714838497315\" duration=\"6121000\" />\n      <workItem from=\"1714880657411\" duration=\"5271000\" />\n      <workItem from=\"1714939940395\" duration=\"14014000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"UnknownFeatures\">\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\".env\" />\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.ejs\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 867d41cfd863f76a82ec7d0e3bf9dacc3296e92f)
-+++ b/.idea/workspace.xml	(date 1715008841084)
-@@ -4,12 +4,9 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="b75b1334-c68d-4ec7-9620-54811fca6eb8" name="Changes" comment="">
-+    <list default="true" id="b75b1334-c68d-4ec7-9620-54811fca6eb8" name="Changes" comment="Estadísticas listo">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/app.js" beforeDir="false" afterPath="$PROJECT_DIR$/app.js" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/views/estadisticas.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/estadisticas.ejs" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/views/generarDictamen.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/generarDictamen.ejs" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/views/panelAdmin.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/panelAdmin.ejs" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -76,8 +73,18 @@
-       <workItem from="1714795177084" duration="1172000" />
-       <workItem from="1714838497315" duration="6121000" />
-       <workItem from="1714880657411" duration="5271000" />
--      <workItem from="1714939940395" duration="14014000" />
-+      <workItem from="1714939940395" duration="16010000" />
-+      <workItem from="1715002742994" duration="1377000" />
-     </task>
-+    <task id="LOCAL-00001" summary="Estadísticas listo">
-+      <option name="closed" value="true" />
-+      <created>1714963167888</created>
-+      <option name="number" value="00001" />
-+      <option name="presentableId" value="LOCAL-00001" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1714963167888</updated>
-+    </task>
-+    <option name="localTasksCounter" value="2" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -89,5 +96,7 @@
-   </component>
-   <component name="VcsManagerConfiguration">
-     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
-+    <MESSAGE value="Estadísticas listo" />
-+    <option name="LAST_COMMIT_MESSAGE" value="Estadísticas listo" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53_[Changes]/shelved.patch	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ /dev/null	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
@@ -1,188 +0,0 @@
-Index: views/estadisticas.ejs
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Estadísticas</title>\n    <link rel=\"stylesheet\" href=\"resources/css/estadisticas.css\">\n</head>\n<body>\n    <div class=\"logo-contenedor\">\n                <img src=\"resources/images/uac_logo.png\" alt=\"Logo Izquierdo\" class=\"logo-izquierdo\">\n                <h1 class=\"titulo-sitio\">CIC Assistance</h1>\n                <img src=\"resources/images/facu_logo.png\" alt=\"Logo Derecho\" class=\"logo-derecho\">\n            </div>\n    <div class=\"estadisticasContenedor\">\n\n        <br>\n        <h2>Estadísticas</h2>\n        <div>\n            <div>\n                <p class=\"labelMayor\">El tipo de solicitud es: </p><p><%= tipo %></p>\n            </div>\n            <div class=\"fechas\">\n                <p class=\"labelMayor\">Las fechas seleccionadas son</p>\n                <p class=\"labelMayor\">desde: </p><p><%= desdeFecha %></p>\n                <p class=\"labelMayor\">hasta: </p><p><%= hastaFecha %></p>\n            </div>\n\n                <% const datos = objetos.map(objeto => objeto.FolioSolicitud); %>\n                <% const datos2 = conteo.map(contado => contado.total); %>\n                <% const datosUsuarios = usuariosPorSoli.map(numSoli => numSoli.NumeroSolicitudes); %>\n                <% const asigTecnicos = asignacionesTecnicos.map(asignacion => asignacion.NumeroSolicitudesTecnico); %>\n                <% const dictamenSolucion = solucionesDictamen.map(solucion => solucion.NumeroSolicitudesDictamen); %>\n\n\n            <!-- Agrega aquí cualquier otra información estadística que desees mostrar -->\n        </div>\n        <div>\n            <canvas id=\"myChart\" width=\"200\" height=\"200\"></canvas>\n        </div>\n\n        <div>\n                <canvas id=\"myChart2\" width=\"200\" height=\"200\"></canvas>\n        </div>\n\n        <div>\n                <canvas id=\"myChart3\" width=\"200\" height=\"200\"></canvas>\n        </div>\n\n        <div>\n                <canvas id=\"myChart4\" width=\"200\" height=\"200\"></canvas>\n        </div>\n    </div>\n      \n      <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n      \n      <script>\n          document.addEventListener('DOMContentLoaded', function () {\n              // Obtén el contexto del lienzo donde se dibujará la gráfica\n              const ctx = document.getElementById('myChart').getContext('2d');\n\n              // Configura los datos de la gráfica utilizando los datos procesados\n              const data = {\n                  labels: [<% usuariosPorSoli.forEach(usuariosPorSoli => { %> '<%= usuariosPorSoli.NombreUsuario %>', <% }); %>], // Puedes cambiar las etiquetas según tus necesidades\n                  datasets: [{\n                      label: 'Total de <%= tipo %>', // Etiqueta de los datos\n                      data: [<%= datosUsuarios.join(',') %>], // Utiliza los datos procesados aquí\n                      backgroundColor: [\n                          'rgba(255, 99, 132, 0.2)',\n                          'rgba(54, 162, 235, 0.2)',\n                          'rgba(255, 206, 86, 0.2)',\n                          'rgba(75, 192, 192, 0.2)',\n                          'rgba(153, 102, 255, 0.2)'\n                      ],\n                      borderColor: [\n                          'rgba(255, 99, 132, 1)',\n                          'rgba(54, 162, 235, 1)',\n                          'rgba(255, 206, 86, 1)',\n                          'rgba(75, 192, 192, 1)',\n                          'rgba(153, 102, 255, 1)'\n                      ],\n                      borderWidth: 1\n                  }]\n              };\n\n              // Configura la instancia de la gráfica\n              const myChart = new Chart(ctx, {\n                  type: 'pie', // Tipo de gráfico\n                  data: data, // Configuración de los datos de la gráfica\n                  options: {\n                      maintainAspectRatio: false, // Desactiva el mantenimiento del aspecto\n                      aspectRatio: 2,\n                      scales: {\n                          y: {\n                              beginAtZero: true\n                          }\n                      }\n                  }\n              });\n              // Obtén el contexto del lienzo donde se dibujará la segunda gráfica\n              const ctx2 = document.getElementById('myChart2').getContext('2d');\n\n              // Configura los datos de la segunda gráfica\n              const data2 = {\n                  labels: [<% conteo.forEach(conteo => { %> '<%= conteo.estado %>', <% }); %>],\n                  datasets: [{\n                      label: 'Total',\n                      data: [<%= datos2 %>], // Aquí deberías agregar tus datos para la segunda gráfica\n                      backgroundColor: [\n                          'rgba(255, 99, 132, 0.2)',\n                          'rgba(54, 162, 235, 0.2)',\n                          'rgba(255, 206, 86, 0.2)',\n                          'rgba(75, 192, 192, 0.2)',\n                          'rgba(153, 102, 255, 0.2)'\n                      ],\n                      borderColor: [\n                          'rgba(255, 99, 132, 1)',\n                          'rgba(54, 162, 235, 1)',\n                          'rgba(255, 206, 86, 1)',\n                          'rgba(75, 192, 192, 1)',\n                          'rgba(153, 102, 255, 1)'\n                      ],\n                      borderWidth: 1\n                  }]\n              };\n\n              // Configura la instancia de la segunda gráfica\n              const myChart2 = new Chart(ctx2, {\n                  type: 'bar',\n                  data: data2,\n                  options: {\n                      maintainAspectRatio: false,\n                      aspectRatio: 2,\n                      scales: {\n                          y: {\n                              beginAtZero: true\n                          }\n                      }\n                  }\n              });\n            // Obtén el contexto del lienzo donde se dibujará la tercera gráfica\n            const ctx3 = document.getElementById('myChart3').getContext('2d');\n\n            // Configura los datos de la tercera gráfica\n            const data3 = {\n                labels: [<% asignacionesTecnicos.forEach(asignacionesTecnicos => { %> '<%= asignacionesTecnicos.Tecnico %>', <% }); %>],\n                datasets: [{\n                    label: 'Total',\n                    data: [<%= asigTecnicos.join(',') %>], // Aquí deberías agregar tus datos para la segunda gráfica\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            };\n\n            // Configura la instancia de la segunda gráfica\n            const myChart3 = new Chart(ctx3, {\n                type: 'doughnut',\n                data: data3,\n                options: {\n                    maintainAspectRatio: false,\n                    aspectRatio: 2,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n            // Obtén el contexto del lienzo donde se dibujará la tercera gráfica\n            const ctx4 = document.getElementById('myChart4').getContext('2d');\n\n            // Configura los datos de la tercera gráfica\n            const data4 = {\n                labels: [<% solucionesDictamen.forEach(solucionesDictamen => { %> '<%= solucionesDictamen.DictamenFinal %>', <% }); %>],\n                datasets: [{\n                    label: 'Total',\n                    data: [<%= dictamenSolucion.join(',') %>], // Aquí deberías agregar tus datos para la segunda gráfica\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            };\n\n            // Configura la instancia de la segunda gráfica\n            const myChart4 = new Chart(ctx4, {\n                type: 'bar',\n                data: data4,\n                options: {\n                    maintainAspectRatio: false,\n                    aspectRatio: 2,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n          });\n      </script>\n</body>\n</html>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/views/estadisticas.ejs b/views/estadisticas.ejs
---- a/views/estadisticas.ejs	(revision 041dd9426df70a31abb493849b5cb39238d811ce)
-+++ b/views/estadisticas.ejs	(date 1715060892231)
-@@ -11,7 +11,8 @@
-                 <img src="resources/images/uac_logo.png" alt="Logo Izquierdo" class="logo-izquierdo">
-                 <h1 class="titulo-sitio">CIC Assistance</h1>
-                 <img src="resources/images/facu_logo.png" alt="Logo Derecho" class="logo-derecho">
--            </div>
-+    </div>
-+
-     <div class="estadisticasContenedor">
- 
-         <br>
-@@ -31,6 +32,8 @@
-                 <% const datosUsuarios = usuariosPorSoli.map(numSoli => numSoli.NumeroSolicitudes); %>
-                 <% const asigTecnicos = asignacionesTecnicos.map(asignacion => asignacion.NumeroSolicitudesTecnico); %>
-                 <% const dictamenSolucion = solucionesDictamen.map(solucion => solucion.NumeroSolicitudesDictamen); %>
-+                <% const soliSinDic = solicitudesSinDictamen.map(solucionSin => solucionSin.NumSolicitudesCerradasSinDictamen); %>
-+                <% const soliConDic = solicitudesConDictamen.map(solucionCon => solucionCon.NumSolicitudesCerradasConDictamenYVales); %>
- 
- 
-             <!-- Agrega aquí cualquier otra información estadística que desees mostrar -->
-@@ -49,11 +52,14 @@
- 
-         <div>
-                 <canvas id="myChart4" width="200" height="200"></canvas>
-+        </div>
-+        <div>
-+                <canvas id="myChart5" width="200" height="200"></canvas>
-         </div>
-     </div>
--      
-+
-       <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
--      
-+
-       <script>
-           document.addEventListener('DOMContentLoaded', function () {
-               // Obtén el contexto del lienzo donde se dibujará la gráfica
-@@ -214,6 +220,47 @@
-                     maintainAspectRatio: false,
-                     aspectRatio: 2,
-                     scales: {
-+                        y: {
-+                            beginAtZero: true
-+                        }
-+                    }
-+                }
-+            });
-+            // Obtén el contexto del lienzo donde se dibujará la tercera gráfica
-+            const ctx5 = document.getElementById('myChart5').getContext('2d');
-+
-+            // Configura los datos de la tercera gráfica
-+            const data5 = {
-+                labels: ['Solicitudes sin Dictamen', 'Solicitudes con Dictamen'],
-+                datasets: [{
-+                    label: 'Total',
-+                    data: [<%= soliSinDic %>, <%= soliConDic %>], // Aquí deberías agregar tus datos para la segunda gráfica
-+                    backgroundColor: [
-+                        'rgba(255, 99, 132, 0.2)',
-+                        'rgba(54, 162, 235, 0.2)',
-+                        'rgba(255, 206, 86, 0.2)',
-+                        'rgba(75, 192, 192, 0.2)',
-+                        'rgba(153, 102, 255, 0.2)'
-+                    ],
-+                    borderColor: [
-+                        'rgba(255, 99, 132, 1)',
-+                        'rgba(54, 162, 235, 1)',
-+                        'rgba(255, 206, 86, 1)',
-+                        'rgba(75, 192, 192, 1)',
-+                        'rgba(153, 102, 255, 1)'
-+                    ],
-+                    borderWidth: 1
-+                }]
-+            };
-+
-+            // Configura la instancia de la segunda gráfica
-+            const myChart5 = new Chart(ctx5, {
-+                type: 'pie',
-+                data: data5,
-+                options: {
-+                    maintainAspectRatio: false,
-+                    aspectRatio: 2,
-+                    scales: {
-                         y: {
-                             beginAtZero: true
-                         }
-Index: app.js
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>//Invocamos express\r\nconst express = require('express');\r\nconst rateLimit = require('express-rate-limit');//Para proteger ataques ddos o limitar la cantidad de solicitudes\r\nconst app = express();\r\nconst path = require('path');\r\nconst ejs = require('ejs');\r\nconst fs = require('fs');\r\nconst puppeteer = require('puppeteer');\r\nconst {authPage,authSub} = require('./middleware');\r\nconst nodemailer = require('nodemailer');\r\n\r\n//seteamos urlencoded para capturar los datos del formulario\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(express.json());\r\n\r\n//Invocar a dotenv\r\nconst dotenv = require('dotenv');\r\ndotenv.config({path: './env/.env'})\r\n\r\n//Setear el directorio public\r\napp.use('/resources', express.static('public'));\r\napp.use('/resources', express.static(__dirname + '/public'));\r\n\r\n///Establecer el motor de plantillas\r\napp.set('view engine', 'ejs');\r\n\r\n//6.- invocar a bcrypt\r\nconst bcryptjs = require('bcryptjs');\r\n\r\n//7.- Var de sesion\r\nconst session = require('express-session');\r\napp.use(session({\r\n    secret: 'secret',\r\n    resave: true,\r\n    saveUninitialized:true\r\n}));\r\n\r\n//Invocar a rate-limit para proteger contra ataques de muchas solicitudes al mismo tiempo\r\nconst limiter = rateLimit({\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    max: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)\r\n    standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n    legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n  });\r\napp.use(limiter);\r\n\r\n//8.- Invocar conexion a DB\r\nconst connection = require('./database/db');\r\nconst { assign } = require('nodemailer/lib/shared');\r\nconsole.log(__dirname);\r\n\r\n//FUNCION PARA ENVIAR NOTIFICACIONES POR EMAIL\r\nenviarMail = async(opcion,correoObjetivo)=>{\r\n    const config = {\r\n        host : 'smtp.gmail.com',\r\n        port : 587,\r\n        auth : {\r\n            user: process.env.SMTP_USER,\r\n            pass: process.env.SMTP_PASS\r\n        }\r\n    }\r\n\r\n    let textoCorreo;\r\n    let textAsunto;\r\n    if (opcion === 1) {\r\n        textAsunto = 'Solicitud de soporte creada'\r\n        textoCorreo = 'Ha realizado una solicitud de soporte técnico al sistema CIC Assistance, puede checar el estatus de su solicitud en su historial de solicitudes a traves de la misma página donde realizó la solicitud';\r\n    } else if (opcion === 2) {\r\n        textAsunto = 'Actualización estatus en solicitud'\r\n        textoCorreo = 'Ha cambiado el estatus de tu solicitud de soporte técnico, revisa tu portal cic assistance para obtener mas información';\r\n    } else if(opcion === 3){\r\n        textAsunto = 'Vale creado'\r\n        textoCorreo = 'Se ha creado el vale a su solicitud de soporte técnico puede descargarlo a traves del portal cic assistance en su navegador web';\r\n    }else if(opcion === 4){\r\n        textAsunto = 'Dictamen sobre solicitud'\r\n        textoCorreo = 'Se ha determinado el dictamen a su solicitud de soporte técnico, puede revisar mas detalles del dictamen en su portal cic assistance y puede pasar por su equipo al Centro de Computo';\r\n    }else if(opcion === 5){\r\n        textAsunto = 'Solicitud Asignada'\r\n        textoCorreo = 'Se le ha asignado una nueva solicitud de soporte técnico porfavor entre a su portal CIC Assitance para poder ver mas información';\r\n   \r\n    }\r\n    const mensaje = {\r\n        from: 'cic.assistance2024@gmail.com',\r\n        to: correoObjetivo,\r\n        subject: textAsunto,\r\n        text: textoCorreo\r\n    }\r\n    const transport = nodemailer.createTransport(config);\r\n    const info = await transport.sendMail(mensaje);\r\n}\r\n\r\n\r\n\r\n//9.- Estableciendo las rutas\r\napp.get('/login', (req, res) => {\r\n    res.render('login');\r\n});\r\n\r\n\r\napp.get('/acercaDe', (req, res) => {\r\n    res.render('acerca_de');\r\n});\r\n\r\napp.get('/registerP',authPage('Admin'), (req, res) => {\r\n    res.render('register');\r\n});\r\napp.get('/registerT',authPage('Admin'), (req, res) => {\r\n    res.render('registerT');\r\n});\r\napp.get('/generarDictamen',authPage('Admin'), (req, res) => {\r\n    res.render('generarDictamen');\r\n});\r\napp.get('/alerta', (req, res) => {\r\n    res.render('alerta');\r\n});\r\n// Ruta GET para renderizar la vista de estadísticas ESTADISTICAS\r\napp.get('/estadisticas', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        console.log(fecha);\r\n        const folios = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n        const conteoEstados = await query(`SELECT Estado AS estado, COUNT(*) AS total FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}' GROUP BY Estado`);\r\n\r\n        const usuariosPorSoli = await query(`SELECT u.Nombre AS NombreUsuario, COUNT(a.FolioSolicitud) AS NumeroSolicitudes\r\n                                                FROM usuarios u\r\n                                                JOIN solicitudes s ON u.IdUsuario = s.IdUsuario\r\n                                                JOIN ${tipo} a ON s.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY u.NombreUsuario`);\r\n        const asignacionesTecnicos = await query(`SELECT t.Nombre AS Tecnico, COUNT(a.IdSolicitud) AS NumeroSolicitudesTecnico\r\n                                                FROM tecnicos t\r\n                                                JOIN asignaciones a ON t.IdTecnico = a.IdTecnico \r\n                                                JOIN solicitudes s ON s.FolioSolicitud = a.IdSolicitud WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY t.Nombre`);\r\n        const solucionesDictamen = await query(`SELECT d.DictamenFinal AS DictamenFinal, COUNT(a.FolioSolicitud) AS NumeroSolicitudesDictamen\r\n                                                FROM dictamenes d\r\n                                                JOIN ${tipo} a ON d.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE d.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY d.DictamenFinal`);\r\n        console.log(folios);\r\n        console.log(conteoEstados);\r\n        console.log(usuariosPorSoli);\r\n        console.log(asignacionesTecnicos);\r\n        console.log(solucionesDictamen);\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen });\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\napp.get('/reportes', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        console.log(fecha);\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`)\r\n        console.log(\"-----------------aaaaaaaaaaaaaaaaaaa--------------------\");\r\n        console.log(queryParaReportes)\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('reportes', { tipo, desdeFecha, hastaFecha, objetos: queryParaReportes, titulo, nombre, oficio, exp, area });\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\n//Panel de técnicos\r\napp.get('/panelTecnicos', authPage([\"Tecnico\", \"Admin\"]), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,\r\n            ruta: 'login'\r\n        });\r\n    }\r\n\r\n    try {\r\n        const usuario = req.session.idUsuario;\r\n        const asignaciones = await query(`SELECT DISTINCT s.FolioSolicitud,s.Fecha,s.Descripcion, v.Equipo,v.NoSerieEquipo,v.MarcaEquipo,v.ModeloEquipo, u.IdUsuario as IdUsuarioTecnico, us.IdUsuario as IdUsuarioSolicitante, us.Nombre as NombreSolicitante FROM solicitudes s JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud JOIN tecnicos t ON a.IdTecnico = t.IdTecnico JOIN usuarios u ON t.IdUsuario = u.IdUsuario JOIN usuarios us ON s.IdUsuario = us.IdUsuario WHERE u.IdUsuario = ${usuario}`);\r\n        \r\n        res.render('panelTecnicos', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            asignaciones: asignaciones // Pasando las asignaciones como variable local\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error al obtener las asignaciones:\", error);\r\n        res.status(500).send('Error interno del servidor');\r\n    }\r\n});\r\n\r\n// Panel de usuarios\r\napp.get('/panelUsuario',authPage([\"Usuario\",\"Admin\",\"Tecnico\"]), async (req, res) => {\r\n\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const usuario = req.session.idUsuario;\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const historialUsuario = `\r\n    SELECT s.FolioSolicitud AS FolioSolicitud, s.Fecha AS Fecha, s.Equipo AS Equipo, s.Estado AS Estado, CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Vale, CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud WHERE s.IdUsuario = ${usuario} ORDER BY FolioSolicitud DESC;\r\n    `;\r\n    const historial = await query(historialUsuario);\r\n    console.log(edificios);\r\n    res.render('panelUsuario', {\r\n        edificios: edificios,\r\n        login: req.session.loggedin,\r\n        name: req.session.name,\r\n        historial: historial,\r\n    });\r\n});\r\n\r\n\r\n//Panel de administradores\r\napp.get('/panelAdmin',authPage('Admin'), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const tecnicos = await query('SELECT * FROM tecnicos');\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const folios = await query('SELECT solicitudes.FolioSolicitud, solicitudes.IdUsuario, usuarios.Correo FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE NOT EXISTS ( SELECT 1 FROM vales WHERE vales.FolioSolicitud = solicitudes.FolioSolicitud )');\r\n    const usuarios = await query('SELECT * from usuarios');\r\n    const usuariosTecnicos = await query('SELECT * FROM usuarios WHERE rol = \"Tecnico\" AND NOT EXISTS ( SELECT 1 FROM tecnicos WHERE tecnicos.IdUsuario = usuarios.IdUsuario )');\r\n    const historialSoli = await query(`SELECT s.FolioSolicitud AS FolioSolicitud,s.Fecha AS Fecha,s.Hora AS Hora,u.Nombre AS NombreUsuario,s.Equipo AS Equipo,s.Estado AS Estado,CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' WHEN d.FolioSolicitud IS NOT NULL THEN 'No disponible' ELSE 'No Disponible' END AS Vale,CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario ORDER BY FolioSolicitud DESC; `);\r\n    const soloAbiertas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Abierto\"')\r\n    const soliPendiente = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Proceso\"')\r\n    const soliCerradas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Cerrado\"')\r\n    const soliEspera = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Espera\"')\r\n    const soliAsignada = await query('SELECT solicitudes.*,u.Correo, u.Nombre as UsuarioNombre, tecnicos.Nombre, tecnicos.IdTecnico FROM solicitudes LEFT JOIN usuarios u ON solicitudes.IdUsuario = u.IdUsuario LEFT JOIN asignaciones ON solicitudes.IdAsignacion = asignaciones.IdAsignacion LEFT JOIN tecnicos ON asignaciones.IdTecnico = tecnicos.IdTecnico LEFT JOIN usuarios ON tecnicos.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Asignada\"')\r\n    const inforVales = await query(\"SELECT v.*, COALESCE(d.idDictamen, 'No existe') AS IdDictamen, u.Nombre AS NombreUsuario, COALESCE(a.Diagnostico, 'No disponible') AS Diagnostico, COALESCE(a.Solucion, 'No disponible') AS Solucion FROM vales v LEFT JOIN dictamenes d ON v.idVale = d.idVale LEFT JOIN solicitudes s ON v.folioSolicitud = s.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario LEFT JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud ORDER BY v.idVale DESC;\");\r\n    \r\n    res.render('panelAdmin', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            folioSolicitudes: folios,\r\n            usuarios: usuarios,\r\n            historial: historialSoli,\r\n            edificios: edificios,\r\n            abierto: soloAbiertas,\r\n            pendiente:  soliPendiente,\r\n            asignada: soliAsignada,\r\n            espera: soliEspera,\r\n            cerrado: soliCerradas,\r\n            vales:inforVales,\r\n            tecnicos: tecnicos,\r\n            usuariosTecnicos: usuariosTecnicos,\r\n            \r\n        });\r\n        console.log(historialSoli);\r\n});\r\nfunction query(sql) {\r\n    return new Promise((resolve, reject) => {\r\n        connection.query(sql, (error, result) => {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\n// BUSQUEDA DE FOLIO PARA RELLENO AUTOMATICO DE INFO EN DICTAMENES\r\napp.get('/obtener-informacion-folio/:folioSolicitud',authPage('Admin'), (req, res) => {\r\n    const folioSolicitud = req.params.folioSolicitud;\r\n    req.session.folioSolicitudDictamen = folioSolicitud;\r\n    const query = 'SELECT v.idVale, v.Equipo, v.NoSerieEquipo, v.MarcaEquipo, v.ModeloEquipo, u.Correo FROM vales v JOIN solicitudes s ON v.FolioSolicitud = s.FolioSolicitud JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE v.FolioSolicitud = ?';\r\n\r\n    connection.query(query, [folioSolicitud], (error, results) => {\r\n        if (error) {\r\n            console.error(error);\r\n            res.status(500).json({ error: 'Error al obtener la información del folio' });\r\n        } else {\r\n            if (results.length > 0) {\r\n                // Si se encontraron resultados, devuelve la información como JSON al cliente\r\n                console.log(results);\r\n                req.session.correoDictamen = results[0].Correo;\r\n                req.session.idValeDictamen = results[0].idVale;\r\n                res.json(results[0]); // Suponiendo que solo necesitas el primer resultado\r\n            } else {\r\n                // Si no se encontraron resultados, puedes devolver un objeto vacío o un mensaje\r\n                res.json({ message: 'No se encontró información para el folio proporcionado' });\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n//estadisticas\r\napp.post('/generarEstadisticas', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha };\r\n    res.redirect('/estadisticas');\r\n});\r\n\r\n//reportes\r\napp.post('/generarReportes', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area };\r\n    res.redirect('/reportes');\r\n});\r\n\r\n// Define la ruta de la plantilla\r\nconst plantillaPath = path.join(__dirname, 'views', 'plantillaReportes.ejs');\r\n\r\n// Ruta para generar el PDF\r\napp.post('/generarPDF', async (req, res, next) => {\r\n    try {\r\n        // Obtén los datos de la sesión\r\n        const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas;\r\n\r\n        // Realizar la consulta SQL para obtener los datos de la base de datos\r\n        const fecha = desdeFecha;\r\n        const fechaFinal = hastaFecha;\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n\r\n        // Renderiza la plantilla con los datos de la sesión y los datos de la base de datos\r\n        const htmlContent = await ejs.renderFile(plantillaPath, {\r\n            tipo,\r\n            desdeFecha,\r\n            hastaFecha,\r\n            titulo,\r\n            nombre,\r\n            oficio,\r\n            exp,\r\n            area,\r\n            objetos: queryParaReportes\r\n        });\r\n\r\n        // Crea una instancia de Puppeteer\r\n        const browser = await puppeteer.launch();\r\n        const page = await browser.newPage();\r\n\r\n        // Establece el tamaño de la página y carga el contenido HTML\r\n        await page.setViewport({ width: 1200, height: 800 });\r\n        await page.setContent(htmlContent);\r\n\r\n        // Genera el PDF\r\n        const pdf = await page.pdf({ format: 'A4', landscape: true });\r\n\r\n        // Cierra el navegador de Puppeteer\r\n        await browser.close();\r\n\r\n        // Envía el PDF como respuesta\r\n        res.contentType('application/pdf');\r\n        res.send(pdf);\r\n    } catch (error) {\r\n        // Maneja cualquier error que ocurra\r\n        console.error('Error al generar el PDF:', error);\r\n        res.status(500).send('Error al generar el PDF');\r\n    }\r\n});\r\n\r\n//10 Hacer registro\r\napp.post('/registerP',authPage('Admin'),async(req, res) => {\r\n    const user = req.body.username;\r\n    const name = req.body.name;\r\n    const pass = req.body.password;\r\n    const rol = req.body.rol;\r\n    const genero = req.body.genero;\r\n    const correo  = req.body.correo;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    \r\n    connection.query('INSERT INTO usuarios SET ?', { NombreUsuario: user, Nombre: name, Contrasena: passwordHaash, Rol: rol, Genero: genero, Correo: correo }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            if (error.code === 'ER_DUP_ENTRY') {\r\n                res.render('alerta', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"¡Debe elegir otro nombre de usuario!\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: false,\r\n                    timer: 1500,\r\n                    ruta: 'panelAdmin'\r\n                });\r\n            }\r\n        } else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n})\r\n\r\napp.post('/registerT',authPage('Admin'),async(req, res) => { ///SEPARAR EN OTRA PESTAÑA\r\n    const nombre = req.body.nombreT;\r\n    const apellidos = req.body.apellidos;\r\n    const numeroT = req.body.noTrabajador;\r\n    const email = req.body.email;\r\n    const telefono = req.body.telef;\r\n    const IdUsuario  = req.body.IdUsuario;\r\n    const fecha = obtenerFechaActual();  \r\n    connection.query('INSERT INTO tecnicos SET ?', { Nombre: nombre, Apellidos: apellidos, NoTrabajador: numeroT, Correo: email, Telefono: telefono, IdUsuario: IdUsuario,FechaRegistro: fecha }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n        }\r\n             else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n})\r\n\r\n//10 Hacer solicitud de soporte\r\napp.post('/solicitud', async(req, res) => {\r\n    const usuario = req.session.idUsuario; //\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    console.log(otroInput);\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:usuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion,IdAsignacion:0}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,req.session.correoUser);\r\n            const idSolicitud = results.insertId;\r\n            console.log(idSolicitud);\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${req.session.idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelUsuario'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\napp.post('/solicitudAdmin',authPage('Admin'), async(req, res) => {\r\n    const usuario = req.body.usuarios;\r\n    const [idUsuario, correoUsuario] = usuario.split('|');\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:idUsuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion,IdAsignacion:0}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,correoUsuario);\r\n            const idSolicitud = results.insertId;\r\n            console.log(idSolicitud);\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//11 Autenticacion\r\napp.post('/auth', async (req,res)=> {\r\n    const user = req.body.username;\r\n    const pass = req.body.password;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    if(user && pass){\r\n        connection.query('SELECT * FROM usuarios WHERE NombreUsuario = ?', [user], async (error, results)=>{\r\n            if(results.length == 0 || !(await bcryptjs.compare(pass, results[0].Contrasena))){ \r\n                //si es igual a 0 o no coincide la contraseña, en la comparacion de bcrypt se debe poner el nombre de la variable y despues [0]. el nombre del campo contraseña en la db\r\n                res.render('login', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"Usuario y/o contrseña incorrectas\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: true,\r\n                    timer: false,\r\n                    ruta :'login'\r\n                });\r\n            }else{\r\n                req.session.loggedin = true;\r\n                req.session.correoUser = results[0].Correo;\r\n                req.session.idUsuario = results[0].IdUsuario;\r\n                req.session.name = results[0].Nombre;\r\n                req.session.rol = results[0].Rol;\r\n                if (results[0].Rol === 'Admin') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelAdmin'  // Redirigir a la página de panelAdmin\r\n                    });\r\n                } else if (results[0].Rol === 'Tecnico') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelTecnicos'  // Redirigir a la página de panelTecnico\r\n                    });\r\n                } else {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelUsuario'  // Redirigir a la página de solicitud\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }else{\r\n        res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"¡Porfavor ingrese un usuario y/o contraseña!\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 1500,\r\n            ruta :'login'\r\n        });\r\n    }\r\n});\r\n\r\n//VALES\r\napp.post('/vales', async(req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioS = req.body.folios;\r\n    const [folioSolicitud, correoUsuarioFolio] = folioS.split('|');\r\n    let equipo = req.body.listaEquiposCheck || '';\r\n    const otroInput = req.body.otroInput2 || '';  \r\n    const noSerie = req.body.serie;\r\n    const marca = req.body.marca;\r\n    const modelo = req.body.modelo;\r\n    const estado = req.body.estatus;\r\n    const caracteris = req.body.caracteristicas;\r\n    const [idTecnico, correoTecnico] = req.body.tecnico.split('|');\r\n    console.log('ABAJO DEBE APARECER EL ID DEL TECNICO')\r\n    console.log(idTecnico) \r\n    console.log(correoTecnico)\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    \r\n    const fechaHoraActual = new Date().toLocaleString();\r\n    const folioSeleccionado = folioSolicitud;\r\n    const templatePath = path.join(__dirname, 'views', 'generarVale.ejs');\r\n    \r\n    // Renderizar la plantilla HTML\r\n    const htmlContent = await ejs.renderFile(templatePath, {\r\n        folio: folioSeleccionado,\r\n        equipos: req.body.equipos,\r\n        serie: req.body.serie,\r\n        marca: req.body.marca,\r\n        modelo: req.body.modelo,\r\n        caracteristicas: req.body.caracteristicas,\r\n        estatus: req.body.estatus,\r\n        revision: req.body.revision,\r\n        fechaHoraActual: fechaHoraActual\r\n    });\r\n\r\n    // Crear una instancia de Puppeteer y generar el PDF\r\n    const browser = await puppeteer.launch();\r\n    const page = await browser.newPage();\r\n    const pdfPath = path.join(__dirname, 'docs', `ValeST24-${folioSeleccionado}.pdf`);\r\n\r\n    await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n    await page.pdf({ path: pdfPath, format: 'A4' });\r\n    await browser.close();\r\n\r\n    // Enviar respuesta al cliente\r\n\r\n    res.render('alerta', {\r\n        alert: true,\r\n        alertTitle: 'Éxito',\r\n        alertMessage: 'PDF generado y guardado correctamente',\r\n        alertIcon: 'success',\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n        ruta: 'panelAdmin'\r\n    });   \r\n\r\n    // Actualizar el estado de la solicitud en la base de datos\r\n    const cambioEstado = \"Asignada\";\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ? ', [cambioEstado, folioSolicitud], async(error, results)=> {\r\n        if (error) {\r\n            console.log(error);\r\n        } else {\r\n            // Insertar registros en la base de datos\r\n            connection.query('INSERT INTO asignaciones SET ?', { IdSolicitud: folioSolicitud, IdTecnico: idTecnico,DIagnostico:\"\", Solucion:\"\", Mensaje:\"\" }, async(error, results)=> {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    const IdAsignacion = results.insertId;\r\n                    await query(`UPDATE solicitudes SET IdAsignacion = ${IdAsignacion} WHERE FolioSolicitud = ${folioSolicitud}`);\r\n                    connection.query('INSERT INTO vales SET ?', {FolioSolicitud:folioSolicitud,Fecha:fecha,Equipo:equipo, NoSerieEquipo:noSerie, MarcaEquipo:marca, ModeloEquipo:modelo,Caracteristicas: caracteris ,Estado: estado,NombreUsuario:usuario}, async(error, results)=> {\r\n                        if (error) {\r\n                            console.log(error);\r\n                        } else {\r\n                            enviarMail(3,correoUsuarioFolio);\r\n                            enviarMail(5,correoTecnico);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n});\r\n\r\n// Función para obtener la fecha y hora actual en formato MySQL\r\nfunction obtenerFechaHoraActual() {\r\n    const fecha = new Date();\r\n    const año = fecha.getFullYear();\r\n    const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n    const dia = String(fecha.getDate()).padStart(2, '0');\r\n\r\n    return `${año}-${mes}-${dia}`;\r\n}\r\n\r\n// DICTAMENES\r\napp.post('/guardar-datos-y-generar-pdf', async (req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioSolicitudDictamen = req.session.folioSolicitudDictamen;\r\n    const vale = req.body.valeId;\r\n    console.log(folioSolicitudDictamen);\r\n    const equipoDictamen = req.body.equipoDictamen;\r\n    const marcaEquipo = req.body.marcaEquipo;\r\n    const modeloEquipo = req.body.modeloEquipo;\r\n    const noSerieEquipo = req.body.noSerieEquipo;\r\n    const estado = req.body.estado;\r\n    const tipoDictamen = req.body.tipoDictamen;\r\n    const caracDictamen = req.body.caracDictamen;\r\n    const observacionesDictamen = req.body.observacionesDictamen;\r\n    const descripcionDictamen = req.body.descripcionDictamen;\r\n\r\n    connection.query('INSERT INTO dictamenes SET ?', {\r\n        Encargado: usuario,\r\n        Fecha: fecha,\r\n        FolioSolicitud: folioSolicitudDictamen,\r\n        idVale: vale,\r\n        Equipo: equipoDictamen,\r\n        MarcaEquipo: marcaEquipo,\r\n        ModeloEquipo: modeloEquipo,\r\n        NoSerieEquipo: noSerieEquipo,\r\n        Estado: estado,\r\n        DictamenFinal: tipoDictamen,\r\n        caracDictamen: caracDictamen,\r\n        Observaciones: observacionesDictamen,\r\n        Descripcion: descripcionDictamen\r\n    }, async (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.status(500).send('Error al guardar los datos en la base de datos');\r\n        } else {\r\n            const idDictamen = results.insertId;\r\n\r\n            // Crear una instancia de Puppeteer\r\n            const browser = await puppeteer.launch();\r\n            const page = await browser.newPage();\r\n\r\n            // Ruta de la plantilla HTML\r\n            const templatePath = path.join(__dirname, 'views', 'generarDictamen.ejs');\r\n            console.log('Fecha a renderizar en la plantilla:', fecha);\r\n            const htmlContent = await ejs.renderFile(templatePath, {\r\n                dictamenes: [{\r\n                    idDictamen,\r\n                    FolioSolicitud: folioSolicitudDictamen,\r\n                    Fecha: fecha,\r\n                    Equipo: equipoDictamen,\r\n                    MarcaEquipo: marcaEquipo,\r\n                    ModeloEquipo: modeloEquipo,\r\n                    NoSerieEquipo: noSerieEquipo,\r\n                    Estado: estado,\r\n                    DictamenFinal: tipoDictamen,\r\n                    caracDictamen: caracDictamen,\r\n                    Observaciones: observacionesDictamen,\r\n                    Descripcion: descripcionDictamen\r\n                }],\r\n                fecha: fecha\r\n            });\r\n\r\n            await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n\r\n            // Ruta y nombre del archivo PDF\r\n            const pdfFileName = `DT24-${folioSolicitudDictamen}.pdf`;\r\n            const pdfFilePath = path.join(__dirname, './docs/', pdfFileName);\r\n\r\n            // Configurar la orientación a horizontal\r\n            const options = {\r\n                format: 'A4',\r\n                landscape: true \r\n            };\r\n\r\n\r\n            // Generar el PDF\r\n            await page.pdf({ path: pdfFilePath, ...options });\r\n\r\n            // Cerrar el navegador Puppeteer\r\n            await browser.close();\r\n\r\n            console.log('Archivo PDF generado y guardado correctamente');\r\n            console.log(req.session.correoDictamen)\r\n            enviarMail(4,req.session.correoDictamen);\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: 'Éxito',\r\n                alertMessage: 'PDF generado y guardado correctamente',\r\n                alertIcon: 'success',\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n\r\n    function obtenerFechaHoraActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n});\r\n\r\n//ACTUALIZAR ESTADO DE LAS SOLICITUDES\r\napp.post('/actualizar-estado', async (req, res) => {\r\n    const { folio, nuevoEstado } = req.body;\r\n    const fecha = obtenerFechaActual().toString();\r\n    const hora = obtenerHoraActual().toString();\r\n\r\n    // Consulta para actualizar el estado en la tabla solicitudes\r\n    const cambiarEstado = 'UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?';\r\n    // Consulta para insertar el cambio en el log, solo si hay un cambio en el estado\r\n    const logQuery = 'INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (?, ?, ?, ?, ?)';\r\n    // Consulta para obtener el estado original antes de la actualización\r\n    const obtenerEstadoOriginal = 'SELECT s.Estado, s.IdUsuario, u.Correo FROM solicitudes s INNER JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE s.FolioSolicitud = ?';\r\n\r\n    connection.query(obtenerEstadoOriginal, [folio], async (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el estado original:', error);\r\n            res.status(500).json({ error: 'Error al obtener el estado original' });\r\n        } else {\r\n            const usuarioEmail = results[0].Correo;\r\n            console.log(usuarioEmail);\r\n            console.log('ARRRIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');\r\n            const estadoOriginal = results[0].Estado;\r\n            // Ejecuta la consulta para cambiar el estado\r\n            connection.query(cambiarEstado, [nuevoEstado, folio], (updateError, updateResults) => {\r\n                if (updateError) {\r\n                    console.error('Error al actualizar la base de datos:', updateError);\r\n                    res.status(500).json({ error: 'Error al actualizar el estado en la base de datos' });\r\n                } else {\r\n                    console.log('Estado actualizado en la base de datos:', updateResults);\r\n                    // Inserta en el log solo si hay un cambio en el estado\r\n                    if (estadoOriginal !== nuevoEstado) {\r\n                        connection.query(logQuery, [req.session.idUsuario, folio, nuevoEstado, fecha, hora], (logError, logResults) => {\r\n                            if (logError) {\r\n                                console.error('Error al insertar en el log:', logError);\r\n                            } else {\r\n                                enviarMail(2,usuarioEmail);\r\n                                console.log('Cambio registrado en el log:', logResults);\r\n                            }\r\n                        });\r\n                    }\r\n                    res.json({ success: true, mensaje: 'Estado actualizado exitosamente' });\r\n                }\r\n            });\r\n        }\r\n    });\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//DESCARGAR PDF DESDE EL HISTORIAL\r\n//DESCARGAR VALE\r\napp.get('/descargarPDFvale', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `ValeST24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Vale no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//DESCARGAR DICTAMEN\r\napp.get('/descargarPDFdictamen', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `DT24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Dictamen no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//Actualizar el estado de las asignaciones\r\napp.post('/actualizarEstadoSolicitud', async (req, res) => {\r\n    const folioSolicitud = req.body.folioSolicitud;\r\n    const nuevoEstado = req.body.nuevoEstado;\r\n\r\n    // Actualiza el estado de la solicitud en la base de datos\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?', [nuevoEstado, folioSolicitud], (error, results) => {\r\n        if (error) {\r\n            console.error('Error al actualizar el estado de la solicitud:', error);\r\n            res.status(500).send('Error interno del servidor');\r\n        } else {\r\n            // Si se actualizó correctamente, muestra un mensaje de éxito con SweetAlert2\r\n            res.status(200).send('Estado actualizado correctamente');\r\n        }\r\n    });\r\n});\r\n\r\n// Creación de diagnósticos técnicos y soluciones aplicadas\r\napp.post('/crearDiagnostico', async (req, res) => {\r\n    const folioSeleccionado = req.body.folios; // Obtener el folio seleccionado del cuerpo de la solicitud\r\n    const diagnosticoT = req.body.diagnosticoT;\r\n    const solucion = req.body.solucion;\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n\r\n    // Consulta para obtener el IdTecnico de la tabla asignaciones\r\n    connection.query('SELECT IdTecnico FROM asignaciones WHERE IdSolicitud = ?', [folioSeleccionado], (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el IdTecnico:', error);\r\n            // Mostrar un mensaje de error utilizando SweetAlert2\r\n            res.render('panelTecnicos', {\r\n                alert: {\r\n                    alertTitle: 'Error',\r\n                    alertMessage: 'Error interno del servidor',\r\n                    alertIcon: 'error',\r\n                    showConfirmButton: true,\r\n                    timer: null,\r\n                    ruta: 'panelTecnicos' // Redirige a la misma página\r\n                }\r\n            });\r\n        } else {\r\n            const idTecnico = results[0].IdTecnico; // Se obtiene el IdTecnico de los resultados de la consulta\r\n            console.log('IdTecnico obtenido:', idTecnico);\r\n\r\n            // Inserción del diagnóstico y solución en la tabla asignaciones\r\n            connection.query('UPDATE asignaciones SET Diagnostico = ?, Solucion = ? WHERE IdSolicitud = ?',\r\n                [diagnosticoT, solucion, folioSeleccionado], (error, results) => {\r\n                    if (error) {\r\n                        console.error('Error al actualizar la tabla de asignaciones:', error);\r\n                        // Mostrar un mensaje de error utilizando SweetAlert2\r\n                        res.render('panelTecnicos', {\r\n                            alert: {\r\n                                alertTitle: 'Error',\r\n                                alertMessage: 'Error al actualizar la tabla de asignaciones',\r\n                                alertIcon: 'error',\r\n                                showConfirmButton: false,\r\n                                timer: 1500,\r\n                                ruta: 'panelTecnicos' // Redirige a la misma página\r\n                            }\r\n                        });\r\n                    } else {\r\n                        console.log('Diagnóstico y solución actualizados correctamente');\r\n\r\n                        // Consulta para obtener las asignaciones actualizadas\r\n                        connection.query('SELECT * FROM asignaciones WHERE IdTecnico = ?', [idTecnico], (error, asignaciones) => {\r\n                            if (error) {\r\n                                console.error('Error al obtener las asignaciones:', error);\r\n                                // Mostrar un mensaje de error utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Error',\r\n                                        alertMessage: 'Error al obtener las asignaciones',\r\n                                        alertIcon: 'error',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                console.log('Asignaciones obtenidas correctamente');\r\n                                // Mostrar un mensaje de éxito utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Éxito',\r\n                                        alertMessage: 'Diagnóstico y solución actualizados correctamente',\r\n                                        alertIcon: 'success',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    },\r\n                                    asignaciones: asignaciones // Pasar las asignaciones al archivo EJS\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    });\r\n\r\n    // Función para obtener la fecha actual en formato AAAA-MM-DD\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n\r\n    // Función para obtener la hora actual en formato HH:MM:SS\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n        return `${horas}:${minutos}:${segundos}`;\r\n    }\r\n});\r\n\r\n//12 Auth page\r\napp.get('/',(req, res)=>{\r\n\r\n    if(req.session.loggedin){\r\n        res.render('login',{\r\n            login: true,\r\n            name: req.session.name\r\n        });\r\n    }else{\r\n        res.render('login',{\r\n            login: false,\r\n            name: 'Debe iniciar sesión'\r\n        })\r\n    }\r\n})\r\n\r\n//13 Logout\r\napp.get('/logout', (req, res)=>{\r\n    req.session.destroy(()=>{\r\n        res.redirect('/login'); //Redirige al index\r\n    });\r\n})\r\n\r\n//Hacemos que funcione el servidor local en el puerto\r\napp.listen(3000, (req, res)=> {\r\n    console.log('SERVER RUNNING IN http://localhost:3000');\r\n});\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app.js b/app.js
---- a/app.js	(revision 041dd9426df70a31abb493849b5cb39238d811ce)
-+++ b/app.js	(date 1715060050079)
-@@ -140,13 +140,27 @@
-                                                 JOIN ${tipo} a ON d.FolioSolicitud = a.FolioSolicitud
-                                                 WHERE d.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'
-                                                 GROUP BY d.DictamenFinal`);
-+        const solicitudesSinDictamen = await query(`SELECT COUNT(s.FolioSolicitud) AS NumSolicitudesCerradasSinDictamen
-+                                                        FROM solicitudes s
-+                                                        LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud
-+                                                        JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud
-+                                                        WHERE s.Estado = 'Cerrado' AND d.FolioSolicitud IS NULL 
-+                                                        AND s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);
-+        const solicitudesConDictamen = await query(`SELECT COUNT(s.FolioSolicitud) AS NumSolicitudesCerradasConDictamenYVales
-+                                                    FROM solicitudes s
-+                                                    JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud
-+                                                    JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud
-+                                                    WHERE s.Estado = 'Cerrado'
-+                                                    AND s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);
-         console.log(folios);
-         console.log(conteoEstados);
-         console.log(usuariosPorSoli);
-         console.log(asignacionesTecnicos);
-         console.log(solucionesDictamen);
-+        console.log(solicitudesSinDictamen);
-+        console.log(solicitudesConDictamen);
-         // Renderizar la vista de estadísticas y pasar los datos
--        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen });
-+        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen, solicitudesSinDictamen:solicitudesSinDictamen, solicitudesConDictamen:solicitudesConDictamen});
-     } catch (error) {
-         console.error('Error al ejecutar la consulta SQL:', error);
-         // Manejar el error adecuadamente, por ejemplo, renderizando una página de error
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app.js\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/estadisticas.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/estadisticas.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/generarDictamen.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/generarDictamen.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ComposerSettings\">\n    <execution />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"$USER_HOME$/Library/Application Support/Herd/bin/php\" />\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2fyKfmjlEw7LogYHpH60cK6yRPW\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;dev&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/env\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-php-predefined-ba97393d7c68-6f8e3395a2b4-com.jetbrains.php.sharedIndexes-PS-233.15026.12\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"\" />\n      <created>1714767983038</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714767983038</updated>\n      <workItem from=\"1714767984758\" duration=\"553000\" />\n      <workItem from=\"1714794178238\" duration=\"660000\" />\n      <workItem from=\"1714795177084\" duration=\"1172000\" />\n      <workItem from=\"1714838497315\" duration=\"6121000\" />\n      <workItem from=\"1714880657411\" duration=\"5271000\" />\n      <workItem from=\"1714939940395\" duration=\"14014000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"UnknownFeatures\">\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\".env\" />\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.ejs\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 041dd9426df70a31abb493849b5cb39238d811ce)
-+++ b/.idea/workspace.xml	(date 1715060990867)
-@@ -4,12 +4,10 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="b75b1334-c68d-4ec7-9620-54811fca6eb8" name="Changes" comment="">
-+    <list default="true" id="b75b1334-c68d-4ec7-9620-54811fca6eb8" name="Changes" comment="Estadísticas listo">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/app.js" beforeDir="false" afterPath="$PROJECT_DIR$/app.js" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/views/estadisticas.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/estadisticas.ejs" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/views/generarDictamen.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/generarDictamen.ejs" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/views/panelAdmin.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/panelAdmin.ejs" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -76,8 +74,20 @@
-       <workItem from="1714795177084" duration="1172000" />
-       <workItem from="1714838497315" duration="6121000" />
-       <workItem from="1714880657411" duration="5271000" />
--      <workItem from="1714939940395" duration="14014000" />
-+      <workItem from="1714939940395" duration="16010000" />
-+      <workItem from="1715002742994" duration="1377000" />
-+      <workItem from="1715013976202" duration="523000" />
-+      <workItem from="1715050178899" duration="5038000" />
-     </task>
-+    <task id="LOCAL-00001" summary="Estadísticas listo">
-+      <option name="closed" value="true" />
-+      <created>1714963167888</created>
-+      <option name="number" value="00001" />
-+      <option name="presentableId" value="LOCAL-00001" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1714963167888</updated>
-+    </task>
-+    <option name="localTasksCounter" value="2" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -89,5 +99,7 @@
-   </component>
-   <component name="VcsManagerConfiguration">
-     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
-+    <MESSAGE value="Estadísticas listo" />
-+    <option name="LAST_COMMIT_MESSAGE" value="Estadísticas listo" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"Estadísticas listo\">\n      <change afterPath=\"$PROJECT_DIR$/public/images/encuesta.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/views/encuesta.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app.js\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/panelTecnicos.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/panelTecnicos.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/panelUsuario.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/panelUsuario.ejs\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ComposerSettings\">\n    <execution />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"JavaScript File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"$USER_HOME$/Library/Application Support/Herd/bin/php\" />\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2fyKfmjlEw7LogYHpH60cK6yRPW\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;dev&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/tamararodriguezromo/Documents/GitHub/CIC/public/images&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/public/images\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/public/images\" />\n      <recent name=\"$PROJECT_DIR$/env\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-php-predefined-ba97393d7c68-6f8e3395a2b4-com.jetbrains.php.sharedIndexes-PS-233.15026.12\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"\" />\n      <created>1714767983038</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714767983038</updated>\n      <workItem from=\"1714767984758\" duration=\"553000\" />\n      <workItem from=\"1714794178238\" duration=\"660000\" />\n      <workItem from=\"1714795177084\" duration=\"1172000\" />\n      <workItem from=\"1714838497315\" duration=\"6121000\" />\n      <workItem from=\"1714880657411\" duration=\"5271000\" />\n      <workItem from=\"1714939940395\" duration=\"16010000\" />\n      <workItem from=\"1715002742994\" duration=\"1377000\" />\n      <workItem from=\"1715013976202\" duration=\"523000\" />\n      <workItem from=\"1715050178899\" duration=\"5038000\" />\n      <workItem from=\"1715100765340\" duration=\"609000\" />\n      <workItem from=\"1715101469301\" duration=\"3628000\" />\n      <workItem from=\"1715105705308\" duration=\"5633000\" />\n      <workItem from=\"1715139320647\" duration=\"2393000\" />\n      <workItem from=\"1715144391965\" duration=\"1653000\" />\n      <workItem from=\"1715197362322\" duration=\"3327000\" />\n      <workItem from=\"1715367471989\" duration=\"10635000\" />\n      <workItem from=\"1715401563391\" duration=\"1721000\" />\n      <workItem from=\"1715535964475\" duration=\"4879000\" />\n      <workItem from=\"1715562003986\" duration=\"13183000\" />\n      <workItem from=\"1715606576132\" duration=\"5260000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Estadísticas listo\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1714963167888</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714963167888</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"UnknownFeatures\">\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\".env\" />\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.ejs\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"Estadísticas listo\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Estadísticas listo\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ b/.idea/workspace.xml	(date 1715806931210)
@@ -5,13 +5,18 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="b75b1334-c68d-4ec7-9620-54811fca6eb8" name="Changes" comment="Estadísticas listo">
-      <change afterPath="$PROJECT_DIR$/public/images/encuesta.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/views/encuesta.ejs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_24_10_46__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_10_53__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_05_24_11_00__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app.js" beforeDir="false" afterPath="$PROJECT_DIR$/app.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/public/scripts/semaforoEncuesta.js" beforeDir="false" afterPath="$PROJECT_DIR$/public/scripts/semaforoEncuesta.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/views/encuesta.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/encuesta.ejs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/views/panelAdmin.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/panelAdmin.ejs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/views/panelTecnicos.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/panelTecnicos.ejs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/views/panelUsuario.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/panelUsuario.ejs" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -104,7 +109,13 @@
       <workItem from="1715401563391" duration="1721000" />
       <workItem from="1715535964475" duration="4879000" />
       <workItem from="1715562003986" duration="13183000" />
-      <workItem from="1715606576132" duration="5260000" />
+      <workItem from="1715606576132" duration="8583000" />
+      <workItem from="1715633176640" duration="7140000" />
+      <workItem from="1715699705903" duration="278000" />
+      <workItem from="1715710289500" duration="1144000" />
+      <workItem from="1715719760475" duration="1176000" />
+      <workItem from="1715739778555" duration="5747000" />
+      <workItem from="1715798041610" duration="6193000" />
     </task>
     <task id="LOCAL-00001" summary="Estadísticas listo">
       <option name="closed" value="true" />
Index: public/scripts/semaforoEncuesta.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Obtén todas las celdas con la clase 'estado-celda'\n    var celdas = document.querySelectorAll('.estado-td');\n\n    // Itera sobre cada celda\n    celdas.forEach(function(celda) {\n        // Obtiene el valor del estado desde el atributo 'data-estado'\n        var estado = celda.getAttribute('data-estado');\n\n        obtenerColorEstado(estado, function(color) {\n            // Agrega la clase de estilo correspondiente al color obtenido\n            celda.style.backgroundColor = color;\n        });\n    });\n\n    // Función para obtener el color correspondiente al estado\n    function obtenerColorEstado(estado, callback) {\n        var colores = {\n            'Regular': '#FFDA6A',\n            'Excelente': '#008f39',\n            'Buena': '#3AE261',\n            'Mala': '#F53D4F'    // Rojo\n        };\n        // Llama al callback con el color correspondiente al estado\n        callback(colores[estado] || ''); // Si el estado no tiene un color asignado, usa una cadena vacía\n    }\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/scripts/semaforoEncuesta.js b/public/scripts/semaforoEncuesta.js
--- a/public/scripts/semaforoEncuesta.js	(revision f0c48da3adfc3e2b4553db6f8c430fb4caa1abfd)
+++ b/public/scripts/semaforoEncuesta.js	(date 1715800861421)
@@ -1,7 +1,7 @@
 
 document.addEventListener('DOMContentLoaded', function() {
     // Obtén todas las celdas con la clase 'estado-celda'
-    var celdas = document.querySelectorAll('.estado-td');
+    var celdas = document.querySelectorAll('.estado-encuesta');
 
     // Itera sobre cada celda
     celdas.forEach(function(celda) {
