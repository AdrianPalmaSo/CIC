Index: views/estadisticas.ejs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Estadísticas</title>\n    <link rel=\"stylesheet\" href=\"resources/css/estadisticas.css\">\n</head>\n<body>\n    <div class=\"logo-contenedor\">\n                <img src=\"resources/images/uac_logo.png\" alt=\"Logo Izquierdo\" class=\"logo-izquierdo\">\n                <h1 class=\"titulo-sitio\">CIC Assistance</h1>\n                <img src=\"resources/images/facu_logo.png\" alt=\"Logo Derecho\" class=\"logo-derecho\">\n            </div>\n    <div class=\"estadisticasContenedor\">\n\n        <br>\n        <h2>Estadísticas</h2>\n        <div>\n            <div>\n                <p class=\"labelMayor\">El tipo de solicitud es: </p><p><%= tipo %></p>\n            </div>\n            <div class=\"fechas\">\n                <p class=\"labelMayor\">Las fechas seleccionadas son</p>\n                <p class=\"labelMayor\">desde: </p><p><%= desdeFecha %></p>\n                <p class=\"labelMayor\">hasta: </p><p><%= hastaFecha %></p>\n            </div>\n\n                <% const datos = objetos.map(objeto => objeto.FolioSolicitud); %>\n                <% const datos2 = conteo.map(contado => contado.total); %>\n                <% const datosUsuarios = usuariosPorSoli.map(numSoli => numSoli.NumeroSolicitudes); %>\n                <% const asigTecnicos = asignacionesTecnicos.map(asignacion => asignacion.NumeroSolicitudesTecnico); %>\n                <% const dictamenSolucion = solucionesDictamen.map(solucion => solucion.NumeroSolicitudesDictamen); %>\n\n\n            <!-- Agrega aquí cualquier otra información estadística que desees mostrar -->\n        </div>\n        <div>\n            <canvas id=\"myChart\" width=\"200\" height=\"200\"></canvas>\n        </div>\n\n        <div>\n                <canvas id=\"myChart2\" width=\"200\" height=\"200\"></canvas>\n        </div>\n\n        <div>\n                <canvas id=\"myChart3\" width=\"200\" height=\"200\"></canvas>\n        </div>\n\n        <div>\n                <canvas id=\"myChart4\" width=\"200\" height=\"200\"></canvas>\n        </div>\n    </div>\n      \n      <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n      \n      <script>\n          document.addEventListener('DOMContentLoaded', function () {\n              // Obtén el contexto del lienzo donde se dibujará la gráfica\n              const ctx = document.getElementById('myChart').getContext('2d');\n\n              // Configura los datos de la gráfica utilizando los datos procesados\n              const data = {\n                  labels: [<% usuariosPorSoli.forEach(usuariosPorSoli => { %> '<%= usuariosPorSoli.NombreUsuario %>', <% }); %>], // Puedes cambiar las etiquetas según tus necesidades\n                  datasets: [{\n                      label: 'Total de <%= tipo %>', // Etiqueta de los datos\n                      data: [<%= datosUsuarios.join(',') %>], // Utiliza los datos procesados aquí\n                      backgroundColor: [\n                          'rgba(255, 99, 132, 0.2)',\n                          'rgba(54, 162, 235, 0.2)',\n                          'rgba(255, 206, 86, 0.2)',\n                          'rgba(75, 192, 192, 0.2)',\n                          'rgba(153, 102, 255, 0.2)'\n                      ],\n                      borderColor: [\n                          'rgba(255, 99, 132, 1)',\n                          'rgba(54, 162, 235, 1)',\n                          'rgba(255, 206, 86, 1)',\n                          'rgba(75, 192, 192, 1)',\n                          'rgba(153, 102, 255, 1)'\n                      ],\n                      borderWidth: 1\n                  }]\n              };\n\n              // Configura la instancia de la gráfica\n              const myChart = new Chart(ctx, {\n                  type: 'pie', // Tipo de gráfico\n                  data: data, // Configuración de los datos de la gráfica\n                  options: {\n                      maintainAspectRatio: false, // Desactiva el mantenimiento del aspecto\n                      aspectRatio: 2,\n                      scales: {\n                          y: {\n                              beginAtZero: true\n                          }\n                      }\n                  }\n              });\n              // Obtén el contexto del lienzo donde se dibujará la segunda gráfica\n              const ctx2 = document.getElementById('myChart2').getContext('2d');\n\n              // Configura los datos de la segunda gráfica\n              const data2 = {\n                  labels: [<% conteo.forEach(conteo => { %> '<%= conteo.estado %>', <% }); %>],\n                  datasets: [{\n                      label: 'Total',\n                      data: [<%= datos2 %>], // Aquí deberías agregar tus datos para la segunda gráfica\n                      backgroundColor: [\n                          'rgba(255, 99, 132, 0.2)',\n                          'rgba(54, 162, 235, 0.2)',\n                          'rgba(255, 206, 86, 0.2)',\n                          'rgba(75, 192, 192, 0.2)',\n                          'rgba(153, 102, 255, 0.2)'\n                      ],\n                      borderColor: [\n                          'rgba(255, 99, 132, 1)',\n                          'rgba(54, 162, 235, 1)',\n                          'rgba(255, 206, 86, 1)',\n                          'rgba(75, 192, 192, 1)',\n                          'rgba(153, 102, 255, 1)'\n                      ],\n                      borderWidth: 1\n                  }]\n              };\n\n              // Configura la instancia de la segunda gráfica\n              const myChart2 = new Chart(ctx2, {\n                  type: 'bar',\n                  data: data2,\n                  options: {\n                      maintainAspectRatio: false,\n                      aspectRatio: 2,\n                      scales: {\n                          y: {\n                              beginAtZero: true\n                          }\n                      }\n                  }\n              });\n            // Obtén el contexto del lienzo donde se dibujará la tercera gráfica\n            const ctx3 = document.getElementById('myChart3').getContext('2d');\n\n            // Configura los datos de la tercera gráfica\n            const data3 = {\n                labels: [<% asignacionesTecnicos.forEach(asignacionesTecnicos => { %> '<%= asignacionesTecnicos.Tecnico %>', <% }); %>],\n                datasets: [{\n                    label: 'Total',\n                    data: [<%= asigTecnicos.join(',') %>], // Aquí deberías agregar tus datos para la segunda gráfica\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            };\n\n            // Configura la instancia de la segunda gráfica\n            const myChart3 = new Chart(ctx3, {\n                type: 'doughnut',\n                data: data3,\n                options: {\n                    maintainAspectRatio: false,\n                    aspectRatio: 2,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n            // Obtén el contexto del lienzo donde se dibujará la tercera gráfica\n            const ctx4 = document.getElementById('myChart4').getContext('2d');\n\n            // Configura los datos de la tercera gráfica\n            const data4 = {\n                labels: [<% solucionesDictamen.forEach(solucionesDictamen => { %> '<%= solucionesDictamen.DictamenFinal %>', <% }); %>],\n                datasets: [{\n                    label: 'Total',\n                    data: [<%= dictamenSolucion.join(',') %>], // Aquí deberías agregar tus datos para la segunda gráfica\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            };\n\n            // Configura la instancia de la segunda gráfica\n            const myChart4 = new Chart(ctx4, {\n                type: 'bar',\n                data: data4,\n                options: {\n                    maintainAspectRatio: false,\n                    aspectRatio: 2,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n          });\n      </script>\n</body>\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/estadisticas.ejs b/views/estadisticas.ejs
--- a/views/estadisticas.ejs	(revision 929ec40a983fdc20cf8fd611ec9313d3103ab59b)
+++ b/views/estadisticas.ejs	(date 1715100796785)
@@ -11,7 +11,8 @@
                 <img src="resources/images/uac_logo.png" alt="Logo Izquierdo" class="logo-izquierdo">
                 <h1 class="titulo-sitio">CIC Assistance</h1>
                 <img src="resources/images/facu_logo.png" alt="Logo Derecho" class="logo-derecho">
-            </div>
+    </div>
+
     <div class="estadisticasContenedor">
 
         <br>
@@ -31,6 +32,8 @@
                 <% const datosUsuarios = usuariosPorSoli.map(numSoli => numSoli.NumeroSolicitudes); %>
                 <% const asigTecnicos = asignacionesTecnicos.map(asignacion => asignacion.NumeroSolicitudesTecnico); %>
                 <% const dictamenSolucion = solucionesDictamen.map(solucion => solucion.NumeroSolicitudesDictamen); %>
+                <% const soliSinDic = solicitudesSinDictamen.map(solucionSin => solucionSin.NumSolicitudesCerradasSinDictamen); %>
+                <% const soliConDic = solicitudesConDictamen.map(solucionCon => solucionCon.NumSolicitudesCerradasConDictamenYVales); %>
 
 
             <!-- Agrega aquí cualquier otra información estadística que desees mostrar -->
@@ -49,11 +52,14 @@
 
         <div>
                 <canvas id="myChart4" width="200" height="200"></canvas>
+        </div>
+        <div>
+                <canvas id="myChart5" width="200" height="200"></canvas>
         </div>
     </div>
-      
+
       <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
-      
+
       <script>
           document.addEventListener('DOMContentLoaded', function () {
               // Obtén el contexto del lienzo donde se dibujará la gráfica
@@ -214,6 +220,47 @@
                     maintainAspectRatio: false,
                     aspectRatio: 2,
                     scales: {
+                        y: {
+                            beginAtZero: true
+                        }
+                    }
+                }
+            });
+            // Obtén el contexto del lienzo donde se dibujará la tercera gráfica
+            const ctx5 = document.getElementById('myChart5').getContext('2d');
+
+            // Configura los datos de la tercera gráfica
+            const data5 = {
+                labels: ['Solicitudes sin Dictamen', 'Solicitudes con Dictamen'],
+                datasets: [{
+                    label: 'Total',
+                    data: [<%= soliSinDic %>, <%= soliConDic %>], // Aquí deberías agregar tus datos para la segunda gráfica
+                    backgroundColor: [
+                        'rgba(255, 99, 132, 0.2)',
+                        'rgba(54, 162, 235, 0.2)',
+                        'rgba(255, 206, 86, 0.2)',
+                        'rgba(75, 192, 192, 0.2)',
+                        'rgba(153, 102, 255, 0.2)'
+                    ],
+                    borderColor: [
+                        'rgba(255, 99, 132, 1)',
+                        'rgba(54, 162, 235, 1)',
+                        'rgba(255, 206, 86, 1)',
+                        'rgba(75, 192, 192, 1)',
+                        'rgba(153, 102, 255, 1)'
+                    ],
+                    borderWidth: 1
+                }]
+            };
+
+            // Configura la instancia de la segunda gráfica
+            const myChart5 = new Chart(ctx5, {
+                type: 'pie',
+                data: data5,
+                options: {
+                    maintainAspectRatio: false,
+                    aspectRatio: 2,
+                    scales: {
                         y: {
                             beginAtZero: true
                         }
Index: app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//Invocamos express\r\nconst express = require('express');\r\nconst rateLimit = require('express-rate-limit');//Para proteger ataques ddos o limitar la cantidad de solicitudes\r\nconst app = express();\r\nconst path = require('path');\r\nconst ejs = require('ejs');\r\nconst fs = require('fs');\r\nconst puppeteer = require('puppeteer');\r\nconst {authPage,authSub} = require('./middleware');\r\nconst nodemailer = require('nodemailer');\r\n\r\n//seteamos urlencoded para capturar los datos del formulario\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(express.json());\r\n\r\n//Invocar a dotenv\r\nconst dotenv = require('dotenv');\r\ndotenv.config({path: './env/.env'})\r\n\r\n//Setear el directorio public\r\napp.use('/resources', express.static('public'));\r\napp.use('/resources', express.static(__dirname + '/public'));\r\n\r\n///Establecer el motor de plantillas\r\napp.set('view engine', 'ejs');\r\n\r\n//6.- invocar a bcrypt\r\nconst bcryptjs = require('bcryptjs');\r\n\r\n//7.- Var de sesion\r\nconst session = require('express-session');\r\napp.use(session({\r\n    secret: 'secret',\r\n    resave: true,\r\n    saveUninitialized:true\r\n}));\r\n\r\n//Invocar a rate-limit para proteger contra ataques de muchas solicitudes al mismo tiempo\r\n const limiter = rateLimit({\r\n windowMs: 15 * 60 * 1000, // 15 minutes\r\n max: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)\r\nstandardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\nlegacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\napp.use(limiter);\r\n\r\n//8.- Invocar conexion a DB\r\nconst connection = require('./database/db');\r\nconst { assign } = require('nodemailer/lib/shared');\r\nconsole.log(__dirname);\r\n\r\n//FUNCION PARA ENVIAR NOTIFICACIONES POR EMAIL\r\nenviarMail = async(opcion,correoObjetivo)=>{\r\n    const config = {\r\n        host : 'smtp.gmail.com',\r\n        port : 587,\r\n        auth : {\r\n            user: process.env.SMTP_USER,\r\n            pass: process.env.SMTP_PASS\r\n        }\r\n    }\r\n\r\n    let textoCorreo;\r\n    let textAsunto;\r\n    if (opcion === 1) {\r\n        textAsunto = 'Solicitud de soporte creada'\r\n        textoCorreo = 'Ha realizado una solicitud de soporte técnico al sistema CIC Assistance, puede checar el estatus de su solicitud en su historial de solicitudes a traves de la misma página donde realizó la solicitud';\r\n    } else if (opcion === 2) {\r\n        textAsunto = 'Actualización estatus en solicitud'\r\n        textoCorreo = 'Ha cambiado el estatus de tu solicitud de soporte técnico, revisa tu portal cic assistance para obtener mas información';\r\n    } else if(opcion === 3){\r\n        textAsunto = 'Vale creado'\r\n        textoCorreo = 'Se ha creado el vale a su solicitud de soporte técnico puede descargarlo a traves del portal cic assistance en su navegador web';\r\n    }else if(opcion === 4){\r\n        textAsunto = 'Dictamen sobre solicitud'\r\n        textoCorreo = 'Se ha determinado el dictamen a su solicitud de soporte técnico, puede revisar mas detalles del dictamen en su portal cic assistance y puede pasar por su equipo al Centro de Computo';\r\n    }else if(opcion === 5){\r\n        textAsunto = 'Solicitud Asignada'\r\n        textoCorreo = 'Se le ha asignado una nueva solicitud de soporte técnico porfavor entre a su portal CIC Assitance para poder ver mas información';\r\n   \r\n    }\r\n    const mensaje = {\r\n        from: 'cic.assistance2024@gmail.com',\r\n        to: correoObjetivo,\r\n        subject: textAsunto,\r\n        text: textoCorreo\r\n    }\r\n    const transport = nodemailer.createTransport(config);\r\n    const info = await transport.sendMail(mensaje);\r\n}\r\n\r\n\r\n\r\n//9.- Estableciendo las rutas\r\napp.get('/login', (req, res) => {\r\n    res.render('login');\r\n});\r\n\r\n\r\napp.get('/acercaDe', (req, res) => {\r\n    res.render('acerca_de');\r\n});\r\n\r\napp.get('/registerP',authPage('Admin'), (req, res) => {\r\n    res.render('register');\r\n});\r\napp.get('/registerT',authPage('Admin'), (req, res) => {\r\n    res.render('registerT');\r\n});\r\napp.get('/generarDictamen',authPage('Admin'), (req, res) => {\r\n    res.render('generarDictamen');\r\n});\r\napp.get('/alerta', (req, res) => {\r\n    res.render('alerta');\r\n});\r\n// Ruta GET para renderizar la vista de estadísticas ESTADISTICAS\r\napp.get('/estadisticas', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        console.log(fecha);\r\n        const folios = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n        const conteoEstados = await query(`SELECT Estado AS estado, COUNT(*) AS total FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}' GROUP BY Estado`);\r\n\r\n        const usuariosPorSoli = await query(`SELECT u.Nombre AS NombreUsuario, COUNT(a.FolioSolicitud) AS NumeroSolicitudes\r\n                                                FROM usuarios u\r\n                                                JOIN solicitudes s ON u.IdUsuario = s.IdUsuario\r\n                                                JOIN ${tipo} a ON s.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY u.NombreUsuario`);\r\n        const asignacionesTecnicos = await query(`SELECT t.Nombre AS Tecnico, COUNT(a.IdSolicitud) AS NumeroSolicitudesTecnico\r\n                                                FROM tecnicos t\r\n                                                JOIN asignaciones a ON t.IdTecnico = a.IdTecnico \r\n                                                JOIN solicitudes s ON s.FolioSolicitud = a.IdSolicitud WHERE s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY t.Nombre`);\r\n        const solucionesDictamen = await query(`SELECT d.DictamenFinal AS DictamenFinal, COUNT(a.FolioSolicitud) AS NumeroSolicitudesDictamen\r\n                                                FROM dictamenes d\r\n                                                JOIN ${tipo} a ON d.FolioSolicitud = a.FolioSolicitud\r\n                                                WHERE d.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'\r\n                                                GROUP BY d.DictamenFinal`);\r\n        console.log(folios);\r\n        console.log(conteoEstados);\r\n        console.log(usuariosPorSoli);\r\n        console.log(asignacionesTecnicos);\r\n        console.log(solucionesDictamen);\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen });\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\napp.get('/reportes', async (req, res) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas || {};\r\n    try {\r\n        // Realizar la consulta SQL para obtener las solicitudes con la fecha desdeFecha\r\n        const fecha = desdeFecha\r\n        const fechaFinal = hastaFecha\r\n        console.log(fecha);\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`)\r\n        console.log(\"-----------------aaaaaaaaaaaaaaaaaaa--------------------\");\r\n        console.log(queryParaReportes)\r\n        // Renderizar la vista de estadísticas y pasar los datos\r\n        res.render('reportes', { tipo, desdeFecha, hastaFecha, objetos: queryParaReportes, titulo, nombre, oficio, exp, area });\r\n    } catch (error) {\r\n        console.error('Error al ejecutar la consulta SQL:', error);\r\n        // Manejar el error adecuadamente, por ejemplo, renderizando una página de error\r\n        res.render('error', { message: 'Error al obtener las solicitudes', error });\r\n    }\r\n});\r\n\r\n//Panel de técnicos\r\napp.get('/panelTecnicos', authPage([\"Tecnico\", \"Admin\"]), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,\r\n            ruta: 'login'\r\n        });\r\n    }\r\n\r\n    try {\r\n        const usuario = req.session.idUsuario;\r\n        const asignaciones = await query(`SELECT DISTINCT s.FolioSolicitud,s.Fecha,s.Descripcion, v.Equipo,v.NoSerieEquipo,v.MarcaEquipo,v.ModeloEquipo, u.IdUsuario as IdUsuarioTecnico, us.IdUsuario as IdUsuarioSolicitante, us.Nombre as NombreSolicitante FROM solicitudes s JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud JOIN tecnicos t ON a.IdTecnico = t.IdTecnico JOIN usuarios u ON t.IdUsuario = u.IdUsuario JOIN usuarios us ON s.IdUsuario = us.IdUsuario WHERE u.IdUsuario = ${usuario}`);\r\n        \r\n        res.render('panelTecnicos', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            asignaciones: asignaciones // Pasando las asignaciones como variable local\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error al obtener las asignaciones:\", error);\r\n        res.status(500).send('Error interno del servidor');\r\n    }\r\n});\r\n\r\n// Panel de usuarios\r\napp.get('/panelUsuario',authPage([\"Usuario\",\"Admin\",\"Tecnico\"]), async (req, res) => {\r\n\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const usuario = req.session.idUsuario;\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const historialUsuario = `\r\n    SELECT s.FolioSolicitud AS FolioSolicitud, s.Fecha AS Fecha, s.Equipo AS Equipo, s.Estado AS Estado, CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Vale, CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud WHERE s.IdUsuario = ${usuario} ORDER BY FolioSolicitud DESC;\r\n    `;\r\n    const historial = await query(historialUsuario);\r\n    console.log(edificios);\r\n    res.render('panelUsuario', {\r\n        edificios: edificios,\r\n        login: req.session.loggedin,\r\n        name: req.session.name,\r\n        historial: historial,\r\n    });\r\n});\r\n\r\n\r\n//Panel de administradores\r\napp.get('/panelAdmin',authPage('Admin'), async (req, res) => {\r\n    if (!req.session.loggedin) {\r\n        // Si no ha iniciado sesión, redirigir al login con un mensaje de advertencia\r\n        return res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"Debes iniciar sesión antes de llenar el formulario.\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 3000,  \r\n            ruta: 'login'\r\n        });\r\n    }\r\n    const tecnicos = await query('SELECT * FROM tecnicos');\r\n    const edificios = await query('SELECT * FROM edificios');\r\n    const folios = await query('SELECT solicitudes.FolioSolicitud, solicitudes.IdUsuario, usuarios.Correo FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE NOT EXISTS ( SELECT 1 FROM vales WHERE vales.FolioSolicitud = solicitudes.FolioSolicitud )');\r\n    const usuarios = await query('SELECT * from usuarios');\r\n    const usuariosTecnicos = await query('SELECT * FROM usuarios WHERE rol = \"Tecnico\" AND NOT EXISTS ( SELECT 1 FROM tecnicos WHERE tecnicos.IdUsuario = usuarios.IdUsuario )');\r\n    const historialSoli = await query(`SELECT s.FolioSolicitud AS FolioSolicitud,s.Fecha AS Fecha,s.Hora AS Hora,u.Nombre AS NombreUsuario,s.Equipo AS Equipo,s.Estado AS Estado,CASE WHEN v.FolioSolicitud IS NOT NULL THEN 'Disponible' WHEN d.FolioSolicitud IS NOT NULL THEN 'No disponible' ELSE 'No Disponible' END AS Vale,CASE WHEN d.FolioSolicitud IS NOT NULL THEN 'Disponible' ELSE 'No Disponible' END AS Dictamen FROM solicitudes s LEFT JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario ORDER BY FolioSolicitud DESC; `);\r\n    const soloAbiertas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Abierto\"')\r\n    const soliPendiente = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Proceso\"')\r\n    const soliCerradas = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Cerrado\"')\r\n    const soliEspera = await query('SELECT solicitudes.*, usuarios.Correo,usuarios.Nombre FROM solicitudes JOIN usuarios ON solicitudes.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado =  \"Espera\"')\r\n    const soliAsignada = await query('SELECT solicitudes.*,u.Correo, u.Nombre as UsuarioNombre, tecnicos.Nombre, tecnicos.IdTecnico FROM solicitudes LEFT JOIN usuarios u ON solicitudes.IdUsuario = u.IdUsuario LEFT JOIN asignaciones ON solicitudes.IdAsignacion = asignaciones.IdAsignacion LEFT JOIN tecnicos ON asignaciones.IdTecnico = tecnicos.IdTecnico LEFT JOIN usuarios ON tecnicos.IdUsuario = usuarios.IdUsuario WHERE solicitudes.Estado = \"Asignada\"')\r\n    const inforVales = await query(\"SELECT v.*, COALESCE(d.idDictamen, 'No existe') AS IdDictamen, u.Nombre AS NombreUsuario, COALESCE(a.Diagnostico, 'No disponible') AS Diagnostico, COALESCE(a.Solucion, 'No disponible') AS Solucion FROM vales v LEFT JOIN dictamenes d ON v.idVale = d.idVale LEFT JOIN solicitudes s ON v.folioSolicitud = s.FolioSolicitud LEFT JOIN usuarios u ON s.IdUsuario = u.IdUsuario LEFT JOIN asignaciones a ON s.FolioSolicitud = a.IdSolicitud ORDER BY v.idVale DESC;\");\r\n    \r\n    res.render('panelAdmin', {\r\n            login: req.session.loggedin,\r\n            name: req.session.name,\r\n            folioSolicitudes: folios,\r\n            usuarios: usuarios,\r\n            historial: historialSoli,\r\n            edificios: edificios,\r\n            abierto: soloAbiertas,\r\n            pendiente:  soliPendiente,\r\n            asignada: soliAsignada,\r\n            espera: soliEspera,\r\n            cerrado: soliCerradas,\r\n            vales:inforVales,\r\n            tecnicos: tecnicos,\r\n            usuariosTecnicos: usuariosTecnicos,\r\n            \r\n        });\r\n        console.log(historialSoli);\r\n});\r\nfunction query(sql) {\r\n    return new Promise((resolve, reject) => {\r\n        connection.query(sql, (error, result) => {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\n// BUSQUEDA DE FOLIO PARA RELLENO AUTOMATICO DE INFO EN DICTAMENES\r\napp.get('/obtener-informacion-folio/:folioSolicitud',authPage('Admin'), (req, res) => {\r\n    const folioSolicitud = req.params.folioSolicitud;\r\n    req.session.folioSolicitudDictamen = folioSolicitud;\r\n    const query = 'SELECT v.idVale, v.Equipo, v.NoSerieEquipo, v.MarcaEquipo, v.ModeloEquipo, u.Correo FROM vales v JOIN solicitudes s ON v.FolioSolicitud = s.FolioSolicitud JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE v.FolioSolicitud = ?';\r\n\r\n    connection.query(query, [folioSolicitud], (error, results) => {\r\n        if (error) {\r\n            console.error(error);\r\n            res.status(500).json({ error: 'Error al obtener la información del folio' });\r\n        } else {\r\n            if (results.length > 0) {\r\n                // Si se encontraron resultados, devuelve la información como JSON al cliente\r\n                console.log(results);\r\n                req.session.correoDictamen = results[0].Correo;\r\n                req.session.idValeDictamen = results[0].idVale;\r\n                res.json(results[0]); // Suponiendo que solo necesitas el primer resultado\r\n            } else {\r\n                // Si no se encontraron resultados, puedes devolver un objeto vacío o un mensaje\r\n                res.json({ message: 'No se encontró información para el folio proporcionado' });\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n//estadisticas\r\napp.post('/generarEstadisticas', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha };\r\n    res.redirect('/estadisticas');\r\n});\r\n\r\n//reportes\r\napp.post('/generarReportes', (req, res, next) => {\r\n    const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.body;\r\n    req.session.estadisticas = { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area };\r\n    res.redirect('/reportes');\r\n});\r\n\r\n// Define la ruta de la plantilla\r\nconst plantillaPath = path.join(__dirname, 'views', 'plantillaReportes.ejs');\r\n\r\n// Ruta para generar el PDF\r\napp.post('/generarPDF', async (req, res, next) => {\r\n    try {\r\n        // Obtén los datos de la sesión\r\n        const { tipo, desdeFecha, hastaFecha, titulo, nombre, oficio, exp, area } = req.session.estadisticas;\r\n\r\n        // Realizar la consulta SQL para obtener los datos de la base de datos\r\n        const fecha = desdeFecha;\r\n        const fechaFinal = hastaFecha;\r\n        const queryParaReportes = await query(`SELECT * FROM ${tipo} WHERE Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);\r\n\r\n        // Renderiza la plantilla con los datos de la sesión y los datos de la base de datos\r\n        const htmlContent = await ejs.renderFile(plantillaPath, {\r\n            tipo,\r\n            desdeFecha,\r\n            hastaFecha,\r\n            titulo,\r\n            nombre,\r\n            oficio,\r\n            exp,\r\n            area,\r\n            objetos: queryParaReportes\r\n        });\r\n\r\n        // Crea una instancia de Puppeteer\r\n        const browser = await puppeteer.launch();\r\n        const page = await browser.newPage();\r\n\r\n        // Establece el tamaño de la página y carga el contenido HTML\r\n        await page.setViewport({ width: 1200, height: 800 });\r\n        await page.setContent(htmlContent);\r\n\r\n        // Genera el PDF\r\n        const pdf = await page.pdf({ format: 'A4', landscape: true });\r\n\r\n        // Cierra el navegador de Puppeteer\r\n        await browser.close();\r\n\r\n        // Envía el PDF como respuesta\r\n        res.contentType('application/pdf');\r\n        res.send(pdf);\r\n    } catch (error) {\r\n        // Maneja cualquier error que ocurra\r\n        console.error('Error al generar el PDF:', error);\r\n        res.status(500).send('Error al generar el PDF');\r\n    }\r\n});\r\n\r\n//10 Hacer registro\r\napp.post('/registerP',authPage('Admin'),async(req, res) => {\r\n    const user = req.body.username;\r\n    const name = req.body.name;\r\n    const pass = req.body.password;\r\n    const rol = req.body.rol;\r\n    const genero = req.body.genero;\r\n    const correo  = req.body.correo;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    \r\n    connection.query('INSERT INTO usuarios SET ?', { NombreUsuario: user, Nombre: name, Contrasena: passwordHaash, Rol: rol, Genero: genero, Correo: correo }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            if (error.code === 'ER_DUP_ENTRY') {\r\n                res.render('alerta', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"¡Debe elegir otro nombre de usuario!\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: false,\r\n                    timer: 1500,\r\n                    ruta: 'panelAdmin'\r\n                });\r\n            }\r\n        } else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n})\r\n\r\napp.post('/registerT',authPage('Admin'),async(req, res) => { ///SEPARAR EN OTRA PESTAÑA\r\n    const nombre = req.body.nombreT;\r\n    const apellidos = req.body.apellidos;\r\n    const numeroT = req.body.noTrabajador;\r\n    const email = req.body.email;\r\n    const telefono = req.body.telef;\r\n    const IdUsuario  = req.body.IdUsuario;\r\n    const fecha = obtenerFechaActual();  \r\n    connection.query('INSERT INTO tecnicos SET ?', { Nombre: nombre, Apellidos: apellidos, NoTrabajador: numeroT, Correo: email, Telefono: telefono, IdUsuario: IdUsuario,FechaRegistro: fecha }, (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n        }\r\n             else {\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: \"Registro\",\r\n                alertMessage: \"¡Registro Exitoso!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n})\r\n\r\n//10 Hacer solicitud de soporte\r\napp.post('/solicitud', async(req, res) => {\r\n    const usuario = req.session.idUsuario; //\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    console.log(otroInput);\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:usuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion,IdAsignacion:0}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,req.session.correoUser);\r\n            const idSolicitud = results.insertId;\r\n            console.log(idSolicitud);\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${req.session.idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelUsuario'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\napp.post('/solicitudAdmin',authPage('Admin'), async(req, res) => {\r\n    const usuario = req.body.usuarios;\r\n    const [idUsuario, correoUsuario] = usuario.split('|');\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n    const telefono = req.body.telefono;\r\n    const edificio = req.body.edificio;\r\n    const ubicacion = req.body.area;\r\n    let equipo = req.body.equiposSeleccionados || '';\r\n    const descripcion = req.body.descripcion;\r\n    const otroInput = req.body.otroInput || '';\r\n\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    connection.query('INSERT INTO solicitudes SET ?', {IdUsuario:idUsuario,Fecha:fecha,Hora:hora,Telefono:telefono, IdEdificio:edificio, UbicacionFisica:ubicacion, Equipo:equipo, Descripcion: descripcion,IdAsignacion:0}, async(error, results)=> {\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            enviarMail(1,correoUsuario);\r\n            const idSolicitud = results.insertId;\r\n            console.log(idSolicitud);\r\n            const logQuery = `INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (${idUsuario},${idSolicitud},\"Abierto\",\"${fecha}\",\"${hora}\")`;\r\n\r\n            connection.query(logQuery, (error, cambioResults) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                res.render('alerta',{ //pasar parametros para el mensaje AlertSweet\r\n                alert: true,\r\n                alertTitle: \"Solicitud\",\r\n                alertMessage: \"¡Solicitud de Soporte Técnico Enviada!\",\r\n                alertIcon: \"success\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n                })\r\n            }\r\n            })\r\n        }\r\n    })\r\n    // Función para obtener la fecha y hora actual en formato MySQL\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//11 Autenticacion\r\napp.post('/auth', async (req,res)=> {\r\n    const user = req.body.username;\r\n    const pass = req.body.password;\r\n    let passwordHaash = await bcryptjs.hash(pass, 8);\r\n    if(user && pass){\r\n        connection.query('SELECT * FROM usuarios WHERE NombreUsuario = ?', [user], async (error, results)=>{\r\n            if(results.length == 0 || !(await bcryptjs.compare(pass, results[0].Contrasena))){ \r\n                //si es igual a 0 o no coincide la contraseña, en la comparacion de bcrypt se debe poner el nombre de la variable y despues [0]. el nombre del campo contraseña en la db\r\n                res.render('login', {\r\n                    alert: true,\r\n                    alertTitle: \"Error\",\r\n                    alertMessage: \"Usuario y/o contrseña incorrectas\",\r\n                    alertIcon: \"error\",\r\n                    showConfirmButton: true,\r\n                    timer: false,\r\n                    ruta :'login'\r\n                });\r\n            }else{\r\n                req.session.loggedin = true;\r\n                req.session.correoUser = results[0].Correo;\r\n                req.session.idUsuario = results[0].IdUsuario;\r\n                req.session.name = results[0].Nombre;\r\n                req.session.rol = results[0].Rol;\r\n                if (results[0].Rol === 'Admin') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelAdmin'  // Redirigir a la página de panelAdmin\r\n                    });\r\n                } else if (results[0].Rol === 'Tecnico') {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelTecnicos'  // Redirigir a la página de panelTecnico\r\n                    });\r\n                } else {\r\n                    res.render('login', {\r\n                        alert: true,\r\n                        alertTitle: \"Conexión exitosa\",\r\n                        alertMessage: \"¡LOGIN CORRECTO!\",\r\n                        alertIcon: \"success\",\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        ruta: 'panelUsuario'  // Redirigir a la página de solicitud\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }else{\r\n        res.render('login', {\r\n            alert: true,\r\n            alertTitle: \"Advertencia\",\r\n            alertMessage: \"¡Porfavor ingrese un usuario y/o contraseña!\",\r\n            alertIcon: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 1500,\r\n            ruta :'login'\r\n        });\r\n    }\r\n});\r\n\r\n//VALES\r\napp.post('/vales', async(req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioS = req.body.folios;\r\n    const [folioSolicitud, correoUsuarioFolio] = folioS.split('|');\r\n    let equipo = req.body.listaEquiposCheck || '';\r\n    const otroInput = req.body.otroInput2 || '';  \r\n    const noSerie = req.body.serie;\r\n    const marca = req.body.marca;\r\n    const modelo = req.body.modelo;\r\n    const estado = req.body.estatus;\r\n    const caracteris = req.body.caracteristicas;\r\n    const [idTecnico, correoTecnico] = req.body.tecnico.split('|');\r\n    console.log('ABAJO DEBE APARECER EL ID DEL TECNICO')\r\n    console.log(idTecnico) \r\n    console.log(correoTecnico)\r\n    // Añadir el valor de otroInput a la cadena de equipos\r\n    if (otroInput) {\r\n        equipo += (equipo ? ':' : '') + otroInput;\r\n    }\r\n    \r\n    const fechaHoraActual = new Date().toLocaleString();\r\n    const folioSeleccionado = folioSolicitud;\r\n    const templatePath = path.join(__dirname, 'views', 'generarVale.ejs');\r\n    \r\n    // Renderizar la plantilla HTML\r\n    const htmlContent = await ejs.renderFile(templatePath, {\r\n        folio: folioSeleccionado,\r\n        equipos: req.body.equipos,\r\n        serie: req.body.serie,\r\n        marca: req.body.marca,\r\n        modelo: req.body.modelo,\r\n        caracteristicas: req.body.caracteristicas,\r\n        estatus: req.body.estatus,\r\n        revision: req.body.revision,\r\n        fechaHoraActual: fechaHoraActual\r\n    });\r\n\r\n    // Crear una instancia de Puppeteer y generar el PDF\r\n    const browser = await puppeteer.launch();\r\n    const page = await browser.newPage();\r\n    const pdfPath = path.join(__dirname, 'docs', `ValeST24-${folioSeleccionado}.pdf`);\r\n\r\n    await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n    await page.pdf({ path: pdfPath, format: 'A4' });\r\n    await browser.close();\r\n\r\n    // Enviar respuesta al cliente\r\n\r\n    res.render('alerta', {\r\n        alert: true,\r\n        alertTitle: 'Éxito',\r\n        alertMessage: 'PDF generado y guardado correctamente',\r\n        alertIcon: 'success',\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n        ruta: 'panelAdmin'\r\n    });   \r\n\r\n    // Actualizar el estado de la solicitud en la base de datos\r\n    const cambioEstado = \"Asignada\";\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ? ', [cambioEstado, folioSolicitud], async(error, results)=> {\r\n        if (error) {\r\n            console.log(error);\r\n        } else {\r\n            // Insertar registros en la base de datos\r\n            connection.query('INSERT INTO asignaciones SET ?', { IdSolicitud: folioSolicitud, IdTecnico: idTecnico,DIagnostico:\"\", Solucion:\"\", Mensaje:\"\" }, async(error, results)=> {\r\n                if (error) {\r\n                    console.log(error);\r\n                } else {\r\n                    const IdAsignacion = results.insertId;\r\n                    await query(`UPDATE solicitudes SET IdAsignacion = ${IdAsignacion} WHERE FolioSolicitud = ${folioSolicitud}`);\r\n                    connection.query('INSERT INTO vales SET ?', {FolioSolicitud:folioSolicitud,Fecha:fecha,Equipo:equipo, NoSerieEquipo:noSerie, MarcaEquipo:marca, ModeloEquipo:modelo,Caracteristicas: caracteris ,Estado: estado,NombreUsuario:usuario}, async(error, results)=> {\r\n                        if (error) {\r\n                            console.log(error);\r\n                        } else {\r\n                            enviarMail(3,correoUsuarioFolio);\r\n                            enviarMail(5,correoTecnico);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n});\r\n\r\n// Función para obtener la fecha y hora actual en formato MySQL\r\nfunction obtenerFechaHoraActual() {\r\n    const fecha = new Date();\r\n    const año = fecha.getFullYear();\r\n    const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n    const dia = String(fecha.getDate()).padStart(2, '0');\r\n\r\n    return `${año}-${mes}-${dia}`;\r\n}\r\n\r\n// DICTAMENES\r\napp.post('/guardar-datos-y-generar-pdf', async (req, res) => {\r\n    const usuario = req.session.name;\r\n    const fecha = obtenerFechaHoraActual();\r\n    const folioSolicitudDictamen = req.session.folioSolicitudDictamen;\r\n    const vale = req.body.valeId;\r\n    console.log(folioSolicitudDictamen);\r\n    const equipoDictamen = req.body.equipoDictamen;\r\n    const marcaEquipo = req.body.marcaEquipo;\r\n    const modeloEquipo = req.body.modeloEquipo;\r\n    const noSerieEquipo = req.body.noSerieEquipo;\r\n    const estado = req.body.estado;\r\n    const tipoDictamen = req.body.tipoDictamen;\r\n    const caracDictamen = req.body.caracDictamen;\r\n    const observacionesDictamen = req.body.observacionesDictamen;\r\n    const descripcionDictamen = req.body.descripcionDictamen;\r\n\r\n    connection.query('INSERT INTO dictamenes SET ?', {\r\n        Encargado: usuario,\r\n        Fecha: fecha,\r\n        FolioSolicitud: folioSolicitudDictamen,\r\n        idVale: vale,\r\n        Equipo: equipoDictamen,\r\n        MarcaEquipo: marcaEquipo,\r\n        ModeloEquipo: modeloEquipo,\r\n        NoSerieEquipo: noSerieEquipo,\r\n        Estado: estado,\r\n        DictamenFinal: tipoDictamen,\r\n        caracDictamen: caracDictamen,\r\n        Observaciones: observacionesDictamen,\r\n        Descripcion: descripcionDictamen\r\n    }, async (error, results) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.status(500).send('Error al guardar los datos en la base de datos');\r\n        } else {\r\n            const idDictamen = results.insertId;\r\n\r\n            // Crear una instancia de Puppeteer\r\n            const browser = await puppeteer.launch();\r\n            const page = await browser.newPage();\r\n\r\n            // Ruta de la plantilla HTML\r\n            const templatePath = path.join(__dirname, 'views', 'generarDictamen.ejs');\r\n            console.log('Fecha a renderizar en la plantilla:', fecha);\r\n            const htmlContent = await ejs.renderFile(templatePath, {\r\n                dictamenes: [{\r\n                    idDictamen,\r\n                    FolioSolicitud: folioSolicitudDictamen,\r\n                    Fecha: fecha,\r\n                    Equipo: equipoDictamen,\r\n                    MarcaEquipo: marcaEquipo,\r\n                    ModeloEquipo: modeloEquipo,\r\n                    NoSerieEquipo: noSerieEquipo,\r\n                    Estado: estado,\r\n                    DictamenFinal: tipoDictamen,\r\n                    caracDictamen: caracDictamen,\r\n                    Observaciones: observacionesDictamen,\r\n                    Descripcion: descripcionDictamen\r\n                }],\r\n                fecha: fecha\r\n            });\r\n\r\n            await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });\r\n\r\n            // Ruta y nombre del archivo PDF\r\n            const pdfFileName = `DT24-${folioSolicitudDictamen}.pdf`;\r\n            const pdfFilePath = path.join(__dirname, './docs/', pdfFileName);\r\n\r\n            // Configurar la orientación a horizontal\r\n            const options = {\r\n                format: 'A4',\r\n                landscape: true \r\n            };\r\n\r\n\r\n            // Generar el PDF\r\n            await page.pdf({ path: pdfFilePath, ...options });\r\n\r\n            // Cerrar el navegador Puppeteer\r\n            await browser.close();\r\n\r\n            console.log('Archivo PDF generado y guardado correctamente');\r\n            console.log(req.session.correoDictamen)\r\n            enviarMail(4,req.session.correoDictamen);\r\n            res.render('alerta', {\r\n                alert: true,\r\n                alertTitle: 'Éxito',\r\n                alertMessage: 'PDF generado y guardado correctamente',\r\n                alertIcon: 'success',\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                ruta: 'panelAdmin'\r\n            });\r\n        }\r\n    });\r\n\r\n    function obtenerFechaHoraActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n});\r\n\r\n//ACTUALIZAR ESTADO DE LAS SOLICITUDES\r\napp.post('/actualizar-estado', async (req, res) => {\r\n    const { folio, nuevoEstado } = req.body;\r\n    const fecha = obtenerFechaActual().toString();\r\n    const hora = obtenerHoraActual().toString();\r\n\r\n    // Consulta para actualizar el estado en la tabla solicitudes\r\n    const cambiarEstado = 'UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?';\r\n    // Consulta para insertar el cambio en el log, solo si hay un cambio en el estado\r\n    const logQuery = 'INSERT INTO solicitudes_log (IdUsuario, FolioSolicitud, NuevoEstado, Fecha, Hora) VALUES (?, ?, ?, ?, ?)';\r\n    // Consulta para obtener el estado original antes de la actualización\r\n    const obtenerEstadoOriginal = 'SELECT s.Estado, s.IdUsuario, u.Correo FROM solicitudes s INNER JOIN usuarios u ON s.IdUsuario = u.IdUsuario WHERE s.FolioSolicitud = ?';\r\n\r\n    connection.query(obtenerEstadoOriginal, [folio], async (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el estado original:', error);\r\n            res.status(500).json({ error: 'Error al obtener el estado original' });\r\n        } else {\r\n            const usuarioEmail = results[0].Correo;\r\n            console.log(usuarioEmail);\r\n            console.log('ARRRIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');\r\n            const estadoOriginal = results[0].Estado;\r\n            // Ejecuta la consulta para cambiar el estado\r\n            connection.query(cambiarEstado, [nuevoEstado, folio], (updateError, updateResults) => {\r\n                if (updateError) {\r\n                    console.error('Error al actualizar la base de datos:', updateError);\r\n                    res.status(500).json({ error: 'Error al actualizar el estado en la base de datos' });\r\n                } else {\r\n                    console.log('Estado actualizado en la base de datos:', updateResults);\r\n                    // Inserta en el log solo si hay un cambio en el estado\r\n                    if (estadoOriginal !== nuevoEstado) {\r\n                        connection.query(logQuery, [req.session.idUsuario, folio, nuevoEstado, fecha, hora], (logError, logResults) => {\r\n                            if (logError) {\r\n                                console.error('Error al insertar en el log:', logError);\r\n                            } else {\r\n                                enviarMail(2,usuarioEmail);\r\n                                console.log('Cambio registrado en el log:', logResults);\r\n                            }\r\n                        });\r\n                    }\r\n                    res.json({ success: true, mensaje: 'Estado actualizado exitosamente' });\r\n                }\r\n            });\r\n        }\r\n    });\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n\r\n    }\r\n});\r\n\r\n//DESCARGAR PDF DESDE EL HISTORIAL\r\n//DESCARGAR VALE\r\napp.get('/descargarPDFvale', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `ValeST24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Vale no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//DESCARGAR DICTAMEN\r\napp.get('/descargarPDFdictamen', (req, res) => {\r\n    const folioSolicitud = req.query.folioSolicitud;\r\n    const pdfFileName = `DT24-${folioSolicitud}.pdf`; // Asegúrate de que el nombre del archivo refleje tu estructura\r\n    const pdfFilePath = path.join(__dirname, 'docs', pdfFileName);\r\n\r\n    res.download(pdfFilePath, (err) => {\r\n        if (err) {\r\n            console.error('Error al descargar el archivo PDF:', err);\r\n            console.log('Dictamen no encontrado');\r\n        }\r\n    });\r\n});\r\n\r\n//Actualizar el estado de las asignaciones\r\napp.post('/actualizarEstadoSolicitud', async (req, res) => {\r\n    const folioSolicitud = req.body.folioSolicitud;\r\n    const nuevoEstado = req.body.nuevoEstado;\r\n\r\n    // Actualiza el estado de la solicitud en la base de datos\r\n    connection.query('UPDATE solicitudes SET Estado = ? WHERE FolioSolicitud = ?', [nuevoEstado, folioSolicitud], (error, results) => {\r\n        if (error) {\r\n            console.error('Error al actualizar el estado de la solicitud:', error);\r\n            res.status(500).send('Error interno del servidor');\r\n        } else {\r\n            // Si se actualizó correctamente, muestra un mensaje de éxito con SweetAlert2\r\n            res.status(200).send('Estado actualizado correctamente');\r\n        }\r\n    });\r\n});\r\n\r\n// Creación de diagnósticos técnicos y soluciones aplicadas\r\napp.post('/crearDiagnostico', async (req, res) => {\r\n    const folioSeleccionado = req.body.folios; // Obtener el folio seleccionado del cuerpo de la solicitud\r\n    const diagnosticoT = req.body.diagnosticoT;\r\n    const solucion = req.body.solucion;\r\n    const fecha = obtenerFechaActual();\r\n    const hora = obtenerHoraActual();\r\n\r\n    // Consulta para obtener el IdTecnico de la tabla asignaciones\r\n    connection.query('SELECT IdTecnico FROM asignaciones WHERE IdSolicitud = ?', [folioSeleccionado], (error, results) => {\r\n        if (error) {\r\n            console.error('Error al obtener el IdTecnico:', error);\r\n            // Mostrar un mensaje de error utilizando SweetAlert2\r\n            res.render('panelTecnicos', {\r\n                alert: {\r\n                    alertTitle: 'Error',\r\n                    alertMessage: 'Error interno del servidor',\r\n                    alertIcon: 'error',\r\n                    showConfirmButton: true,\r\n                    timer: null,\r\n                    ruta: 'panelTecnicos' // Redirige a la misma página\r\n                }\r\n            });\r\n        } else {\r\n            const idTecnico = results[0].IdTecnico; // Se obtiene el IdTecnico de los resultados de la consulta\r\n            console.log('IdTecnico obtenido:', idTecnico);\r\n\r\n            // Inserción del diagnóstico y solución en la tabla asignaciones\r\n            connection.query('UPDATE asignaciones SET Diagnostico = ?, Solucion = ? WHERE IdSolicitud = ?',\r\n                [diagnosticoT, solucion, folioSeleccionado], (error, results) => {\r\n                    if (error) {\r\n                        console.error('Error al actualizar la tabla de asignaciones:', error);\r\n                        // Mostrar un mensaje de error utilizando SweetAlert2\r\n                        res.render('panelTecnicos', {\r\n                            alert: {\r\n                                alertTitle: 'Error',\r\n                                alertMessage: 'Error al actualizar la tabla de asignaciones',\r\n                                alertIcon: 'error',\r\n                                showConfirmButton: false,\r\n                                timer: 1500,\r\n                                ruta: 'panelTecnicos' // Redirige a la misma página\r\n                            }\r\n                        });\r\n                    } else {\r\n                        console.log('Diagnóstico y solución actualizados correctamente');\r\n\r\n                        // Consulta para obtener las asignaciones actualizadas\r\n                        connection.query('SELECT * FROM asignaciones WHERE IdTecnico = ?', [idTecnico], (error, asignaciones) => {\r\n                            if (error) {\r\n                                console.error('Error al obtener las asignaciones:', error);\r\n                                // Mostrar un mensaje de error utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Error',\r\n                                        alertMessage: 'Error al obtener las asignaciones',\r\n                                        alertIcon: 'error',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                console.log('Asignaciones obtenidas correctamente');\r\n                                // Mostrar un mensaje de éxito utilizando SweetAlert2\r\n                                res.render('panelTecnicos', {\r\n                                    alert: {\r\n                                        alertTitle: 'Éxito',\r\n                                        alertMessage: 'Diagnóstico y solución actualizados correctamente',\r\n                                        alertIcon: 'success',\r\n                                        showConfirmButton: false,\r\n                                        timer: 1500,\r\n                                        ruta: 'panelTecnicos' // Redirige a la misma página\r\n                                    },\r\n                                    asignaciones: asignaciones // Pasar las asignaciones al archivo EJS\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    });\r\n\r\n    // Función para obtener la fecha actual en formato AAAA-MM-DD\r\n    function obtenerFechaActual() {\r\n        const fecha = new Date();\r\n        const año = fecha.getFullYear();\r\n        const mes = String(fecha.getMonth() + 1).padStart(2, '0');\r\n        const dia = String(fecha.getDate()).padStart(2, '0');\r\n        return `${año}-${mes}-${dia}`;\r\n    }\r\n\r\n    // Función para obtener la hora actual en formato HH:MM:SS\r\n    function obtenerHoraActual() {\r\n        const fecha = new Date();\r\n        const horas = String(fecha.getHours()).padStart(2, '0');\r\n        const minutos = String(fecha.getMinutes()).padStart(2, '0');\r\n        const segundos = String(fecha.getSeconds()).padStart(2, '0');\r\n        return `${horas}:${minutos}:${segundos}`;\r\n    }\r\n});\r\n\r\n//12 Auth page\r\napp.get('/',(req, res)=>{\r\n\r\n    if(req.session.loggedin){\r\n        res.render('login',{\r\n            login: true,\r\n            name: req.session.name\r\n        });\r\n    }else{\r\n        res.render('login',{\r\n            login: false,\r\n            name: 'Debe iniciar sesión'\r\n        })\r\n    }\r\n})\r\n\r\n//13 Logout\r\napp.get('/logout', (req, res)=>{\r\n    req.session.destroy(()=>{\r\n        res.redirect('/login'); //Redirige al index\r\n    });\r\n})\r\n\r\n//Hacemos que funcione el servidor local en el puerto\r\napp.listen(3000, (req, res)=> {\r\n    console.log('SERVER RUNNING IN http://localhost:3000');\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.js b/app.js
--- a/app.js	(revision 929ec40a983fdc20cf8fd611ec9313d3103ab59b)
+++ b/app.js	(date 1715100796829)
@@ -140,13 +140,27 @@
                                                 JOIN ${tipo} a ON d.FolioSolicitud = a.FolioSolicitud
                                                 WHERE d.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'
                                                 GROUP BY d.DictamenFinal`);
+        const solicitudesSinDictamen = await query(`SELECT COUNT(s.FolioSolicitud) AS NumSolicitudesCerradasSinDictamen
+                                                        FROM solicitudes s
+                                                        LEFT JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud
+                                                        JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud
+                                                        WHERE s.Estado = 'Cerrado' AND d.FolioSolicitud IS NULL 
+                                                        AND s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);
+        const solicitudesConDictamen = await query(`SELECT COUNT(s.FolioSolicitud) AS NumSolicitudesCerradasConDictamenYVales
+                                                    FROM solicitudes s
+                                                    JOIN dictamenes d ON s.FolioSolicitud = d.FolioSolicitud
+                                                    JOIN vales v ON s.FolioSolicitud = v.FolioSolicitud
+                                                    WHERE s.Estado = 'Cerrado'
+                                                    AND s.Fecha BETWEEN '${fecha}' AND '${fechaFinal}'`);
         console.log(folios);
         console.log(conteoEstados);
         console.log(usuariosPorSoli);
         console.log(asignacionesTecnicos);
         console.log(solucionesDictamen);
+        console.log(solicitudesSinDictamen);
+        console.log(solicitudesConDictamen);
         // Renderizar la vista de estadísticas y pasar los datos
-        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen });
+        res.render('estadisticas', { tipo, desdeFecha, hastaFecha, objetos: folios, conteo:conteoEstados, usuariosPorSoli:usuariosPorSoli, asignacionesTecnicos:asignacionesTecnicos, solucionesDictamen:solucionesDictamen, solicitudesSinDictamen:solicitudesSinDictamen, solicitudesConDictamen:solicitudesConDictamen});
     } catch (error) {
         console.error('Error al ejecutar la consulta SQL:', error);
         // Manejar el error adecuadamente, por ejemplo, renderizando una página de error
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app.js\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/estadisticas.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/estadisticas.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/generarDictamen.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/generarDictamen.ejs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/views/panelAdmin.ejs\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ComposerSettings\">\n    <execution />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"$USER_HOME$/Library/Application Support/Herd/bin/php\" />\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2fyKfmjlEw7LogYHpH60cK6yRPW\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;dev&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/env\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-php-predefined-ba97393d7c68-6f8e3395a2b4-com.jetbrains.php.sharedIndexes-PS-233.15026.12\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b75b1334-c68d-4ec7-9620-54811fca6eb8\" name=\"Changes\" comment=\"\" />\n      <created>1714767983038</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714767983038</updated>\n      <workItem from=\"1714767984758\" duration=\"553000\" />\n      <workItem from=\"1714794178238\" duration=\"660000\" />\n      <workItem from=\"1714795177084\" duration=\"1172000\" />\n      <workItem from=\"1714838497315\" duration=\"6121000\" />\n      <workItem from=\"1714880657411\" duration=\"5271000\" />\n      <workItem from=\"1714939940395\" duration=\"14014000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"UnknownFeatures\">\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\".env\" />\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.ejs\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 929ec40a983fdc20cf8fd611ec9313d3103ab59b)
+++ b/.idea/workspace.xml	(date 1715101094561)
@@ -4,12 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="b75b1334-c68d-4ec7-9620-54811fca6eb8" name="Changes" comment="">
+    <list default="true" id="b75b1334-c68d-4ec7-9620-54811fca6eb8" name="Changes" comment="Estadísticas listo">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app.js" beforeDir="false" afterPath="$PROJECT_DIR$/app.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/views/estadisticas.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/estadisticas.ejs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/views/generarDictamen.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/generarDictamen.ejs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/views/panelAdmin.ejs" beforeDir="false" afterPath="$PROJECT_DIR$/views/panelAdmin.ejs" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -76,8 +74,21 @@
       <workItem from="1714795177084" duration="1172000" />
       <workItem from="1714838497315" duration="6121000" />
       <workItem from="1714880657411" duration="5271000" />
-      <workItem from="1714939940395" duration="14014000" />
+      <workItem from="1714939940395" duration="16010000" />
+      <workItem from="1715002742994" duration="1377000" />
+      <workItem from="1715013976202" duration="523000" />
+      <workItem from="1715050178899" duration="5038000" />
+      <workItem from="1715100765340" duration="328000" />
     </task>
+    <task id="LOCAL-00001" summary="Estadísticas listo">
+      <option name="closed" value="true" />
+      <created>1714963167888</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1714963167888</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -89,5 +100,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
+    <MESSAGE value="Estadísticas listo" />
+    <option name="LAST_COMMIT_MESSAGE" value="Estadísticas listo" />
   </component>
 </project>
\ No newline at end of file
